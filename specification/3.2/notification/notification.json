{
  "swagger": "2.0",
  "info": {
    "title": "Notification",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "4.0"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "basePath": "/",
  "tags": [
    {
      "name": "batchNotificationOperations"
    },
    {
      "name": "events"
    },
    {
      "name": "eventTypes"
    },
    {
      "name": "subscribers"
    },
    {
      "name": "subscriptionQuery"
    },
    {
      "name": "subscriptions"
    },
    {
      "name": "subscriptionTemplates"
    },
    {
      "name": "userSettings"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/_apis/notification/eventtypes": {
      "get": {
        "tags": [
          "EventTypes"
        ],
        "summary": "ListEventTypes",
        "description": "List available event types for this service. Optionally filter by only event types for the specified publisher.",
        "operationId": "EventTypes_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "publisherId",
            "description": "Limit to event types for this publisher",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationEventType"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification"
            ]
          }
        ],
        "x-ms-examples": {
          "All event types": { "$ref": "./examples/GET__notification_eventTypes.json" }
        }
      }
    },
    "/_apis/notification/eventtypes/{eventType}": {
      "get": {
        "tags": [
          "EventTypes"
        ],
        "summary": "GetEventType",
        "description": "Get a specific event type.",
        "operationId": "EventTypes_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "eventType",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationEventType"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification"
            ]
          }
        ],
        "x-ms-examples": {
          "By event type ID": { "$ref": "./examples/GET__notification_eventTypes__eventTypeId_.json" }
        }
      }
    },
    "/_apis/notification/subscribers/{subscriberId}": {
      "get": {
        "tags": [
          "Subscribers"
        ],
        "summary": "GetSubscriber",
        "description": "",
        "operationId": "Subscribers_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriberId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationSubscriber"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Subscribers"
        ],
        "summary": "UpdateSubscriber",
        "description": "",
        "operationId": "Subscribers_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationSubscriberUpdateParameters"
            }
          },
          {
            "in": "path",
            "name": "subscriberId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationSubscriber"
            }
          }
        }
      }
    },
    "/_apis/notification/subscriptionquery": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "QuerySubscriptions",
        "description": "Query for subscriptions. A subscription is returned if it matches one or more of the specified conditions.",
        "operationId": "Subscriptions_Query",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationSubscription"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification"
            ]
          }
        ]
      }
    },
    "/_apis/notification/subscriptions": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "CreateSubscription",
        "description": "Create a new subscription.",
        "operationId": "Subscriptions_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationSubscriptionCreateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationSubscription"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification_write"
            ]
          }
        ],
        "x-ms-examples": {
          "For an individual user": { "$ref": "./examples/POST__notification_subscriptions.json" },
          "For a team": { "$ref": "./examples/POST__notification_subscriptions2.json" }
        }
      },
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "ListSubscriptions",
        "description": "",
        "operationId": "Subscriptions_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "targetId",
            "description": "",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "queryFlags",
            "description": "",
            "required": false,
            "type": "string",
            "format": "SubscriptionQueryFlags"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationSubscription"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification"
            ]
          }
        ],
        "x-ms-examples": {
          "For me": { "$ref": "./examples/GET__notification_subscriptions.json" }
        }
      }
    },
    "/_apis/notification/subscriptions/{subscriptionId}": {
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "DeleteSubscription",
        "description": "Delete a subscription.",
        "operationId": "Subscriptions_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification_write"
            ]
          }
        ],
        "x-ms-examples": {
          "User subscription": { "$ref": "./examples/DELETE__notification_subscriptions__subscriptionId_.json" },
          "Team subscription": { "$ref": "./examples/DELETE__notification_subscriptions__teamSubscriptionId_.json" }
        }
      },
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "GetSubscription",
        "description": "Get a notification subscription by its ID.",
        "operationId": "Subscriptions_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queryFlags",
            "description": "",
            "required": false,
            "type": "string",
            "format": "SubscriptionQueryFlags"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationSubscription"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "UpdateSubscription",
        "description": "Update an existing subscription. Depending on the type of subscription and permissions, the caller can update the description, filter settings, channel (delivery) settings and more.",
        "operationId": "Subscriptions_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationSubscriptionUpdateParameters"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationSubscription"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification_write"
            ]
          }
        ]
      }
    },
    "/_apis/notification/Subscriptions/{subscriptionId}/usersettings/{userId}": {
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "UpdateSubscriptionUserSettings",
        "description": "Update the specified users' settings for the specified subscription. User settings can only be applied to shared subscriptions, like team subscriptions or default subscriptions. This API is typically used to opt in or out of a shared subscription.",
        "operationId": "Subscriptions_UpdateUserSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionUserSettings"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "ID of the user or \"me\" to indicate the calling user",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionUserSettings"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.notification_write"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "ArtifactFilter": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseSubscriptionFilter"
        }
      ],
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "artifactType": {
          "type": "string"
        },
        "artifactUri": {
          "type": "string"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "BaseSubscriptionFilter": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "BatchNotificationOperation": {
      "description": "",
      "type": "object",
      "properties": {
        "notificationOperation": {
          "enum": [
            "none",
            "suspendUnprocessed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.NotificationOperation"
          }
        },
        "notificationQueryConditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationQueryCondition"
          }
        }
      }
    },
    "EventActor": {
      "description": "Defines an \"actor\" for an event.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Required: This is the identity of the user for the specified role.",
          "type": "string",
          "format": "uuid"
        },
        "role": {
          "description": "Required: The event specific name of a role.",
          "type": "string"
        }
      }
    },
    "EventScope": {
      "description": "Defines a scope for an event.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Required: This is the identity of the scope for the type.",
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "description": "Required: The event specific type of a scope.",
          "type": "string"
        }
      }
    },
    "EventsEvaluationResult": {
      "description": "Encapsulates events result properties. It defines the total number of events used and the number of matched events.",
      "type": "object",
      "properties": {
        "count": {
          "description": "Count of events evaluated.",
          "type": "integer",
          "format": "int32"
        },
        "matchedCount": {
          "description": "Count of matched events.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ExpressionFilterClause": {
      "description": "Subscription Filter Clause represents a single clause in a subscription filter e.g. If the subscription has the following criteria \"Project Name = [Current Project] AND Assigned To = [Me] it will be represented as two Filter Clauses Clause 1: Index = 1, Logical Operator: NULL  , FieldName = 'Project Name', Operator = '=', Value = '[Current Project]' Clause 2: Index = 2, Logical Operator: 'AND' , FieldName = 'Assigned To' , Operator = '=', Value = '[Me]'",
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "index": {
          "description": "The order in which this clause appeared in the filter query",
          "type": "integer",
          "format": "int32"
        },
        "logicalOperator": {
          "description": "Logical Operator 'AND', 'OR' or NULL (only for the first clause in the filter)",
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ExpressionFilterGroup": {
      "description": "Represents a hierarchy of SubscritionFilterClauses that have been grouped together through either adding a group in the WebUI or using parethesis in the Subscription condition string",
      "type": "object",
      "properties": {
        "end": {
          "description": "The index of the last FilterClause in this group",
          "type": "integer",
          "format": "int32"
        },
        "level": {
          "description": "Level of the group, since groups can be nested for each nested group the level will increase by 1",
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "description": "The index of the first FilterClause in this group",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ExpressionFilterModel": {
      "description": "",
      "type": "object",
      "properties": {
        "clauses": {
          "description": "Flat list of clauses in this subscription",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpressionFilterClause"
          }
        },
        "groups": {
          "description": "Grouping of clauses in the subscription",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpressionFilterGroup"
          }
        },
        "maxGroupLevel": {
          "description": "Max depth of the Subscription tree",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FieldInputValues": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InputValues"
        }
      ],
      "properties": {
        "operators": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "FieldValuesQuery": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InputValuesQuery"
        }
      ],
      "properties": {
        "inputValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldInputValues"
          }
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "description": "",
      "type": "object",
      "properties": {
        "directoryAlias": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "InputValue": {
      "description": "Information about a single value for an input",
      "type": "object",
      "properties": {
        "data": {
          "description": "Any other data about this input",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "displayValue": {
          "description": "The text to show for the display of this value",
          "type": "string"
        },
        "value": {
          "description": "The value to store for this input",
          "type": "string"
        }
      }
    },
    "InputValues": {
      "description": "Information about the possible/allowed values for a given subscription input",
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value to use for this input",
          "type": "string"
        },
        "error": {
          "description": "Errors encountered while computing dynamic values.",
          "$ref": "#/definitions/InputValuesError"
        },
        "inputId": {
          "description": "The id of the input",
          "type": "string"
        },
        "isDisabled": {
          "description": "Should this input be disabled",
          "type": "boolean"
        },
        "isLimitedToPossibleValues": {
          "description": "Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)",
          "type": "boolean"
        },
        "isReadOnly": {
          "description": "Should this input be made read-only",
          "type": "boolean"
        },
        "possibleValues": {
          "description": "Possible values that this input can take",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValue"
          }
        }
      }
    },
    "InputValuesError": {
      "description": "Error information related to a subscription input value.",
      "type": "object",
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string"
        }
      }
    },
    "InputValuesQuery": {
      "description": "",
      "type": "object",
      "properties": {
        "currentValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputValues": {
          "description": "The input values to return on input, and the result from the consumer on output.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValues"
          }
        },
        "resource": {
          "description": "Subscription containing information about the publisher/consumer and the current input values",
          "type": "object"
        }
      }
    },
    "ISubscriptionChannel": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "ISubscriptionFilter": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "NotificationEventField": {
      "description": "Encapsulates the properties of a filterable field. A filterable field is a field in an event that can used to filter notifications for a certain event type.",
      "type": "object",
      "properties": {
        "fieldType": {
          "description": "Gets or sets the type of this field.",
          "$ref": "#/definitions/NotificationEventFieldType"
        },
        "id": {
          "description": "Gets or sets the unique identifier of this field.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the name of this field.",
          "type": "string"
        },
        "path": {
          "description": "Gets or sets the path to the field in the event object. This path can be either Json Path or XPath, depending on if the event will be serialized into Json or XML",
          "type": "string"
        },
        "supportedScopes": {
          "description": "Gets or sets the scopes that this field supports. If not specified then the event type scopes apply.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NotificationEventFieldOperator": {
      "description": "Encapsulates the properties of a field type. It includes a unique id for the operator and a localized string for display name",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Gets or sets the display name of an operator",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the id of an operator",
          "type": "string"
        }
      }
    },
    "NotificationEventFieldType": {
      "description": "Encapsulates the properties of a field type. It describes the data type of a field, the operators it support and how to populate it in the UI",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the unique identifier of this field type.",
          "type": "string"
        },
        "operatorConstraints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperatorConstraint"
          }
        },
        "operators": {
          "description": "Gets or sets the list of operators that this type supports.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationEventFieldOperator"
          }
        },
        "subscriptionFieldType": {
          "enum": [
            "string",
            "integer",
            "dateTime",
            "plainText",
            "html",
            "treePath",
            "history",
            "double",
            "guid",
            "boolean",
            "identity",
            "picklistInteger",
            "picklistString",
            "picklistDouble",
            "teamProject"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionFieldType"
          }
        },
        "value": {
          "description": "Gets or sets the value definition of this field like the getValuesMethod and template to display in the UI",
          "$ref": "#/definitions/ValueDefinition"
        }
      }
    },
    "NotificationEventPublisher": {
      "description": "Encapsulates the properties of a notification event publisher.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "subscriptionManagementInfo": {
          "$ref": "#/definitions/SubscriptionManagement"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "NotificationEventRole": {
      "description": "Encapsulates the properties of an event role.  An event Role is used for role based subscription for example for a buildCompletedEvent, one role is request by field",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets an Id for that role, this id is used by the event.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the Name for that role, this name is used for UI display.",
          "type": "string"
        },
        "supportsGroups": {
          "description": "Gets or sets whether this role can be a group or just an individual user",
          "type": "boolean"
        }
      }
    },
    "NotificationEventType": {
      "description": "Encapsulates the properties of an event type. It defines the fields, that can be used for filtering, for that event type.",
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/NotificationEventTypeCategory"
        },
        "color": {
          "description": "Gets or sets the color representing this event type. Example: rgb(128,245,211) or #fafafa",
          "type": "string"
        },
        "customSubscriptionsAllowed": {
          "type": "boolean"
        },
        "eventPublisher": {
          "$ref": "#/definitions/NotificationEventPublisher"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/NotificationEventField"
          }
        },
        "hasInitiator": {
          "type": "boolean"
        },
        "icon": {
          "description": "Gets or sets the icon representing this event type. Can be a URL or a CSS class. Example: css://some-css-class",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the unique identifier of this event definition.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the name of this event definition.",
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationEventRole"
          }
        },
        "supportedScopes": {
          "description": "Gets or sets the scopes that this event type supports",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "description": "Gets or sets the rest end point to get this event type details (fields, fields types)",
          "type": "string"
        }
      }
    },
    "NotificationEventTypeCategory": {
      "description": "Encapsulates the properties of a category. A category will be used by the UI to group event types",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the unique identifier of this category.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the friendly name of this category.",
          "type": "string"
        }
      }
    },
    "NotificationQueryCondition": {
      "description": "",
      "type": "object",
      "properties": {
        "eventInitiator": {
          "type": "string",
          "format": "uuid"
        },
        "eventType": {
          "type": "string"
        },
        "subscriber": {
          "type": "string",
          "format": "uuid"
        },
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "NotificationsEvaluationResult": {
      "description": "Encapsulates notifications result properties. It defines the number of notifications and the recipients of notifications.",
      "type": "object",
      "properties": {
        "count": {
          "description": "Count of generated notifications",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NotificationStatistic": {
      "description": "",
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "hitCount": {
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "type": "string"
        },
        "type": {
          "enum": [
            "notificationBySubscription",
            "eventsByEventType",
            "notificationByEventType",
            "eventsByEventTypePerUser",
            "notificationByEventTypePerUser",
            "events",
            "notifications",
            "unprocessedRangeStart",
            "unprocessedEventsByPublisher",
            "unprocessedEventDelayByPublisher",
            "unprocessedNotificationsByChannelByPublisher",
            "unprocessedNotificationDelayByChannelByPublisher",
            "hourlyRangeStart",
            "hourlyNotificationBySubscription",
            "hourlyEventsByEventTypePerUser",
            "hourlyEvents",
            "hourlyNotifications"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.NotificationStatisticType"
          }
        },
        "user": {
          "$ref": "#/definitions/IdentityRef"
        }
      }
    },
    "NotificationStatisticsQuery": {
      "description": "",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationStatisticsQueryConditions"
          }
        }
      }
    },
    "NotificationStatisticsQueryConditions": {
      "description": "",
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "hitCountMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "type": "string"
        },
        "type": {
          "enum": [
            "notificationBySubscription",
            "eventsByEventType",
            "notificationByEventType",
            "eventsByEventTypePerUser",
            "notificationByEventTypePerUser",
            "events",
            "notifications",
            "unprocessedRangeStart",
            "unprocessedEventsByPublisher",
            "unprocessedEventDelayByPublisher",
            "unprocessedNotificationsByChannelByPublisher",
            "unprocessedNotificationDelayByChannelByPublisher",
            "hourlyRangeStart",
            "hourlyNotificationBySubscription",
            "hourlyEventsByEventTypePerUser",
            "hourlyEvents",
            "hourlyNotifications"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.NotificationStatisticType"
          }
        },
        "user": {
          "$ref": "#/definitions/IdentityRef"
        }
      }
    },
    "NotificationSubscriber": {
      "description": "A subscriber is a user or group that has the potential to receive notifications.",
      "type": "object",
      "properties": {
        "deliveryPreference": {
          "description": "Indicates how the subscriber should be notified by default.",
          "enum": [
            "none",
            "preferredEmailAddress",
            "eachMember",
            "noDelivery",
            "notSet"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.NotificationSubscriberDeliveryPreference"
          }
        },
        "flags": {
          "enum": [
            "none",
            "deliveryPreferencesEditable"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriberFlags"
          }
        },
        "id": {
          "description": "Identifier of the subscriber.",
          "type": "string",
          "format": "uuid"
        },
        "preferredEmailAddress": {
          "description": "Preferred email address of the subscriber. A null or empty value indicates no preferred email address has been set.",
          "type": "string"
        }
      }
    },
    "NotificationSubscriberUpdateParameters": {
      "description": "Updates to a subscriber. Typically used to change (or set) a preferred email address or default delivery preference.",
      "type": "object",
      "properties": {
        "deliveryPreference": {
          "description": "New delivery preference for the subscriber (indicates how the subscriber should be notified).",
          "enum": [
            "none",
            "preferredEmailAddress",
            "eachMember",
            "noDelivery",
            "notSet"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.NotificationSubscriberDeliveryPreference"
          }
        },
        "preferredEmailAddress": {
          "description": "New preferred email address for the subscriber. Specify an empty string to clear the current address.",
          "type": "string"
        }
      }
    },
    "NotificationSubscription": {
      "description": "A subscription defines criteria for matching events and how the subscription's subscriber should be notified about those events.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Links to related resources, APIs, and views for the subscription.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "adminSettings": {
          "description": "Admin-managed settings for the subscription. Only applies when the subscriber is a group.",
          "$ref": "#/definitions/SubscriptionAdminSettings"
        },
        "channel": {
          "description": "Channel for delivering notifications triggered by the subscription.",
          "$ref": "#/definitions/ISubscriptionChannel"
        },
        "description": {
          "description": "Description of the subscription. Typically describes filter criteria which helps identity the subscription.",
          "type": "string"
        },
        "extendedProperties": {
          "description": "Any extra properties like detailed description for different contexts, user/group contexts",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "filter": {
          "description": "Matching criteria for the subscription.",
          "$ref": "#/definitions/ISubscriptionFilter"
        },
        "flags": {
          "description": "Read-only indicators that further describe the subscription.",
          "enum": [
            "none",
            "groupSubscription",
            "contributedSubscription",
            "canOptOut",
            "teamSubscription"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionFlags"
          }
        },
        "id": {
          "description": "Subscription identifier.",
          "type": "string"
        },
        "lastModifiedBy": {
          "description": "User that last modified (or created) the subscription.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedDate": {
          "description": "Date when the subscription was last modified. If the subscription has not been updated since it was created, this value will indicate when the subscription was created.",
          "type": "string",
          "format": "date-time"
        },
        "permissions": {
          "description": "The permissions the user have for this subscriptions.",
          "enum": [
            "none",
            "view",
            "edit",
            "delete"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionPermissions"
          }
        },
        "scope": {
          "description": "The container in which events must be published from in order to be matched by the subscription. If empty, the scope is the current host (typically an account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.",
          "$ref": "#/definitions/SubscriptionScope"
        },
        "status": {
          "description": "Status of the subscription. Typically indicates whether the subscription is enabled or not.",
          "enum": [
            "jailedByNotificationsVolume",
            "pendingDeletion",
            "disabledBySystem",
            "disabledInactiveIdentity",
            "disabledMessageQueueNotSupported",
            "disabledMissingIdentity",
            "disabledInvalidRoleExpression",
            "disabledInvalidPathClause",
            "disabledAsDuplicateOfDefault",
            "disabledByAdmin",
            "disabled",
            "enabled",
            "enabledOnProbation"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionStatus"
          }
        },
        "statusMessage": {
          "description": "Message that provides more details about the status of the subscription.",
          "type": "string"
        },
        "subscriber": {
          "description": "User or group that will receive notifications for events matching the subscription's filter criteria.",
          "$ref": "#/definitions/IdentityRef"
        },
        "url": {
          "description": "REST API URL of the subscriotion.",
          "type": "string"
        },
        "userSettings": {
          "description": "User-managed settings for the subscription. Only applies when the subscriber is a group. Typically used to indicate whether the calling user is opted in or out of a group subscription.",
          "$ref": "#/definitions/SubscriptionUserSettings"
        }
      }
    },
    "NotificationSubscriptionCreateParameters": {
      "description": "Parameters for creating a new subscription. A subscription defines criteria for matching events and how the subscription's subscriber should be notified about those events.",
      "type": "object",
      "properties": {
        "channel": {
          "description": "Channel for delivering notifications triggered by the new subscription.",
          "$ref": "#/definitions/ISubscriptionChannel"
        },
        "description": {
          "description": "Brief description for the new subscription. Typically describes filter criteria which helps identity the subscription.",
          "type": "string"
        },
        "filter": {
          "description": "Matching criteria for the new subscription.",
          "$ref": "#/definitions/ISubscriptionFilter"
        },
        "scope": {
          "description": "The container in which events must be published from in order to be matched by the new subscription. If not specified, defaults to the current host (typically an account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.",
          "$ref": "#/definitions/SubscriptionScope"
        },
        "subscriber": {
          "description": "User or group that will receive notifications for events matching the subscription's filter criteria. If not specified, defaults to the calling user.",
          "$ref": "#/definitions/IdentityRef"
        }
      }
    },
    "NotificationSubscriptionTemplate": {
      "description": "",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "filter": {
          "$ref": "#/definitions/ISubscriptionFilter"
        },
        "id": {
          "type": "string"
        },
        "notificationEventInformation": {
          "$ref": "#/definitions/NotificationEventType"
        },
        "type": {
          "enum": [
            "user",
            "team",
            "both",
            "none"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionTemplateType"
          }
        }
      }
    },
    "NotificationSubscriptionUpdateParameters": {
      "description": "Parameters for updating an existing subscription. A subscription defines criteria for matching events and how the subscription's subscriber should be notified about those events. Note: only the fields to be updated should be set.",
      "type": "object",
      "properties": {
        "adminSettings": {
          "description": "Admin-managed settings for the subscription. Only applies to subscriptions where the subscriber is a group.",
          "$ref": "#/definitions/SubscriptionAdminSettings"
        },
        "channel": {
          "description": "Channel for delivering notifications triggered by the subscription.",
          "$ref": "#/definitions/ISubscriptionChannel"
        },
        "description": {
          "description": "Updated description for the subscription. Typically describes filter criteria which helps identity the subscription.",
          "type": "string"
        },
        "filter": {
          "description": "Matching criteria for the subscription.",
          "$ref": "#/definitions/ISubscriptionFilter"
        },
        "scope": {
          "description": "The container in which events must be published from in order to be matched by the new subscription. If not specified, defaults to the current host (typically the current account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.",
          "$ref": "#/definitions/SubscriptionScope"
        },
        "status": {
          "description": "Updated status for the subscription. Typically used to enable or disable a subscription.",
          "enum": [
            "jailedByNotificationsVolume",
            "pendingDeletion",
            "disabledBySystem",
            "disabledInactiveIdentity",
            "disabledMessageQueueNotSupported",
            "disabledMissingIdentity",
            "disabledInvalidRoleExpression",
            "disabledInvalidPathClause",
            "disabledAsDuplicateOfDefault",
            "disabledByAdmin",
            "disabled",
            "enabled",
            "enabledOnProbation"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionStatus"
          }
        },
        "statusMessage": {
          "description": "Optional message that provides more details about the updated status.",
          "type": "string"
        },
        "userSettings": {
          "description": "User-managed settings for the subscription. Only applies to subscriptions where the subscriber is a group. Typically used to opt-in or opt-out a user from a group subscription.",
          "$ref": "#/definitions/SubscriptionUserSettings"
        }
      }
    },
    "OperatorConstraint": {
      "description": "Encapsulates the properties of an operator constraint. An operator constraint defines if some operator is available only for specific scope like a project scope.",
      "type": "object",
      "properties": {
        "operator": {
          "type": "string"
        },
        "supportedScopes": {
          "description": "Gets or sets the list of scopes that this type supports.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.  Example: { self: { href: \"http://localhost:8080/tfs/DefaultCollection/_apis/wit/workItems/1\" } }",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "SubscriptionAdminSettings": {
      "description": "Admin-managed settings for a group subscription.",
      "type": "object",
      "properties": {
        "blockUserOptOut": {
          "description": "If true, members of the group subscribed to the associated subscription cannot opt (choose not to get notified)",
          "type": "boolean"
        }
      }
    },
    "SubscriptionChannelWithAddress": {
      "description": "",
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        },
        "useCustomAddress": {
          "type": "boolean"
        }
      }
    },
    "SubscriptionEvaluationRequest": {
      "description": "Encapsulates the properties of a SubscriptionEvaluationRequest. It defines the subscription to be evaluated and time interval for events used in evaluation.",
      "type": "object",
      "properties": {
        "minEventsCreatedDate": {
          "description": "The min created date for the events used for matching in UTC. Use all events created since this date",
          "type": "string",
          "format": "date-time"
        },
        "subscriptionCreateParameters": {
          "description": "User or group that will receive notifications for events matching the subscription's filter criteria. If not specified, defaults to the calling user.",
          "$ref": "#/definitions/NotificationSubscriptionCreateParameters"
        }
      }
    },
    "SubscriptionEvaluationResult": {
      "description": "Ecapsulates the subscription evaluation results. It defines the Date Interval that was used, number of events evaluated and events and notifications results",
      "type": "object",
      "properties": {
        "evaluationJobStatus": {
          "description": "Subscription evaluation job status",
          "readOnly": true,
          "enum": [
            "notSet",
            "queued",
            "inProgress",
            "cancelled",
            "succeeded",
            "failed",
            "timedOut",
            "notFound"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.EvaluationOperationStatus"
          }
        },
        "events": {
          "description": "Subscription evaluation events results.",
          "$ref": "#/definitions/EventsEvaluationResult"
        },
        "id": {
          "description": "The requestId which is the subscription evaluation jobId",
          "type": "string",
          "format": "uuid"
        },
        "notifications": {
          "description": "Subscription evaluation  notification results.",
          "$ref": "#/definitions/NotificationsEvaluationResult"
        }
      }
    },
    "SubscriptionEvaluationSettings": {
      "description": "Encapsulates the subscription evaluation settings needed for the UI",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Indicates whether subscription evaluation before saving is enabled or not",
          "type": "boolean"
        },
        "interval": {
          "description": "Time interval to check on subscription evaluation job in seconds",
          "type": "integer",
          "format": "int32"
        },
        "threshold": {
          "description": "Threshold on the number of notifications for considering a subscription too noisy",
          "type": "integer",
          "format": "int32"
        },
        "timeOut": {
          "description": "Time out for the subscription evaluation check in seconds",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SubscriptionManagement": {
      "description": "Encapsulates the properties needed to manage subscriptions, opt in and out of subscriptions.",
      "type": "object",
      "properties": {
        "serviceInstanceType": {
          "type": "string",
          "format": "uuid"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "SubscriptionQuery": {
      "description": "Notification subscriptions query input.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "One or more conditions to query on. If more than 2 conditions are specified, the combined results of each condition is returned (i.e. conditions are logically OR'ed).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionQueryCondition"
          }
        },
        "queryFlags": {
          "description": "Flags the refine the types of subscriptions that will be returned from the query.",
          "enum": [
            "none",
            "includeInvalidSubscriptions",
            "includeDeletedSubscriptions",
            "includeFilterDetails",
            "alwaysReturnBasicInformation"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionQueryFlags"
          }
        }
      }
    },
    "SubscriptionQueryCondition": {
      "description": "Conditions a subscription must match to qualify for the query result set. Not all fields are required. A subscription must match all conditions specified in order to qualify for the result set.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "Filter conditions that matching subscriptions must have. Typically only the filter's type and event type are used for matching.",
          "$ref": "#/definitions/ISubscriptionFilter"
        },
        "flags": {
          "description": "Flags to specify the the type subscriptions to query for.",
          "enum": [
            "none",
            "groupSubscription",
            "contributedSubscription",
            "canOptOut",
            "teamSubscription"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionFlags"
          }
        },
        "scope": {
          "description": "Scope that matching subscriptions must have.",
          "type": "string"
        },
        "subscriberId": {
          "description": "ID of the subscriber (user or group) that matching subscriptions must be subscribed to.",
          "type": "string",
          "format": "uuid"
        },
        "subscriptionId": {
          "description": "ID of the subscription to query for.",
          "type": "string"
        }
      }
    },
    "SubscriptionScope": {
      "description": "A resource, typically an account or project, in which events are published from.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventScope"
        }
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "SubscriptionUserSettings": {
      "description": "User-managed settings for a group subscription.",
      "type": "object",
      "properties": {
        "optedOut": {
          "description": "Indicates whether the user will receive notifications for the associated group subscription.",
          "type": "boolean"
        }
      }
    },
    "ValueDefinition": {
      "description": "Encapsulates the properties of a field value definition. It has the information needed to retrieve the list of possible values for a certain field and how to handle that field values in the UI. This information includes what type of object this value represents, which property to use for UI display and which property to use for saving the subscription",
      "type": "object",
      "properties": {
        "dataSource": {
          "description": "Gets or sets the data source.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValue"
          }
        },
        "endPoint": {
          "description": "Gets or sets the rest end point.",
          "type": "string"
        },
        "resultTemplate": {
          "description": "Gets or sets the result template.",
          "type": "string"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "description": "This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "readOnly": true,
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VssNotificationEvent": {
      "description": "This is the type used for firing notifications intended for the subsystem in the Notifications SDK. For components that can't take a dependency on the Notifications SDK directly, they can use ITeamFoundationEventService.PublishNotification and the Notifications SDK ISubscriber implementation will get it.",
      "type": "object",
      "properties": {
        "actors": {
          "description": "Optional: A list of actors which are additional identities with corresponding roles that are relevant to the event.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventActor"
          }
        },
        "artifactUris": {
          "description": "Optional: A list of artifacts referenced or impacted by this event.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "data": {
          "description": "Required: The event payload.  If Data is a string, it must be in Json or XML format.  Otherwise it must have a serialization format attribute.",
          "type": "object"
        },
        "eventType": {
          "description": "Required: The name of the event.  This event must be registered in the context it is being fired.",
          "type": "string"
        },
        "scopes": {
          "description": "Optional: A list of scopes which are are relevant to the event.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventScope"
          }
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '4.0-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.notification": "Provides read access to subscriptions and event metadata, including filterable field values.",
        "vso.notification_write": "Provides read/write access to subscriptions and read access to event metadata, including filterable field values.",
        "vso.notification_manage": "Provides read, write, and management access to subscriptions and read access to event metadata, including filterable field values."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}
