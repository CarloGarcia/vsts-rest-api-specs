{
  "swagger": "2.0",
  "info": {
    "title": "Graph",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "4.1"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "x-ms-parameterized-host": {
    "hostTemplate": "{accountName}.visualstudio.com",
    "parameters": [
      {
        "name": "accountName",
        "description": "The name of the Visual Studio Team Services account.",
        "required": true,
        "type": "string",
        "in": "path"
      }
    ]
  },
  "x-ms-vss-area": "Graph",
  "basePath": "/",
  "tags": [
    {
      "name": "descriptors"
    },
    {
      "name": "groups"
    },
    {
      "name": "memberships"
    },
    {
      "name": "membershipstates"
    },
    {
      "name": "storagekeys"
    },
    {
      "name": "subjectlookup"
    },
    {
      "name": "users"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/_apis/graph/descriptors/{storageKey}": {
      "get": {
        "tags": [
          "Descriptors"
        ],
        "x-ms-vss-resource": "descriptors",
        "x-ms-vss-method": "GetDescriptor",
        "description": "Resolve a storage key to a descriptor",
        "operationId": "Descriptors_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "storageKey",
            "description": "Storage key of the subject (user, group, scope, etc.) to resolve",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphDescriptorResult"
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/descriptors//GetDescriptorById.json"
            }
        }
      }
    },
    "/_apis/graph/groups": {
      "post": {
        "tags": [
          "Groups"
        ],
        "x-ms-vss-resource": "groups",
        "x-ms-vss-method": "CreateGroup",
        "description": "Create a new VSTS group or materialize an existing AAD group.  The body of the request must be a derived type of GraphGroupCreationContext: - GraphGroupVstsCreationContext - Create a new VSTS group that is not backed by an external provider. - GraphGroupMailAddressCreationContext - Create a new group using the mail address as a reference to an existing group from an external AD or AAD backed provider. - GraphGroupOriginIdCreationContext - Create a new group using the OriginID as a reference to a group from an external AD or AAD backed provider.  Optionally, you can add the newly created group as a member of an existing VSTS group and/or specify a custom storage key for the group.",
        "operationId": "Groups_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The subset of the full graph group used to uniquely find the graph subject in an external provider.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphGroupCreationContext"
            }
          },
          {
            "in": "query",
            "name": "scopeDescriptor",
            "description": "A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, while be created in the scope of the enclosing account or organization. Valid only for VSTS groups.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "groupDescriptors",
            "description": "A comma separated list of descriptors referencing groups you want the graph group to join",
            "required": false,
            "type": "string",
            "format": "array (SubjectDescriptor)"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphGroup"
            }
         }
        },
        "x-ms-examples": {
            "Create a Group at the account level": {
                "$ref": "./httpExamples/groups/CreateGroup.json"
            },
            "Add an AAD Group by OID": {
                "$ref": "./httpExamples/groups/MaterializeAADGroupByOID.json"
            },
            "Add an AAD Group as member of a group": {
                "$ref": "./httpExamples/groups/MaterializeAADGroupByOIDAsMember.json"
            },
            "Add an AAD Group with a custom storage key": {
                "$ref": "./httpExamples/groups/MaterializeAADGroupByOIDWithStorageKey.json"
            }
        }
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "x-ms-vss-resource": "groups",
        "x-ms-vss-method": "GetGroups",
        "description": "Gets a list of all groups in the current scope (usually organization or account). The optional parameters are used to filter down the returned results. Returned results are in no guaranteed order.  Since the list of groups may be large, results are returned in pages of groups.  If there are more results than can be returned in a single page, the result set will containt a continuation token for retrieval of the next set of results.",
        "operationId": "Groups_GetGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "scopeDescriptor",
            "description": "Specify a non-default scope (collection, project) to search for groups.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "subjectTypes",
            "description": "A comma separated list of user subject subtypes to reduce the retrieved results, e.g. Microsoft.IdentityModel.Claims.ClaimsIdentity",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "An opaque data blog that allows the next page of data to resume immediately after where the previous page ended. The only reliable way to know if there is more data left is the presence of a continuation token.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphGroup"
              }
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/groups/GetAllGroups.json"
            }
        }
      }
    },
    "/_apis/graph/groups/{groupDescriptor}": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "x-ms-vss-resource": "groups",
        "x-ms-vss-method": "DeleteGroup",
        "description": "Removes a VSTS group from all of its parent groups. The group will still be visible, but membership checks for the group, and all descendants which derive membership through it, will return false.‚Äù",
        "operationId": "Groups_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "groupDescriptor",
            "description": "The descriptor of the group to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/groups/DeleteGroup.json"
            }
        }
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "x-ms-vss-resource": "groups",
        "x-ms-vss-method": "GetGroup",
        "description": "Get a group by its descriptor.  The group will be returned even if it has been deleted from the account or has had all its memberships deleted.",
        "operationId": "Groups_GetGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupDescriptor",
            "description": "The descriptor of the desired graph group.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphGroup"
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/groups/GetGroup-AddRemoveAADGroupByOID.json"
            }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "x-ms-vss-resource": "groups",
        "x-ms-vss-method": "UpdateGroup",
        "description": "Update the properties of a VSTS group.  Currently limited to only changing the description and account name.",
        "operationId": "Groups_Update",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupDescriptor",
            "description": "The descriptor of the group to modify.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The JSON+Patch document containing the fields to alter.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatchDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphGroup"
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/groups/UpdateGroup.json"
            }
        }
      }
    },
    "/_apis/graph/memberships/{subjectDescriptor}": {
      "get": {
        "tags": [
          "Memberships"
        ],
        "x-ms-vss-resource": "membershipsbatch",
        "x-ms-vss-method": "GetMemberships",
        "description": "Get all the memberships where this descriptor is a member in the relationship. The default value for direction is 'up' meaning return all memberships where the subject is a member (e.g. all groups the subject is a member of).  Alternatively, passing the direction as 'down' will return all memberships where the subject is a container (e.g. all members of the subject group).",
        "operationId": "Memberships_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subjectDescriptor",
            "description": "Fetch all direct memberships of this descriptor.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "direction",
            "description": "Defaults to Up.",
            "required": false,
            "type": "string",
            "format": "GraphTraversalDirection"
          },
          {
            "in": "query",
            "name": "depth",
            "description": "The maximum number of edges to traverse up or down the membership tree. Currently the only supported value is '1'.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphMembership"
              }
            }
         }
        },
        "x-ms-examples": {
            "All members of a group": {
                "$ref": "./httpExamples/membershipsbatch/GetMembershipsGroupDown.json"
            },
            "All groups for a user": {
                "$ref": "./httpExamples/membershipsbatch/GetMembershipsUserUp.json"
            },
            "All groups for a group": {
                "$ref": "./httpExamples/membershipsbatch/GetMembershipsVSTSGroupUp.json"
            }
        }
      }
    },
    "/_apis/graph/memberships/{subjectDescriptor}/{containerDescriptor}": {
      "put": {
        "tags": [
          "Memberships"
        ],
        "x-ms-vss-resource": "memberships",
        "x-ms-vss-method": "AddMembership",
        "description": "Create a new membership between a container and subject",
        "operationId": "Memberships_Add",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subjectDescriptor",
            "description": "A descriptor to a group or user that can be the child subject in the relationship.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "containerDescriptor",
            "description": "A descriptor to a group that can be the container in the relationship.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphMembership"
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/memberships/CreateMembershipVSTSGroup.json"
            }
        }
      },
      "head": {
        "tags": [
          "Memberships"
        ],
        "x-ms-vss-resource": "memberships",
        "x-ms-vss-method": "CheckMembershipExistence",
        "description": "Check to see if a membership relationship between a container and subject exists",
        "operationId": "Memberships_CheckMembershipExistence",
        "parameters": [
          {
            "in": "path",
            "name": "subjectDescriptor",
            "description": "The group or user that is a child subject of the relationship.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "containerDescriptor",
            "description": "The group that is the container in the relationship.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/memberships/CheckMembershipUser.json"
            }
        }
      },
      "get": {
        "tags": [
          "Memberships"
        ],
        "x-ms-vss-resource": "memberships",
        "x-ms-vss-method": "GetMembership",
        "description": "Get a membership relationship between a container and subject",
        "operationId": "Memberships_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subjectDescriptor",
            "description": "A descriptor to the child subject in the relationship.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "containerDescriptor",
            "description": "A descriptor to the container in the relationship.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphMembership"
            }
         }
        },
        "x-ms-examples": {
            "For a User": {
                "$ref": "./httpExamples/memberships/GetMembershipUser.json"
            },
            "For a Group": {
                "$ref": "./httpExamples/memberships/GetMembershipVSTSGroup.json"
            }
        }
      },
      "delete": {
        "tags": [
          "Memberships"
        ],
        "x-ms-vss-resource": "memberships",
        "x-ms-vss-method": "RemoveMembership",
        "description": "Deletes a membership between a container and subject",
        "operationId": "Memberships_RemoveMembership",
        "parameters": [
          {
            "in": "path",
            "name": "subjectDescriptor",
            "description": "A descriptor to a group or user that is the child subject in the relationship.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "containerDescriptor",
            "description": "A descriptor to a group that is the container in the relationship.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/memberships/DeleteMembershipUser.json"
            }
        }
      }
    },
    "/_apis/graph/membershipstates/{subjectDescriptor}": {
      "get": {
        "tags": [
          "Membershipstates"
        ],
        "x-ms-vss-resource": "membershipstates",
        "x-ms-vss-method": "GetMembershipState",
        "description": "Check whether a subject is active or inactive",
        "operationId": "Membershipstates_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subjectDescriptor",
            "description": "Descriptor of the subject (user, group, scope, etc.) to check state of",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphMembershipState"
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/membershipstates/GetMembershipStateBySubjectDescriptor.json"
            }
        }
      }
    },
    "/_apis/graph/storagekeys/{subjectDescriptor}": {
      "get": {
        "tags": [
          "Storagekeys"
        ],
        "x-ms-vss-resource": "storagekeys",
        "x-ms-vss-method": "GetStorageKey",
        "description": "Resolve a descriptor to a storage key.",
        "operationId": "Storagekeys_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subjectDescriptor",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphStorageKeyResult"
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/storagekeys/GetStorageKeyBySubjectDescriptor.json"
            }
        }
      }
    },
    "/_apis/graph/subjectlookup": {
      "post": {
        "tags": [
          "Subjectlookup"
        ],
        "x-ms-vss-resource": "subjectlookup",
        "x-ms-vss-method": "LookupSubjects",
        "description": "Resolve descriptors to users, groups or scopes (Subjects) in a batch",
        "operationId": "Subjectlookup_LookupSubjects",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A list of descriptors that specifies a subset of subjects to retrieve. Each descriptor uniquely identifies the subject across all instance scopes, but only at a single point in time.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphSubjectLookup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/GraphSubject"
              }
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/subjectlookup/LookupSubjects.json"
            }
        }
      }
    },
    "/_apis/graph/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "x-ms-vss-resource": "users",
        "x-ms-vss-method": "CreateUser",
        "description": "Materialize an existing AAD or MSA user into the VSTS account.  NOTE: Created users are not active in an account unless they have been explicitly assigned a parent group at creation time or have signed in and been autolicensed through AAD group memberships.  Adding a user to an account is required before the user can be added to VSTS groups or assigned an asset.  The body of the request must be a derived type of GraphUserCreationContext: - GraphUserMailAddressCreationContext - Create a new user using the mail address as a reference to an existing user from an external AD or AAD backed provider. - GraphUserOriginIdCreationContext - Create a new user using the OriginID as a reference to an existing user from an external AD or AAD backed provider. - GraphUserPrincipalNameCreationContext - Create a new user using the principal name as a reference to an existing user from an external AD or AAD backed provider.  If the user to be added corresponds to a user that was previously deleted, then that user will be restored.  Optionally, you can add the newly created user as a member of an existing VSTS group and/or specify a custom storage key for the user.",
        "operationId": "Users_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The subset of the full graph user used to uniquely find the graph subject in an external provider.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GraphUserCreationContext"
            }
          },
          {
            "in": "query",
            "name": "groupDescriptors",
            "description": "A comma separated list of descriptors of groups you want the graph user to join",
            "required": false,
            "type": "string",
            "format": "array (SubjectDescriptor)"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphUser"
            }
         }
        },
        "x-ms-examples": {
            "Add an AAD user by UPN": {
                "$ref": "./httpExamples/users/CreateUserAAD.json"
            },
            "Add a MSA user by UPN": {
                "$ref": "./httpExamples/users/CreateUserMSA.json"
            },
            "Add an AAD user by OID": {
                "$ref": "./httpExamples/users/MaterializeAADUserByOID.json"
            },
            "Add an AAD user as member of a group": {
                "$ref": "./httpExamples/users/MaterializeAADUserByOIDAsMember.json"
            },
            "Add an AAD user with a custom storage key": {
                "$ref": "./httpExamples/users/MaterializeAADUserByOIDWithStorageKey.json"
            }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "x-ms-vss-resource": "users",
        "x-ms-vss-method": "GetUsers",
        "description": "Get a list of all users in a given scope.  Since the list of users may be large, results are returned in pages of users.  If there are more results than can be returned in a single page, the result set will containt a continuation token for retrieval of the next set of results.",
        "operationId": "Users_GetUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "subjectTypes",
            "description": "A comma separated list of user subject subtypes to reduce the retrieved results, e.g. msa‚Äô, ‚Äòaad‚Äô, ‚Äòsvc‚Äô (service identity), ‚Äòimp‚Äô (imported identity), etc.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "An opaque data blog that allows the next page of data to resume immediately after where the previous page ended. The only reliable way to know if there is more data left is the presence of a continuation token.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphUser"
              }
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/users/GetAllUsers.json"
            }
        }
      }
    },
    "/_apis/graph/users/{userDescriptor}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "x-ms-vss-resource": "users",
        "x-ms-vss-method": "DeleteUser",
        "description": "Disables a user.  Calls to GET .../users/{userDescriptor} will return the user with disabled marked true. Other GET calls, which may return multiple users, can control whether or not deleted users should be returned using the disabled flag, which defaults to false.",
        "operationId": "Users_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "userDescriptor",
            "description": "The descriptor of the user to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/users/DeleteUserAAD.json"
            }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "x-ms-vss-resource": "users",
        "x-ms-vss-method": "GetUser",
        "description": "Get a user by its descriptor.",
        "operationId": "Users_GetUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userDescriptor",
            "description": "The descriptor of the desired user.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GraphUser"
            }
         }
        },
        "x-ms-examples": {
            "": {
                "$ref": "./httpExamples/users/GetUserAAD.json"
            }
        }
      }
    }
  },
  "definitions": {
    "GraphCachePolicies": {
      "description": "",
      "type": "object",
      "properties": {
        "cacheSize": {
          "description": "Size of the cache",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GraphDescriptorResult": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph descriptor. These links may be invoked to obtain additional relationships or more detailed information about this graph descriptor.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "value": {
          "$ref": "#/definitions/SubjectDescriptor"
        }
      }
    },
    "GraphGlobalExtendedPropertyBatch": {
      "description": "",
      "type": "object",
      "properties": {
        "propertyNameFilters": {
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjectDescriptors": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubjectDescriptor"
          }
        }
      }
    },
    "GraphGroup": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphMember"
        }
      ],
      "properties": {
        "description": {
          "description": "A short phrase to help human readers disambiguate groups with similar names",
          "readOnly": true,
          "type": "string"
        },
        "isCrossProject": {
          "readOnly": true,
          "type": "boolean"
        },
        "isGlobalScope": {
          "readOnly": true,
          "type": "boolean"
        },
        "isRestrictedVisible": {
          "readOnly": true,
          "type": "boolean"
        },
        "localScopeId": {
          "readOnly": true,
          "type": "string",
          "format": "uuid"
        },
        "scopeId": {
          "readOnly": true,
          "type": "string",
          "format": "uuid"
        },
        "scopeName": {
          "readOnly": true,
          "type": "string"
        },
        "scopeType": {
          "readOnly": true,
          "type": "string"
        },
        "securingHostId": {
          "readOnly": true,
          "type": "string",
          "format": "uuid"
        },
        "specialType": {
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GraphGroupCreationContext": {
      "description": "Do not attempt to use this type to create a new group. This type does not contain sufficient fields to create a new group.",
      "type": "object",
      "properties": {
        "storageKey": {
          "description": "Optional: If provided, we will use this identifier for the storage key of the created group",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "GraphGroupMailAddressCreationContext": {
      "description": "Use this type to create a new group using the mail address as a reference to an existing group from an external AD or AAD backed provider. This is the subset of GraphGroup fields required for creation of a group for the AAD and AD use case.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphGroupCreationContext"
        }
      ],
      "properties": {
        "mailAddress": {
          "description": "This should be the mail address or the group in the source AD or AAD provider. Example: jamal@contoso.com Team Services will communicate with the source provider to fill all other fields on creation.",
          "type": "string"
        }
      }
    },
    "GraphGroupOriginIdCreationContext": {
      "description": "Use this type to create a new group using the OriginID as a reference to an existing group from an external AD or AAD backed provider. This is the subset of GraphGroup fields required for creation of a group for the AD and AAD use case.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphGroupCreationContext"
        }
      ],
      "properties": {
        "originId": {
          "description": "This should be the object id or sid of the group from the source AD or AAD provider. Example: d47d025a-ce2f-4a79-8618-e8862ade30dd Team Services will communicate with the source provider to fill all other fields on creation.",
          "type": "string"
        }
      }
    },
    "GraphGroupVstsCreationContext": {
      "description": "Use this type to create a new Vsts group that is not backed by an external provider.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphGroupCreationContext"
        }
      ],
      "properties": {
        "crossProject": {
          "description": "For internal use only in back compat scenarios.",
          "type": "boolean"
        },
        "description": {
          "description": "Used by VSTS groups; if set this will be the group description, otherwise ignored",
          "type": "string"
        },
        "descriptor": {
          "readOnly": true,
          "type": "string"
        },
        "displayName": {
          "description": "Used by VSTS groups; if set this will be the group DisplayName, otherwise ignored",
          "type": "string"
        },
        "restrictedVisibility": {
          "description": "For internal use only in back compat scenarios.",
          "type": "boolean"
        },
        "specialGroupType": {
          "description": "For internal use only in back compat scenarios.",
          "type": "string"
        }
      }
    },
    "GraphMember": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubject"
        }
      ],
      "properties": {
        "cuid": {
          "description": "The Consistently Unique Identifier of the subject",
          "readOnly": true,
          "type": "string",
          "format": "uuid"
        },
        "domain": {
          "description": "This represents the name of the container of origin for a graph member. (For MSA this is \"Windows Live ID\", for AD the name of the domain, for AAD the tenantID of the directory, for VSTS groups the ScopeId, etc)",
          "readOnly": true,
          "type": "string"
        },
        "mailAddress": {
          "description": "The email address of record for a given graph member. This may be different than the principal name.",
          "readOnly": true,
          "type": "string"
        },
        "principalName": {
          "description": "This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GraphMembership": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph membership. These links may be invoked to obtain additional relationships or more detailed information about this graph membership.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "containerDescriptor": {
          "readOnly": true,
          "type": "string"
        },
        "memberDescriptor": {
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GraphMembershipState": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph membership state. These links may be invoked to obtain additional relationships or more detailed information about this graph membership state.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "active": {
          "readOnly": true,
          "type": "boolean"
        }
      }
    },
    "GraphMembershipTraversal": {
      "description": "",
      "type": "object",
      "properties": {
        "incompletenessReason": {
          "description": "Reason why the subject could not be traversed completely",
          "type": "string"
        },
        "isComplete": {
          "description": "When true, the subject is traversed completely",
          "type": "boolean"
        },
        "subjectDescriptor": {
          "$ref": "#/definitions/SubjectDescriptor"
        },
        "traversedSubjectIds": {
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "traversedSubjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubjectDescriptor"
          }
        }
      }
    },
    "GraphScope": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubject"
        }
      ],
      "properties": {
        "administratorDescriptor": {
          "description": "The subject descriptor that references the administrators group for this scope. Only members of this group can change the contents of this scope or assign other users permissions to access this scope.",
          "readOnly": true,
          "type": "string"
        },
        "isGlobal": {
          "description": "When true, this scope is also a securing host for one or more scopes.",
          "readOnly": true,
          "type": "boolean"
        },
        "parentDescriptor": {
          "description": "The subject descriptor for the closest account or organization in the ancestor tree of this scope.",
          "readOnly": true,
          "type": "string"
        },
        "scopeType": {
          "description": "The type of this scope. Typically ServiceHost or TeamProject.",
          "readOnly": true,
          "enum": [
            "generic",
            "serviceHost",
            "teamProject"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Identity.GroupScopeType"
          }
        },
        "securingHostDescriptor": {
          "description": "The subject descriptor for the containing organization in the ancestor tree of this scope.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GraphScopeCreationContext": {
      "description": "This type is the subset of fields that can be provided by the user to create a Vsts scope. Scope creation is currently limited to internal back-compat scenarios. End users that attempt to create a scope with this API will fail.",
      "type": "object",
      "properties": {
        "adminGroupDescription": {
          "description": "Set this field to override the default description of this scope's admin group.",
          "type": "string"
        },
        "adminGroupName": {
          "description": "All scopes have an Administrator Group that controls access to the contents of the scope. Set this field to use a non-default group name for that administrators group.",
          "type": "string"
        },
        "creatorId": {
          "description": "Set this optional field if this scope is created on behalf of a user other than the user making the request. This should be the Id of the user that is not the requester.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The scope must be provided with a unique name within the parent scope. This means the created scope can have a parent or child with the same name, but no siblings with the same name.",
          "type": "string"
        },
        "scopeType": {
          "description": "The type of scope being created.",
          "enum": [
            "generic",
            "serviceHost",
            "teamProject"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Identity.GroupScopeType"
          }
        },
        "storageKey": {
          "description": "An optional ID that uniquely represents the scope within it's parent scope. If this parameter is not provided, Vsts will generate on automatically.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "GraphStorageKeyResult": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph storage key. These links may be invoked to obtain additional relationships or more detailed information about this graph storage key.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "value": {
          "readOnly": true,
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "GraphSubject": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "descriptor": {
          "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.",
          "readOnly": true,
          "type": "string"
        },
        "displayName": {
          "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.",
          "readOnly": true,
          "type": "string"
        },
        "legacyDescriptor": {
          "description": "[Internal Use Only] The legacy descriptor is here in case you need to access old version IMS using identity descriptor.",
          "readOnly": true,
          "type": "string"
        },
        "origin": {
          "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)",
          "readOnly": true,
          "type": "string"
        },
        "originId": {
          "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.",
          "readOnly": true,
          "type": "string"
        },
        "subjectKind": {
          "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).",
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "description": "This url is the full route to the source resource of this graph subject.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GraphSubjectLookup": {
      "description": "",
      "type": "object",
      "properties": {
        "lookupKeys": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphSubjectLookupKey"
          }
        }
      }
    },
    "GraphSubjectLookupKey": {
      "description": "",
      "type": "object",
      "properties": {
        "descriptor": {
          "$ref": "#/definitions/SubjectDescriptor"
        }
      }
    },
    "GraphSystemSubject": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubject"
        }
      ],
      "properties": {
      }
    },
    "GraphUser": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphMember"
        }
      ],
      "properties": {
        "basicAuthAlias": {
          "description": "The alias that is used for Basic Authentication flows (alternative authentication credentials)",
          "readOnly": true,
          "type": "string"
        },
        "metaType": {
          "description": "The meta type of the user in the origin, such as \"member\", \"guest\", etc. See  for the set of possible values.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GraphUserCreationContext": {
      "description": "Do not attempt to use this type to create a new user. Use one of the subclasses instead. This type does not contain sufficient fields to create a new user.",
      "type": "object",
      "properties": {
        "storageKey": {
          "description": "Optional: If provided, we will use this identifier for the storage key of the created user",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "GraphUserMailAddressCreationContext": {
      "description": "Use this type to create a new user using the mail address as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its mail address in the backing provider.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphUserCreationContext"
        }
      ],
      "properties": {
        "mailAddress": {
          "type": "string"
        }
      }
    },
    "GraphUserOriginIdCreationContext": {
      "description": "Use this type to create a new user using the OriginID as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its unique ID in the backing provider.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphUserCreationContext"
        }
      ],
      "properties": {
        "originId": {
          "description": "This should be the object id or sid of the user from the source AD or AAD provider. Example: d47d025a-ce2f-4a79-8618-e8862ade30dd Team Services will communicate with the source provider to fill all other fields on creation.",
          "type": "string"
        }
      }
    },
    "GraphUserPrincipalNameCreationContext": {
      "description": "Use this type to create a new user using the principal name as a reference to an existing user from an external AD or AAD backed provider. This is the subset of GraphUser fields required for creation of a GraphUser for the AD and AAD use case when looking up the user by its principal name in the backing provider.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphUserCreationContext"
        }
      ],
      "properties": {
        "principalName": {
          "description": "This should be the principal name or upn of the user in the source AD or AAD provider. Example: jamal@contoso.com Team Services will communicate with the source provider to fill all other fields on creation.",
          "type": "string"
        }
      }
    },
    "JsonPatchDocument": {
      "description": "The JSON model for JSON Patch Operations",
      "type": "object",
      "allOf": [
        {
          "type": "array",
          "items": {
          }
        }
      ],
      "properties": {
      }
    },
    "JsonPatchOperation": {
      "description": "The JSON model for a JSON Patch operation",
      "type": "object",
      "properties": {
        "from": {
          "description": "The path to copy from for the Move/Copy operation.",
          "type": "string"
        },
        "op": {
          "description": "The patch operation",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy",
            "test"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.WebApi.Patch.Operation"
          }
        },
        "path": {
          "description": "The path for the operation",
          "type": "string"
        },
        "value": {
          "description": "The value for the operation. This is either a primitive or a JToken.",
          "type": "object"
        }
      }
    },
    "PagedGraphGroups": {
      "description": "",
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "This will be non-null if there is another page of data. There will never be more than one continuation token returned by a request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "graphGroups": {
          "description": "The enumerable list of groups found within a page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphGroup"
          }
        }
      }
    },
    "PagedGraphUsers": {
      "description": "",
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "This will be non-null if there is another page of data. There will never be more than one continuation token returned by a request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "graphUsers": {
          "description": "The enumerable set of users found within a page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphUser"
          }
        }
      }
    },
    "PropertiesCollection": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of properties in the collection.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "object"
        },
        "keys": {
          "description": "The set of keys in the collection.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "description": "The set of values in the collection.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.  Example: { self: { href: \"http://localhost:8080/tfs/DefaultCollection/_apis/wit/workItems/1\" } }",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "SubjectDescriptor": {
      "description": "",
      "type": "object",
      "properties": {
      }
    },
    "VssJsonCollectionWrapper": {
      "description": "This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "readOnly": true,
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '4.1-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
     }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}