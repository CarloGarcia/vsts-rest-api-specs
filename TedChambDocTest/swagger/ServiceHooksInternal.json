{
  "swagger": "2.0",
  "info": {
    "title": "ServiceHooksInternal",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "3.2"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "basePath": "/",
  "tags": [
    {
      "name": "actions"
    },
    {
      "name": "consumers"
    },
    {
      "name": "events"
    },
    {
      "name": "inputValuesQuery"
    },
    {
      "name": "notifications"
    },
    {
      "name": "notificationsQuery"
    },
    {
      "name": "subscriptions"
    },
    {
      "name": "subscriptionsQuery"
    },
    {
      "name": "testNotifications"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/_apis/hookssvc/consumers": {
      "get": {
        "tags": [
          "consumers"
        ],
        "summary": "GetConsumers",
        "description": "",
        "operationId": "getConsumers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Consumer"
              }
            }
          }
        }
      }
    },
    "/_apis/hookssvc/consumers/{consumerId}": {
      "get": {
        "tags": [
          "consumers"
        ],
        "summary": "GetConsumer",
        "description": "",
        "operationId": "getConsumer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "consumerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Consumer"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/consumers/{consumerId}/actions": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "GetConsumerActions",
        "description": "",
        "operationId": "getConsumerActions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "consumerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConsumerAction"
              }
            }
          }
        }
      }
    },
    "/_apis/hookssvc/consumers/{consumerId}/actions/{consumerActionId}": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "GetConsumerAction",
        "description": "",
        "operationId": "getConsumerAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "consumerId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "consumerActionId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConsumerAction"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/events": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "CreateEvents",
        "description": "",
        "operationId": "createEvents",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishEventsRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/hookssvc/inputvaluesquery": {
      "post": {
        "tags": [
          "inputValuesQuery"
        ],
        "summary": "QueryInputValues",
        "description": "",
        "operationId": "queryInputValues",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionInputValuesQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInputValuesQuery"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/notificationsquery": {
      "post": {
        "tags": [
          "notificationsQuery"
        ],
        "summary": "QueryNotifications",
        "description": "",
        "operationId": "queryNotifications",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationsQuery"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptions": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "CreateSubscription",
        "description": "",
        "operationId": "createSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        }
      },
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "ListSubscriptions",
        "description": "",
        "operationId": "listSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "publisherId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "eventType",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "consumerId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "consumerActionId",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "subscriptions"
        ],
        "summary": "ReplaceSubscription",
        "description": "",
        "operationId": "replaceSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptions/{subscriptionId}": {
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "summary": "DeleteSubscription",
        "description": "",
        "operationId": "deleteSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "GetSubscription",
        "description": "",
        "operationId": "getSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptions/{subscriptionId}/notifications": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "GetNotifications",
        "description": "",
        "operationId": "getNotifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "maxResults",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "status",
            "description": "",
            "required": false,
            "type": "string",
            "format": "NotificationStatus"
          },
          {
            "in": "query",
            "name": "result",
            "description": "",
            "required": false,
            "type": "string",
            "format": "NotificationResult"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptions/{subscriptionId}/notifications/{notificationId}": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "GetNotification",
        "description": "",
        "operationId": "getNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "notificationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptionsquery": {
      "post": {
        "tags": [
          "subscriptionsQuery"
        ],
        "summary": "QuerySubscriptions",
        "description": "",
        "operationId": "querySubscriptions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionsQuery"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/testnotifications": {
      "post": {
        "tags": [
          "testNotifications"
        ],
        "summary": "CreateTestNotification",
        "description": "",
        "operationId": "createTestNotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Consumer": {
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "actions": {
          "description": "Gets this consumer's actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConsumerAction"
          }
        },
        "authenticationType": {
          "description": "Gets or sets this consumer's authentication type.",
          "enum": [
            "none",
            "oAuth",
            "external"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.AuthenticationType"
          }
        },
        "description": {
          "description": "Gets or sets this consumer's localized description.",
          "type": "string"
        },
        "externalConfiguration": {
          "description": "Non-null only if subscriptions for this consumer are configured externally.",
          "$ref": "#/definitions/ExternalConfigurationDescriptor"
        },
        "id": {
          "description": "Gets or sets this consumer's identifier.",
          "type": "string"
        },
        "imageUrl": {
          "description": "Gets or sets this consumer's image URL, if any.",
          "type": "string"
        },
        "informationUrl": {
          "description": "Gets or sets this consumer's information URL, if any.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets this consumer's input descriptors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets this consumer's localized name.",
          "type": "string"
        },
        "url": {
          "description": "The url for this resource",
          "type": "string"
        }
      }
    },
    "ConsumerAction": {
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "allowResourceVersionOverride": {
          "description": "Gets or sets the flag indicating if resource version can be overridden when creating or editing a subscription.",
          "type": "boolean"
        },
        "consumerId": {
          "description": "Gets or sets the identifier of the consumer to which this action belongs.",
          "type": "string"
        },
        "description": {
          "description": "Gets or sets this action's localized description.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets this action's identifier.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets this action's input descriptors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets this action's localized name.",
          "type": "string"
        },
        "supportedEventTypes": {
          "description": "Gets or sets this action's supported event identifiers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supportedResourceVersions": {
          "description": "Gets or sets this action's supported resource versions.",
          "type": "object",
          "additionalProperties": {
            "type": "array"
          }
        },
        "url": {
          "description": "The url for this resource",
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "createdDate": {
          "description": "Gets or sets the UTC-based date and time that this event was created.",
          "type": "string",
          "format": "date-time"
        },
        "detailedMessage": {
          "description": "Gets or sets the detailed message associated with this event.",
          "$ref": "#/definitions/FormattedEventMessage"
        },
        "eventType": {
          "description": "Gets or sets the type of this event.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the unique identifier of this event.",
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "description": "Gets or sets the (brief) message associated with this event.",
          "$ref": "#/definitions/FormattedEventMessage"
        },
        "publisherId": {
          "description": "Gets or sets the identifier of the publisher that raised this event.",
          "type": "string"
        },
        "resource": {
          "description": "Gets or sets the data associated with this event.",
          "type": "object"
        },
        "resourceContainers": {
          "description": "Gets or sets the resource containers.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ResourceContainer"
          }
        },
        "resourceVersion": {
          "description": "Gets or sets the version of the data associated with this event.",
          "type": "string"
        },
        "scope": {
          "description": "Gets or sets the scope for this event.",
          "enum": [
            "all",
            "project",
            "team",
            "collection",
            "account",
            "deployment"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.EventScope"
          }
        },
        "sessionToken": {
          "description": "Gets or sets the Session Token that can be used in further interactions",
          "$ref": "#/definitions/SessionToken"
        }
      }
    },
    "ExternalConfigurationDescriptor": {
      "type": "object",
      "properties": {
        "createSubscriptionUrl": {
          "description": "Url of the site to create this type of subscription.",
          "type": "string"
        },
        "editSubscriptionPropertyName": {
          "description": "The name of an input property that contains the URL to edit a subscription.",
          "type": "string"
        }
      }
    },
    "FormattedEventMessage": {
      "type": "object",
      "properties": {
        "html": {
          "description": "Gets or sets the html format of the message",
          "type": "string"
        },
        "markdown": {
          "description": "Gets or sets the markdown format of the message",
          "type": "string"
        },
        "text": {
          "description": "Gets or sets the raw text of the message",
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "InputDescriptor": {
      "type": "object",
      "properties": {
        "dependencyInputIds": {
          "description": "The ids of all inputs that the value of this input is dependent on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Description of what this input is used for",
          "type": "string"
        },
        "groupName": {
          "description": "The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.",
          "type": "string"
        },
        "hasDynamicValueInformation": {
          "description": "If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.",
          "type": "boolean"
        },
        "id": {
          "description": "Identifier for the subscription input",
          "type": "string"
        },
        "inputMode": {
          "description": "Mode in which the value of this input should be entered",
          "enum": [
            "none",
            "textBox",
            "passwordBox",
            "combo",
            "radioButtons",
            "checkBox",
            "textArea"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.FormInput.InputMode"
          }
        },
        "isConfidential": {
          "description": "Gets whether this input is confidential, such as for a password or application key",
          "type": "boolean"
        },
        "name": {
          "description": "Localized name which can be shown as a label for the subscription input",
          "type": "string"
        },
        "properties": {
          "description": "Custom properties for the input which can be used by the service provider",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "description": "Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.",
          "type": "string"
        },
        "useInDefaultDescription": {
          "description": "Gets whether this input is included in the default generated action description.",
          "type": "boolean"
        },
        "validation": {
          "description": "Information to use to validate this input's value",
          "$ref": "#/definitions/InputValidation"
        },
        "valueHint": {
          "description": "A hint for input value. It can be used in the UI as the input placeholder.",
          "type": "string"
        },
        "values": {
          "description": "Information about possible values for this input",
          "$ref": "#/definitions/InputValues"
        }
      }
    },
    "InputFilter": {
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Groups of input filter expressions. This filter matches a set of inputs if any (one or more) of the groups evaluates to true.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFilterCondition"
          }
        }
      }
    },
    "InputFilterCondition": {
      "type": "object",
      "properties": {
        "caseSensitive": {
          "description": "Whether or not to do a case sensitive match",
          "type": "boolean"
        },
        "inputId": {
          "description": "The Id of the input to filter on",
          "type": "string"
        },
        "inputValue": {
          "description": "The \"expected\" input value to compare with the actual input value",
          "type": "string"
        },
        "operator": {
          "description": "The operator applied between the expected and actual input value",
          "enum": [
            "equals",
            "notEquals"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.FormInput.InputFilterOperator"
          }
        }
      }
    },
    "InputValidation": {
      "type": "object",
      "properties": {
        "dataType": {
          "enum": [
            "none",
            "string",
            "number",
            "boolean",
            "guid",
            "uri"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.FormInput.InputDataType"
          }
        },
        "isRequired": {
          "type": "boolean"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32"
        },
        "maxValue": {
          "type": "string",
          "format": "decimal"
        },
        "minLength": {
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "type": "string",
          "format": "decimal"
        },
        "pattern": {
          "type": "string"
        },
        "patternMismatchErrorMessage": {
          "type": "string"
        }
      }
    },
    "InputValue": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Any other data about this input",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "displayValue": {
          "description": "The text to show for the display of this value",
          "type": "string"
        },
        "value": {
          "description": "The value to store for this input",
          "type": "string"
        }
      }
    },
    "InputValues": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value to use for this input",
          "type": "string"
        },
        "error": {
          "description": "Errors encountered while computing dynamic values.",
          "$ref": "#/definitions/InputValuesError"
        },
        "inputId": {
          "description": "The id of the input",
          "type": "string"
        },
        "isDisabled": {
          "description": "Should this input be disabled",
          "type": "boolean"
        },
        "isLimitedToPossibleValues": {
          "description": "Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)",
          "type": "boolean"
        },
        "isReadOnly": {
          "description": "Should this input be made read-only",
          "type": "boolean"
        },
        "possibleValues": {
          "description": "Possible values that this input can take",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValue"
          }
        }
      }
    },
    "InputValuesError": {
      "type": "object",
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string"
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "createdDate": {
          "description": "Gets or sets date and time that this result was created.",
          "type": "string",
          "format": "date-time"
        },
        "details": {
          "description": "Details about this notification (if available)",
          "$ref": "#/definitions/NotificationDetails"
        },
        "eventId": {
          "description": "The event id associated with this notification",
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "The notification id",
          "type": "integer",
          "format": "int32"
        },
        "modifiedDate": {
          "description": "Gets or sets date and time that this result was last modified.",
          "type": "string",
          "format": "date-time"
        },
        "result": {
          "description": "Result of the notification",
          "enum": [
            "pending",
            "succeeded",
            "failed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationResult"
          }
        },
        "status": {
          "description": "Status of the notification",
          "enum": [
            "queued",
            "processing",
            "requestInProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationStatus"
          }
        },
        "subscriberId": {
          "description": "The subscriber Id  associated with this notification. This is the last identity who touched in the subscription. In case of test notifications it can be the tester if the subscription is not created yet.",
          "type": "string",
          "format": "uuid"
        },
        "subscriptionId": {
          "description": "The subscription id associated with this notification",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "NotificationDetails": {
      "type": "object",
      "properties": {
        "completedDate": {
          "description": "Gets or sets the time that this notification was completed (response received from the consumer)",
          "type": "string",
          "format": "date-time"
        },
        "consumerActionId": {
          "description": "Gets or sets this notification detail's consumer action identifier.",
          "type": "string"
        },
        "consumerId": {
          "description": "Gets or sets this notification detail's consumer identifier.",
          "type": "string"
        },
        "consumerInputs": {
          "description": "Gets or sets this notification detail's consumer inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dequeuedDate": {
          "description": "Gets or sets the time that this notification was dequeued for processing",
          "type": "string",
          "format": "date-time"
        },
        "errorDetail": {
          "description": "Gets or sets this notification detail's error detail.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Gets or sets this notification detail's error message.",
          "type": "string"
        },
        "event": {
          "description": "Gets or sets this notification detail's event content.",
          "$ref": "#/definitions/Event"
        },
        "eventType": {
          "description": "Gets or sets this notification detail's event type.",
          "type": "string"
        },
        "processedDate": {
          "description": "Gets or sets the time that this notification was finished processing (just before the request is sent to the consumer)",
          "type": "string",
          "format": "date-time"
        },
        "publisherId": {
          "description": "Gets or sets this notification detail's publisher identifier.",
          "type": "string"
        },
        "publisherInputs": {
          "description": "Gets or sets this notification detail's publisher inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "queuedDate": {
          "description": "Gets or sets the time that this notification was queued (created)",
          "type": "string",
          "format": "date-time"
        },
        "request": {
          "description": "Gets or sets this notification detail's request.",
          "type": "string"
        },
        "requestAttempts": {
          "description": "Number of requests attempted to be sent to the consumer",
          "type": "integer",
          "format": "int32"
        },
        "requestDuration": {
          "description": "Duration of the request to the consumer in seconds",
          "type": "number",
          "format": "double"
        },
        "response": {
          "description": "Gets or sets this notification detail's reponse.",
          "type": "string"
        }
      }
    },
    "NotificationResultsSummaryDetail": {
      "type": "object",
      "properties": {
        "notificationCount": {
          "description": "Count of notification sent out with a matching result.",
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "description": "Result of the notification",
          "enum": [
            "pending",
            "succeeded",
            "failed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationResult"
          }
        }
      }
    },
    "NotificationsQuery": {
      "type": "object",
      "properties": {
        "associatedSubscriptions": {
          "description": "The subscriptions associated with the notifications returned from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "includeDetails": {
          "description": "If true, we will return all notification history for the query provided; otherwise, the summary is returned.",
          "type": "boolean"
        },
        "maxCreatedDate": {
          "description": "Optional maximum date at which the notification was created",
          "type": "string",
          "format": "date-time"
        },
        "maxResults": {
          "description": "Optional maximum number of overall results to include",
          "type": "integer",
          "format": "int32"
        },
        "maxResultsPerSubscription": {
          "description": "Optional maximum number of results for each subscription. Only takes effect when a list of subscription ids is supplied in the query.",
          "type": "integer",
          "format": "int32"
        },
        "minCreatedDate": {
          "description": "Optional minimum date at which the notification was created",
          "type": "string",
          "format": "date-time"
        },
        "publisherId": {
          "description": "Optional publisher id to restrict the results to",
          "type": "string"
        },
        "results": {
          "description": "Results from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "resultType": {
          "description": "Optional notification result type to filter results to",
          "enum": [
            "pending",
            "succeeded",
            "failed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationResult"
          }
        },
        "status": {
          "description": "Optional notification status to filter results to",
          "enum": [
            "queued",
            "processing",
            "requestInProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationStatus"
          }
        },
        "subscriptionIds": {
          "description": "Optional list of subscription ids to restrict the results to",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "summary": {
          "description": "Summary of notifications - the count of each result type (success, fail, ..).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationSummary"
          }
        }
      }
    },
    "NotificationSummary": {
      "type": "object",
      "properties": {
        "results": {
          "description": "The notification results for this particular subscription.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationResultsSummaryDetail"
          }
        },
        "subscriptionId": {
          "description": "The subscription id associated with this notification",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "PublisherEvent": {
      "type": "object",
      "properties": {
        "diagnostics": {
          "description": "Add key/value pairs which will be stored with a published notification in the SH service DB.  This key/value pairs are for diagnostic purposes only and will have not effect on the delivery of a notificaton.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "event": {
          "description": "The event being published",
          "$ref": "#/definitions/Event"
        },
        "notificationId": {
          "description": "Gets or sets the id of the notification.",
          "type": "integer",
          "format": "int32"
        },
        "otherResourceVersions": {
          "description": "Gets or sets the array of older supported resource versions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionedResource"
          }
        },
        "publisherInputFilters": {
          "description": "Optional publisher-input filters which restricts the set of subscriptions which are triggered by the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFilter"
          }
        }
      }
    },
    "PublishEventsRequestData": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublisherEvent"
          }
        }
      }
    },
    "ReferenceLinks": {
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResourceContainer": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "description": "Gets or sets the container's base URL, i.e. the URL of the host (collection, application, or deploument) containing the container resource.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the container's specific Id.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Gets or sets the container's name.",
          "type": "string"
        },
        "url": {
          "description": "Gets or sets the container's REST API URL.",
          "type": "string"
        }
      }
    },
    "SessionToken": {
      "type": "object",
      "properties": {
        "error": {
          "description": "The error message in case of error",
          "type": "string"
        },
        "token": {
          "description": "The access token",
          "type": "string"
        },
        "validTo": {
          "description": "The expiration date in UTC",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "actionDescription": {
          "type": "string"
        },
        "consumerActionId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "consumerInputs": {
          "description": "Consumer input values",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "eventDescription": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "modifiedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "probationRetries": {
          "type": "string",
          "format": "byte"
        },
        "publisherId": {
          "type": "string"
        },
        "publisherInputs": {
          "description": "Publisher input values",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceVersion": {
          "type": "string"
        },
        "scope": {
          "enum": [
            "all",
            "project",
            "team",
            "collection",
            "account",
            "deployment"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.EventScope"
          }
        },
        "status": {
          "enum": [
            "enabled",
            "onProbation",
            "disabledByUser",
            "disabledBySystem"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.SubscriptionStatus"
          }
        },
        "subscriber": {
          "$ref": "#/definitions/IdentityRef"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "SubscriptionInputValuesQuery": {
      "type": "object",
      "properties": {
        "inputValues": {
          "description": "The input values to return on input, and the result from the consumer on output.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValues"
          }
        },
        "scope": {
          "description": "The scope at which the properties to query belong",
          "enum": [
            "publisher",
            "consumer"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.SubscriptionInputScope"
          }
        },
        "subscription": {
          "description": "Subscription containing information about the publisher/consumer and the current input values",
          "$ref": "#/definitions/Subscription"
        }
      }
    },
    "SubscriptionsQuery": {
      "type": "object",
      "properties": {
        "consumerActionId": {
          "description": "Optional consumer action id to restrict the results to (null for any)",
          "type": "string"
        },
        "consumerId": {
          "description": "Optional consumer id to restrict the results to (null for any)",
          "type": "string"
        },
        "consumerInputFilters": {
          "description": "Filter for subscription consumer inputs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFilter"
          }
        },
        "eventType": {
          "description": "Optional event type id to restrict the results to (null for any)",
          "type": "string"
        },
        "publisherId": {
          "description": "Optional publisher id to restrict the results to (null for any)",
          "type": "string"
        },
        "publisherInputFilters": {
          "description": "Filter for subscription publisher inputs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFilter"
          }
        },
        "results": {
          "description": "Results from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "scope": {
          "description": "Optional scope - default scope is 'project'",
          "enum": [
            "all",
            "project",
            "team",
            "collection",
            "account",
            "deployment"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.EventScope"
          }
        },
        "subscriberId": {
          "description": "Optional subscriber filter.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "VersionedResource": {
      "type": "object",
      "properties": {
        "compatibleWith": {
          "description": "Gets or sets the reference to the compatible version.",
          "type": "string"
        },
        "resource": {
          "description": "Gets or sets the resource data.",
          "type": "object"
        },
        "resourceVersion": {
          "description": "Gets or sets the version of the resource data.",
          "type": "string"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '3.2-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
     }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}