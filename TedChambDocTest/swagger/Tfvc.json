{
    "$schema":Â "http://swagger.io/v2/schema.json#",
    "swagger": "2.0",
    "info": {
        "title": "Tfvc",
        "description": "",
        "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
        "contact": {
            "name": "nugetvss",
            "email": "nugetvss@microsoft.com"
        },
        "license": {
            "name": "MICROSOFT SOFTWARE LICENSE TERMS",
            "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
        },
        "version": "3.1"
    },
    "host": "fabrikam-fiber-inc.visualstudio.com",
    "basePath": "/",
    "tags": [
        {
            "name": "branches"
        },
        {
            "name": "changesetChanges"
        },
        {
            "name": "changesets"
        },
        {
            "name": "changesetsBatch"
        },
        {
            "name": "changesetWorkItems"
        },
        {
            "name": "itemBatch"
        },
        {
            "name": "items"
        },
        {
            "name": "labelItems"
        },
        {
            "name": "labels"
        },
        {
            "name": "shelvesetChanges"
        },
        {
            "name": "shelvesets"
        },
        {
            "name": "shelvesetWorkItems"
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "paths": {
        "_apis/tfvc/changesets/{id}/changes": {
            "get": {
                "tags": [
                    "changesetChanges"
                ],
                "summary": "GetChangesetChanges",
                "description": "Retrieve Tfvc changes for a given changeset",
                "operationId": "getChangesetChanges",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "top",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TfvcChange"
                            }
                        }
                    }
                }
            }
        },
        "_apis/tfvc/changesets/{id}/workItems": {
            "get": {
                "tags": [
                    "changesetWorkItems"
                ],
                "summary": "GetChangesetWorkItems",
                "description": "",
                "operationId": "getChangesetWorkItems",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssociatedWorkItem"
                            }
                        }
                    }
                }
            }
        },
        "_apis/tfvc/changesetsbatch": {
            "post": {
                "tags": [
                    "changesetsBatch"
                ],
                "summary": "GetBatchedChangesets",
                "description": "",
                "operationId": "getBatchedChangesets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TfvcChangesetsRequestData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TfvcChangesetRef"
                            }
                        }
                    }
                }
            }
        },
        "_apis/tfvc/labels/{labelId}/items": {
            "get": {
                "tags": [
                    "labelItems"
                ],
                "summary": "GetLabelItems",
                "description": "Get items under a label.",
                "operationId": "getLabelItems",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "labelId",
                        "description": "Unique identifier of label",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "top",
                        "description": "Max number of items to return",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "description": "Number of items to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TfvcItem"
                            }
                        }
                    }
                }
            }
        },
        "_apis/tfvc/shelvesets": {
            "get": {
                "tags": [
                    "shelvesets"
                ],
                "summary": "GetShelveset",
                "description": "Get a single deep shelveset.",
                "operationId": "getShelveset",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "shelvesetId",
                        "description": "Shelveset's unique ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "requestData",
                        "description": "includeDetails, includeWorkItems, maxChangeCount, and maxCommentLength",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TfvcShelvesetRequestData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TfvcShelveset"
                        }
                    }
                }
            }
        },
        "_apis/tfvc/shelvesets/changes": {
            "get": {
                "tags": [
                    "shelvesetChanges"
                ],
                "summary": "GetShelvesetChanges",
                "description": "Get changes included in a shelveset.",
                "operationId": "getShelvesetChanges",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "shelvesetId",
                        "description": "Shelveset's unique ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "top",
                        "description": "Max number of changes to return",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "description": "Number of changes to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TfvcChange"
                            }
                        }
                    }
                }
            }
        },
        "_apis/tfvc/shelvesets/workitems": {
            "get": {
                "tags": [
                    "shelvesetWorkItems"
                ],
                "summary": "GetShelvesetWorkItems",
                "description": "Get work items associated with a shelveset.",
                "operationId": "getShelvesetWorkItems",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "shelvesetId",
                        "description": "Shelveset's unique ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AssociatedWorkItem"
                            }
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/branches": {
            "get": {
                "tags": [
                    "branches"
                ],
                "summary": "GetBranches",
                "description": "Get a collection of branch roots -- first-level children, branches with no parents",
                "operationId": "getBranches",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "includeParent",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeChildren",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeDeleted",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeLinks",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TfvcBranch"
                            }
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/branches/{path}": {
            "get": {
                "tags": [
                    "branches"
                ],
                "summary": "GetBranch",
                "description": "Get a single branch hierarchy at the given path with parents or children (if specified)",
                "operationId": "getBranch",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "includeParent",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeChildren",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TfvcBranch"
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/changesets": {
            "post": {
                "tags": [
                    "changesets"
                ],
                "summary": "CreateChangeset",
                "description": "",
                "operationId": "createChangeset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TfvcChangeset"
                        }
                    },
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TfvcChangesetRef"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "changesets"
                ],
                "summary": "GetChangesets",
                "description": "Retrieve Tfvc changesets",
                "operationId": "getChangesets",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "maxCommentLength",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "top",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "orderby",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "searchCriteria",
                        "description": "",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TfvcChangesetSearchCriteria"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TfvcChangesetRef"
                            }
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/changesets/{id}": {
            "get": {
                "tags": [
                    "changesets"
                ],
                "summary": "GetChangeset",
                "description": "Retrieve a Tfvc Changeset",
                "operationId": "getChangeset",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "maxChangeCount",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "includeDetails",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeWorkItems",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "maxCommentLength",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "includeSourceRename",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "top",
                        "description": "",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "orderby",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "searchCriteria",
                        "description": "",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TfvcChangesetSearchCriteria"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TfvcChangeset"
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/itembatch": {
            "post": {
                "tags": [
                    "itemBatch"
                ],
                "summary": "GetItemsBatch",
                "description": "Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.",
                "operationId": "getItemsBatch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/zip",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TfvcItemRequestData"
                        }
                    },
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array"
                            }
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/items": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "GetItems",
                "description": "Get a list of Tfvc items",
                "operationId": "getItems",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "scopePath",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "recursionLevel",
                        "description": "",
                        "required": false,
                        "type": "VersionControlRecursionType"
                    },
                    {
                        "in": "query",
                        "name": "includeLinks",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "versionDescriptor",
                        "description": "",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TfvcVersionDescriptor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TfvcItem"
                            }
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/items/{path}": {
            "get": {
                "tags": [
                    "items"
                ],
                "summary": "GetItem",
                "description": "Get Item Metadata and/or Content. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.",
                "operationId": "getItem",
                "produces": [
                    "application/octet-stream",
                    "text/plain",
                    "application/zip",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileName",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "download",
                        "description": "",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "scopePath",
                        "description": "",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "recursionLevel",
                        "description": "",
                        "required": false,
                        "type": "VersionControlRecursionType"
                    },
                    {
                        "in": "query",
                        "name": "versionDescriptor",
                        "description": "",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TfvcVersionDescriptor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TfvcItem"
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/labels": {
            "get": {
                "tags": [
                    "labels"
                ],
                "summary": "GetLabels",
                "description": "Get a collection of shallow label references.",
                "operationId": "getLabels",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "requestData",
                        "description": "labelScope, name, owner, and itemLabelFilter",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TfvcLabelRequestData"
                        }
                    },
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "top",
                        "description": "Max number of labels to return",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "description": "Number of labels to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TfvcLabelRef"
                            }
                        }
                    }
                }
            }
        },
        "{project}/_apis/tfvc/labels/{labelId}": {
            "get": {
                "tags": [
                    "labels"
                ],
                "summary": "GetLabel",
                "description": "Get a single deep label.",
                "operationId": "getLabel",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "labelId",
                        "description": "Unique identifier of label",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "requestData",
                        "description": "maxItemCount",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TfvcLabelRequestData"
                        }
                    },
                    {
                        "in": "path",
                        "name": "project",
                        "description": "Project ID or project name",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TfvcLabel"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AssociatedWorkItem": {
            "type": "object",
            "properties": {
                "assignedTo": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "state": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "description": "REST url",
                    "type": "string"
                },
                "webUrl": {
                    "type": "string"
                },
                "workItemType": {
                    "type": "string"
                }
            }
        },
        "AsyncGitOperationNotification": {
            "type": "object",
            "properties": {
                "operationId": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "AsyncRefOperationCommitLevelEventNotification": {
            "type": "AsyncGitOperationNotification",
            "properties": {
                "commitId": {
                    "type": "string"
                }
            }
        },
        "AsyncRefOperationCompletedNotification": {
            "type": "AsyncGitOperationNotification",
            "properties": {
                "newRefName": {
                    "type": "string"
                }
            }
        },
        "AsyncRefOperationConflictNotification": {
            "type": "AsyncRefOperationCommitLevelEventNotification",
            "properties": {
            }
        },
        "AsyncRefOperationGeneralFailureNotification": {
            "type": "AsyncGitOperationNotification",
            "properties": {
            }
        },
        "AsyncRefOperationProgressNotification": {
            "type": "AsyncRefOperationCommitLevelEventNotification",
            "properties": {
                "progress": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "Attachment": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "author": {
                    "description": "The person that uploaded this attachment",
                    "type": "IdentityRef"
                },
                "contentHash": {
                    "description": "Content hash of on-disk representation of file content. Its calculated by the server by using SHA1 hash function.",
                    "type": "string"
                },
                "createdDate": {
                    "description": "The time the attachment was uploaded",
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "description": "The description of the attachment, can be null.",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display name of the attachment, can't be null or empty.",
                    "type": "string"
                },
                "id": {
                    "description": "Id of the code review attachment",
                    "type": "integer",
                    "format": "int32"
                },
                "properties": {
                    "type": "PropertiesCollection"
                },
                "url": {
                    "description": "The url to download the content of the attachment",
                    "type": "string"
                }
            }
        },
        "Change<T>": {
            "type": "object",
            "properties": {
                "changeType": {
                    "type": "VersionControlChangeType",
                    "enum": [
                        "none",
                        "add",
                        "edit",
                        "encoding",
                        "rename",
                        "delete",
                        "undelete",
                        "branch",
                        "merge",
                        "lock",
                        "rollback",
                        "sourceRename",
                        "targetRename",
                        "property",
                        "all"
                    ]
                },
                "item": {
                    "type": "T"
                },
                "newContent": {
                    "$ref": "#/definitions/ItemContent"
                },
                "sourceServerItem": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "ChangeCountDictionary": {
            "type": "object",
            "properties": {
            }
        },
        "ChangeList<T>": {
            "type": "object",
            "properties": {
                "allChangesIncluded": {
                    "type": "boolean"
                },
                "changeCounts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "int32"
                    }
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "Generic"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "commentTruncated": {
                    "type": "boolean"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "notes": {
                    "type": "array",
                    "items": {
                        "type": "CheckinNote"
                    }
                },
                "owner": {
                    "type": "string"
                },
                "ownerDisplayName": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "Guid"
                },
                "sortDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "ChangeListSearchCriteria": {
            "type": "object",
            "properties": {
                "compareVersion": {
                    "description": "If provided, a version descriptor to compare against base",
                    "type": "string"
                },
                "excludeDeletes": {
                    "description": "If true, don't include delete history entries",
                    "type": "boolean"
                },
                "followRenames": {
                    "description": "Whether or not to follow renames for the given item being queried",
                    "type": "boolean"
                },
                "fromDate": {
                    "description": "If provided, only include history entries created after this date (string)",
                    "type": "string"
                },
                "fromVersion": {
                    "description": "If provided, a version descriptor for the earliest change list to include",
                    "type": "string"
                },
                "itemPath": {
                    "description": "Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.",
                    "type": "string"
                },
                "itemPaths": {
                    "description": "List of item paths to search under. If this member is used then itemPath will be ignored.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "itemVersion": {
                    "description": "Version of the items to search",
                    "type": "string"
                },
                "skip": {
                    "description": "Number of results to skip (used when clicking more...)",
                    "type": "integer",
                    "format": "int32"
                },
                "toDate": {
                    "description": "If provided, only include history entries created before this date (string)",
                    "type": "string"
                },
                "top": {
                    "description": "If provided, the maximum number of history entries to return",
                    "type": "integer",
                    "format": "int32"
                },
                "toVersion": {
                    "description": "If provided, a version descriptor for the latest change list to include",
                    "type": "string"
                },
                "user": {
                    "description": "Alias or display name of user who made the changes",
                    "type": "string"
                }
            }
        },
        "CheckinNote": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Comment": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "author": {
                    "description": "The author of the pull request comment.",
                    "type": "IdentityRef"
                },
                "commentType": {
                    "description": "Determines what kind of comment when it was created.",
                    "type": "CommentType",
                    "enum": [
                        "unknown",
                        "text",
                        "codeChange",
                        "system"
                    ]
                },
                "content": {
                    "description": "The comment's content.",
                    "type": "string"
                },
                "id": {
                    "description": "The pull request comment id. It always starts from 1.",
                    "type": "integer",
                    "format": "int16"
                },
                "isDeleted": {
                    "description": "Marks if this comment was soft-deleted.",
                    "type": "boolean"
                },
                "lastUpdatedDate": {
                    "description": "The date a comment was last updated.",
                    "type": "string",
                    "format": "date-time"
                },
                "parentCommentId": {
                    "description": "The pull request comment id of the parent comment. This is used for replies",
                    "type": "integer",
                    "format": "int16"
                },
                "publishedDate": {
                    "description": "The date a comment was first published.",
                    "type": "string",
                    "format": "date-time"
                },
                "usersLiked": {
                    "description": "A list of the users who've liked this comment.",
                    "type": "array",
                    "items": {
                        "type": "IdentityRef"
                    }
                }
            }
        },
        "CommentIterationContext": {
            "type": "object",
            "properties": {
                "firstComparingIteration": {
                    "description": "First comparing iteration Id. Minimum value is 1.",
                    "type": "integer",
                    "format": "int16"
                },
                "secondComparingIteration": {
                    "description": "Second comparing iteration Id. Minimum value is 1.",
                    "type": "integer",
                    "format": "int16"
                }
            }
        },
        "CommentPosition": {
            "type": "object",
            "properties": {
                "line": {
                    "description": "Position line starting with one.",
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "description": "Position offset starting with zero.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "CommentThread": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "comments": {
                    "description": "A list of the comments.",
                    "type": "array",
                    "items": {
                        "type": "Comment"
                    }
                },
                "id": {
                    "description": "The comment thread id.",
                    "type": "integer",
                    "format": "int32"
                },
                "isDeleted": {
                    "description": "Specify if the thread is deleted which happens when all comments are deleted",
                    "type": "boolean"
                },
                "lastUpdatedDate": {
                    "description": "The time this thread was last updated.",
                    "type": "string",
                    "format": "date-time"
                },
                "properties": {
                    "description": "A list of (optional) thread properties.",
                    "type": "PropertiesCollection"
                },
                "publishedDate": {
                    "description": "The time this thread was published.",
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "description": "The status of the comment thread.",
                    "type": "CommentThreadStatus",
                    "enum": [
                        "unknown",
                        "active",
                        "fixed",
                        "wontFix",
                        "closed",
                        "byDesign",
                        "pending"
                    ]
                },
                "threadContext": {
                    "description": "Specify thread context such as position in left/right file.",
                    "$ref": "#/definitions/CommentThreadContext"
                }
            }
        },
        "CommentThreadContext": {
            "type": "object",
            "properties": {
                "filePath": {
                    "description": "File path relative to the root of the repository. It's up to the client to use any path format.",
                    "type": "string"
                },
                "leftFileEnd": {
                    "description": "Position of last character of the comment in left file.",
                    "$ref": "#/definitions/CommentPosition"
                },
                "leftFileStart": {
                    "description": "Position of first character of the comment in left file.",
                    "$ref": "#/definitions/CommentPosition"
                },
                "rightFileEnd": {
                    "description": "Position of last character of the comment in right file.",
                    "$ref": "#/definitions/CommentPosition"
                },
                "rightFileStart": {
                    "description": "Position of first character of the comment in right file.",
                    "$ref": "#/definitions/CommentPosition"
                }
            }
        },
        "CommentTrackingCriteria": {
            "type": "object",
            "properties": {
                "firstComparingIteration": {
                    "description": "The first comparing iteration being viewed. Threads will be tracked if this is greater than 0.",
                    "type": "integer",
                    "format": "int32"
                },
                "secondComparingIteration": {
                    "description": "The second comparing iteration being viewed. Threads will be tracked if this is greater than 0.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "FileContentMetadata": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "encoding": {
                    "type": "integer",
                    "format": "int32"
                },
                "extension": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "isBinary": {
                    "type": "boolean"
                },
                "isImage": {
                    "type": "boolean"
                },
                "vsLink": {
                    "type": "string"
                }
            }
        },
        "GitAsyncRefOperation": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "detailedStatus": {
                    "$ref": "#/definitions/GitAsyncRefOperationDetail"
                },
                "parameters": {
                    "$ref": "#/definitions/GitAsyncRefOperationParameters"
                },
                "status": {
                    "type": "GitAsyncOperationStatus",
                    "enum": [
                        "queued",
                        "inProgress",
                        "completed",
                        "failed",
                        "abandoned"
                    ]
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitAsyncRefOperationDetail": {
            "type": "object",
            "properties": {
                "conflict": {
                    "type": "boolean"
                },
                "currentCommitId": {
                    "type": "string"
                },
                "progress": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "GitAsyncRefOperationParameters": {
            "type": "object",
            "properties": {
                "generatedRefName": {
                    "type": "string"
                },
                "ontoRefName": {
                    "type": "string"
                },
                "repository": {
                    "$ref": "#/definitions/GitRepository"
                },
                "source": {
                    "$ref": "#/definitions/GitAsyncRefOperationSource"
                }
            }
        },
        "GitAsyncRefOperationSource": {
            "type": "object",
            "properties": {
                "commitList": {
                    "type": "array",
                    "items": {
                        "type": "GitCommitRef"
                    }
                },
                "pullRequestId": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "GitBaseVersionDescriptor": {
            "type": "GitVersionDescriptor",
            "properties": {
                "baseVersion": {
                    "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
                    "type": "string"
                },
                "baseVersionOptions": {
                    "description": "Version options - Specify additional modifiers to version (e.g Previous)",
                    "type": "GitVersionOptions",
                    "enum": [
                        "none",
                        "previousChange",
                        "firstParent"
                    ]
                },
                "baseVersionType": {
                    "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
                    "type": "GitVersionType",
                    "enum": [
                        "branch",
                        "tag",
                        "commit",
                        "index"
                    ]
                }
            }
        },
        "GitBlobRef": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "objectId": {
                    "description": "SHA1 hash of git object",
                    "type": "string"
                },
                "size": {
                    "description": "Size of blob content (in bytes)",
                    "type": "integer",
                    "format": "int64"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitBranchStats": {
            "type": "object",
            "properties": {
                "aheadCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "behindCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "commit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "isBaseVersion": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GitChange": {
            "type": "Generic",
            "properties": {
                "changeId": {
                    "description": "Id of the change within the group.  For example, within the iteration",
                    "type": "integer",
                    "format": "int32"
                },
                "newContentTemplate": {
                    "description": "New Content template to be used",
                    "$ref": "#/definitions/GitTemplate"
                },
                "originalPath": {
                    "description": "Original path of item if different from current path",
                    "type": "string"
                }
            }
        },
        "GitCherryPick": {
            "type": "GitAsyncRefOperation",
            "properties": {
                "cherryPickId": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "GitCommit": {
            "type": "GitCommitRef",
            "properties": {
                "push": {
                    "$ref": "#/definitions/GitPushRef"
                },
                "treeId": {
                    "type": "string"
                }
            }
        },
        "GitCommitChanges": {
            "type": "object",
            "properties": {
                "changeCounts": {
                    "$ref": "#/definitions/ChangeCountDictionary"
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "GitChange"
                    }
                }
            }
        },
        "GitCommitDiffs": {
            "type": "object",
            "properties": {
                "aheadCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "allChangesIncluded": {
                    "type": "boolean"
                },
                "baseCommit": {
                    "type": "string"
                },
                "behindCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "changeCounts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "int32"
                    }
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "GitChange"
                    }
                },
                "commonCommit": {
                    "type": "string"
                },
                "targetCommit": {
                    "type": "string"
                }
            }
        },
        "GitCommitRef": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "author": {
                    "$ref": "#/definitions/GitUserDate"
                },
                "changeCounts": {
                    "$ref": "#/definitions/ChangeCountDictionary"
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "GitChange"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "commentTruncated": {
                    "type": "boolean"
                },
                "commitId": {
                    "type": "string"
                },
                "committer": {
                    "$ref": "#/definitions/GitUserDate"
                },
                "parents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remoteUrl": {
                    "type": "string"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "GitStatus"
                    }
                },
                "url": {
                    "type": "string"
                },
                "workItems": {
                    "type": "array",
                    "items": {
                        "type": "ResourceRef"
                    }
                }
            }
        },
        "GitCommitToCreate": {
            "type": "object",
            "properties": {
                "baseRef": {
                    "$ref": "#/definitions/GitRef"
                },
                "comment": {
                    "type": "string"
                },
                "pathActions": {
                    "type": "array",
                    "items": {
                        "type": "GitPathAction"
                    }
                }
            }
        },
        "GitConflict": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "conflictId": {
                    "type": "integer",
                    "format": "int32"
                },
                "conflictPath": {
                    "type": "string"
                },
                "conflictType": {
                    "type": "GitConflictType",
                    "enum": [
                        "none",
                        "addAdd",
                        "addRename",
                        "deleteEdit",
                        "deleteRename",
                        "directoryFile",
                        "directoryChild",
                        "editDelete",
                        "editEdit",
                        "fileDirectory",
                        "rename1to2",
                        "rename2to1",
                        "renameAdd",
                        "renameDelete",
                        "renameRename"
                    ]
                },
                "mergeBaseCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "mergeOrigin": {
                    "$ref": "#/definitions/GitMergeOriginRef"
                },
                "mergeSourceCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "mergeTargetCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "resolutionError": {
                    "type": "GitResolutionError",
                    "enum": [
                        "none",
                        "mergeContentNotFound",
                        "pathInUse",
                        "invalidPath",
                        "unknownAction",
                        "unknownMergeType",
                        "otherError"
                    ]
                },
                "resolutionStatus": {
                    "type": "GitResolutionStatus",
                    "enum": [
                        "unresolved",
                        "partiallyResolved",
                        "resolved"
                    ]
                },
                "resolvedBy": {
                    "type": "IdentityRef"
                },
                "resolvedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitConflictAddAdd": {
            "type": "GitConflict",
            "properties": {
                "resolution": {
                    "$ref": "#/definitions/GitResolutionMergeContent"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                }
            }
        },
        "GitConflictAddRename": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPathConflict"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetOriginalPath": {
                    "type": "string"
                }
            }
        },
        "GitConflictDeleteEdit": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPickOneAction"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                }
            }
        },
        "GitConflictDeleteRename": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPickOneAction"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetNewPath": {
                    "type": "string"
                }
            }
        },
        "GitConflictDirectoryFile": {
            "type": "GitConflict",
            "properties": {
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPathConflict"
                },
                "sourceTree": {
                    "$ref": "#/definitions/GitTreeRef"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                }
            }
        },
        "GitConflictEditDelete": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPickOneAction"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                }
            }
        },
        "GitConflictEditEdit": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionMergeContent"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                }
            }
        },
        "GitConflictFileDirectory": {
            "type": "GitConflict",
            "properties": {
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPathConflict"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetTree": {
                    "$ref": "#/definitions/GitTreeRef"
                }
            }
        },
        "GitConflictRename1to2": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionRename1to2"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "sourceNewPath": {
                    "type": "string"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetNewPath": {
                    "type": "string"
                }
            }
        },
        "GitConflictRename2to1": {
            "type": "GitConflict",
            "properties": {
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPathConflict"
                },
                "sourceNewBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "sourceOriginalBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "sourceOriginalPath": {
                    "type": "string"
                },
                "targetNewBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetOriginalBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetOriginalPath": {
                    "type": "string"
                }
            }
        },
        "GitConflictRenameAdd": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPathConflict"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "sourceOriginalPath": {
                    "type": "string"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                }
            }
        },
        "GitConflictRenameDelete": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionPickOneAction"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "sourceNewPath": {
                    "type": "string"
                }
            }
        },
        "GitConflictRenameRename": {
            "type": "GitConflict",
            "properties": {
                "baseBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "originalPath": {
                    "type": "string"
                },
                "resolution": {
                    "$ref": "#/definitions/GitResolutionMergeContent"
                },
                "sourceBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "targetBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                }
            }
        },
        "GitDeletedRepository": {
            "type": "object",
            "properties": {
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "deletedBy": {
                    "type": "IdentityRef"
                },
                "deletedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "Guid"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "type": "TeamProjectReference"
                }
            }
        },
        "GitFilePathsCollection": {
            "type": "object",
            "properties": {
                "commitId": {
                    "type": "string"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitHistoryQueryResults": {
            "type": "Generic",
            "properties": {
                "startingCommitId": {
                    "description": "Seed commit used for querying history.  Used for skip feature.",
                    "type": "string"
                },
                "unpopulatedCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "unprocessedCount": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "GitImportFailedEvent": {
            "type": "object",
            "properties": {
                "sourceRepositoryName": {
                    "type": "string"
                },
                "targetRepository": {
                    "$ref": "#/definitions/GitRepository"
                }
            }
        },
        "GitImportGitSource": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "Url for the source repo",
                    "type": "string"
                }
            }
        },
        "GitImportRequest": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "detailedStatus": {
                    "$ref": "#/definitions/GitImportStatusDetail"
                },
                "importRequestId": {
                    "type": "integer",
                    "format": "int32"
                },
                "parameters": {
                    "description": "Parameters for creating an import request",
                    "$ref": "#/definitions/GitImportRequestParameters"
                },
                "repository": {
                    "$ref": "#/definitions/GitRepository"
                },
                "status": {
                    "type": "GitAsyncOperationStatus",
                    "enum": [
                        "queued",
                        "inProgress",
                        "completed",
                        "failed",
                        "abandoned"
                    ]
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitImportRequestParameters": {
            "type": "object",
            "properties": {
                "deleteServiceEndpointAfterImportIsDone": {
                    "description": "Option to delete service endpoint when import is done",
                    "type": "boolean"
                },
                "gitSource": {
                    "description": "Source for importing git repository",
                    "$ref": "#/definitions/GitImportGitSource"
                },
                "serviceEndpointId": {
                    "description": "Service Endpoint for connection to external endpoint",
                    "type": "Guid"
                }
            }
        },
        "GitImportStatusDetail": {
            "type": "object",
            "properties": {
                "allSteps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "currentStep": {
                    "type": "integer",
                    "format": "int32"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        },
        "GitImportSucceededEvent": {
            "type": "object",
            "properties": {
                "sourceRepositoryName": {
                    "type": "string"
                },
                "targetRepository": {
                    "$ref": "#/definitions/GitRepository"
                }
            }
        },
        "GitItem": {
            "type": "ItemModel",
            "properties": {
                "commitId": {
                    "description": "SHA1 of commit item was fetched at",
                    "type": "string"
                },
                "gitObjectType": {
                    "description": "Type of object (Commit, Tree, Blob, Tag, ...)",
                    "type": "GitObjectType",
                    "enum": [
                        "bad",
                        "commit",
                        "tree",
                        "blob",
                        "tag",
                        "ext2",
                        "ofsDelta",
                        "refDelta"
                    ]
                },
                "latestProcessedChange": {
                    "description": "Shallow ref to commit that last changed this item Only populated if latestProcessedChange is requested May not be accurate if latest change is not yet cached",
                    "$ref": "#/definitions/GitCommitRef"
                },
                "objectId": {
                    "description": "Git object id",
                    "type": "string"
                },
                "originalObjectId": {
                    "description": "Git object id",
                    "type": "string"
                }
            }
        },
        "GitItemDescriptor": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "Path to item",
                    "type": "string"
                },
                "recursionLevel": {
                    "description": "Specifies whether to include children (OneLevel), all descendants (Full), or None",
                    "type": "VersionControlRecursionType",
                    "enum": [
                        "none",
                        "oneLevel",
                        "oneLevelPlusNestedEmptyFolders",
                        "full"
                    ]
                },
                "version": {
                    "description": "Version string (interpretation based on VersionType defined in subclass",
                    "type": "string"
                },
                "versionOptions": {
                    "description": "Version modifiers (e.g. previous)",
                    "type": "GitVersionOptions",
                    "enum": [
                        "none",
                        "previousChange",
                        "firstParent"
                    ]
                },
                "versionType": {
                    "description": "How to interpret version (branch,tag,commit)",
                    "type": "GitVersionType",
                    "enum": [
                        "branch",
                        "tag",
                        "commit",
                        "index"
                    ]
                }
            }
        },
        "GitItemRequestData": {
            "type": "object",
            "properties": {
                "includeContentMetadata": {
                    "description": "Whether to include metadata for all items",
                    "type": "boolean"
                },
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references",
                    "type": "boolean"
                },
                "itemDescriptors": {
                    "description": "Collection of items to fetch, including path, version, and recursion level",
                    "type": "array",
                    "items": {
                        "type": "GitItemDescriptor"
                    }
                },
                "latestProcessedChange": {
                    "description": "Whether to include shallow ref to commit that last changed each item",
                    "type": "boolean"
                }
            }
        },
        "GitLastChangeItem": {
            "type": "object",
            "properties": {
                "commitId": {
                    "description": "Gets or sets the commit Id this item was modified most recently for the provided version.",
                    "type": "string"
                },
                "path": {
                    "description": "Gets or sets the path of the item.",
                    "type": "string"
                }
            }
        },
        "GitLastChangeTreeItems": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "The last change of items.",
                    "type": "array",
                    "items": {
                        "type": "GitLastChangeItem"
                    }
                },
                "lastExploredTime": {
                    "description": "The last explored time, in case the result is not comprehensive. Null otherwise.",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "GitLimitedRefCriteria": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "refExactMatches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "refNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitMergeOriginRef": {
            "type": "object",
            "properties": {
            }
        },
        "GitPathAction": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "GitPathActions",
                    "enum": [
                        "none",
                        "edit",
                        "delete",
                        "add",
                        "rename"
                    ]
                },
                "base64Content": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "rawTextContent": {
                    "type": "string"
                },
                "targetPath": {
                    "type": "string"
                }
            }
        },
        "GitPathToItemsCollection": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array"
                    }
                }
            }
        },
        "GitPullRequest": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "artifactId": {
                    "type": "string"
                },
                "autoCompleteSetBy": {
                    "type": "IdentityRef"
                },
                "closedBy": {
                    "type": "IdentityRef"
                },
                "closedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "codeReviewId": {
                    "type": "integer",
                    "format": "int32"
                },
                "commits": {
                    "type": "array",
                    "items": {
                        "type": "GitCommitRef"
                    }
                },
                "completionOptions": {
                    "$ref": "#/definitions/GitPullRequestCompletionOptions"
                },
                "completionQueueTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "createdBy": {
                    "type": "IdentityRef"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string"
                },
                "lastMergeCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "lastMergeSourceCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "lastMergeTargetCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "mergeId": {
                    "type": "Guid"
                },
                "mergeStatus": {
                    "type": "PullRequestAsyncStatus",
                    "enum": [
                        "notSet",
                        "queued",
                        "conflicts",
                        "succeeded",
                        "rejectedByPolicy",
                        "failure"
                    ]
                },
                "pullRequestId": {
                    "type": "integer",
                    "format": "int32"
                },
                "remoteUrl": {
                    "type": "string"
                },
                "repository": {
                    "$ref": "#/definitions/GitRepository"
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "type": "IdentityRefWithVote"
                    }
                },
                "sourceRefName": {
                    "type": "string"
                },
                "status": {
                    "type": "PullRequestStatus",
                    "enum": [
                        "notSet",
                        "active",
                        "abandoned",
                        "completed",
                        "all"
                    ]
                },
                "supportsIterations": {
                    "type": "boolean"
                },
                "targetRefName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "workItemRefs": {
                    "type": "array",
                    "items": {
                        "type": "ResourceRef"
                    }
                }
            }
        },
        "GitPullRequestChange": {
            "type": "GitChange",
            "properties": {
                "changeTrackingId": {
                    "description": "Id used to track files through multiple changes",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "GitPullRequestCommentThread": {
            "type": "CommentThread",
            "properties": {
                "pullRequestThreadContext": {
                    "description": "Extended context information unique to pull requests",
                    "$ref": "#/definitions/GitPullRequestCommentThreadContext"
                }
            }
        },
        "GitPullRequestCommentThreadContext": {
            "type": "object",
            "properties": {
                "changeTrackingId": {
                    "description": "Used to track a comment across iterations. This value can be found by looking at the iteration's changes list. Must be set for pull requests with iteration support. Otherwise, it's not required for 'legacy' pull requests.",
                    "type": "integer",
                    "format": "int32"
                },
                "iterationContext": {
                    "description": "Specify comparing iteration Ids when a comment thread is added while comparing 2 iterations.",
                    "$ref": "#/definitions/CommentIterationContext"
                },
                "trackingCriteria": {
                    "description": "The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.",
                    "$ref": "#/definitions/CommentTrackingCriteria"
                }
            }
        },
        "GitPullRequestCompletionOptions": {
            "type": "object",
            "properties": {
                "deleteSourceBranch": {
                    "type": "boolean"
                },
                "mergeCommitMessage": {
                    "type": "string"
                },
                "squashMerge": {
                    "type": "boolean"
                }
            }
        },
        "GitPullRequestIteration": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "author": {
                    "type": "IdentityRef"
                },
                "changeList": {
                    "type": "array",
                    "items": {
                        "type": "GitPullRequestChange"
                    }
                },
                "commits": {
                    "type": "array",
                    "items": {
                        "type": "GitCommitRef"
                    }
                },
                "commonRefCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string"
                },
                "hasMoreCommits": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "push": {
                    "$ref": "#/definitions/GitPushRef"
                },
                "sourceRefCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "targetRefCommit": {
                    "$ref": "#/definitions/GitCommitRef"
                },
                "updatedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "GitPullRequestIterationChanges": {
            "type": "object",
            "properties": {
                "changeEntries": {
                    "type": "array",
                    "items": {
                        "type": "GitPullRequestChange"
                    }
                },
                "nextSkip": {
                    "type": "integer",
                    "format": "int32"
                },
                "nextTop": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "GitPullRequestMergeOriginRef": {
            "type": "GitMergeOriginRef",
            "properties": {
                "pullRequestId": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "GitPullRequestQuery": {
            "type": "object",
            "properties": {
                "queries": {
                    "description": "The query to perform",
                    "type": "array",
                    "items": {
                        "type": "GitPullRequestQueryInput"
                    }
                },
                "results": {
                    "description": "The results of the query",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "GitPullRequestQueryInput": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "The list commit ids to search for.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "The type of query to perform",
                    "type": "GitPullRequestQueryType",
                    "enum": [
                        "notSet",
                        "lastMergeCommit",
                        "commit"
                    ]
                }
            }
        },
        "GitPullRequestReviewFileContentInfo": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "path": {
                    "description": "The file change path.",
                    "type": "string"
                },
                "sHA1Hash": {
                    "description": "Content hash of on-disk representation of file content. Its calculated by the client by using SHA1 hash function. Ensure that uploaded file has same encoding as in source control.",
                    "type": "string"
                }
            }
        },
        "GitPullRequestSearchCriteria": {
            "type": "object",
            "properties": {
                "creatorId": {
                    "type": "Guid"
                },
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references",
                    "type": "boolean"
                },
                "repositoryId": {
                    "type": "Guid"
                },
                "reviewerId": {
                    "type": "Guid"
                },
                "sourceRefName": {
                    "type": "string"
                },
                "status": {
                    "type": "PullRequestStatus",
                    "enum": [
                        "notSet",
                        "active",
                        "abandoned",
                        "completed",
                        "all"
                    ]
                },
                "targetRefName": {
                    "type": "string"
                }
            }
        },
        "GitPullRequestStatus": {
            "type": "GitStatus",
            "properties": {
                "iterationId": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "GitPush": {
            "type": "GitPushRef",
            "properties": {
                "commits": {
                    "type": "array",
                    "items": {
                        "type": "GitCommitRef"
                    }
                },
                "refUpdates": {
                    "type": "array",
                    "items": {
                        "type": "GitRefUpdate"
                    }
                },
                "repository": {
                    "$ref": "#/definitions/GitRepository"
                }
            }
        },
        "GitPushEventData": {
            "type": "object",
            "properties": {
                "afterId": {
                    "type": "string"
                },
                "beforeId": {
                    "type": "string"
                },
                "branch": {
                    "type": "string"
                },
                "commits": {
                    "type": "array",
                    "items": {
                        "type": "GitCommit"
                    }
                },
                "repository": {
                    "$ref": "#/definitions/GitRepository"
                }
            }
        },
        "GitPushRef": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "pushCorrelationId": {
                    "type": "Guid"
                },
                "pushedBy": {
                    "type": "IdentityRef"
                },
                "pushId": {
                    "type": "integer",
                    "format": "int32"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitPushSearchCriteria": {
            "type": "object",
            "properties": {
                "fromDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references",
                    "type": "boolean"
                },
                "includeRefUpdates": {
                    "type": "boolean"
                },
                "pusherId": {
                    "type": "Guid"
                },
                "refName": {
                    "type": "string"
                },
                "toDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "GitQueryBranchStatsCriteria": {
            "type": "object",
            "properties": {
                "baseCommit": {
                    "$ref": "#/definitions/GitVersionDescriptor"
                },
                "targetCommits": {
                    "type": "array",
                    "items": {
                        "type": "GitVersionDescriptor"
                    }
                }
            }
        },
        "GitQueryCommitsCriteria": {
            "type": "object",
            "properties": {
                "$skip": {
                    "description": "Number of entries to skip",
                    "type": "integer",
                    "format": "int32"
                },
                "$top": {
                    "description": "Maximum number of entries to retrieve",
                    "type": "integer",
                    "format": "int32"
                },
                "author": {
                    "description": "Alias or display name of the author",
                    "type": "string"
                },
                "compareVersion": {
                    "description": "If provided, the earliest commit in the graph to search",
                    "$ref": "#/definitions/GitVersionDescriptor"
                },
                "excludeDeletes": {
                    "description": "If true, don't include delete history entries",
                    "type": "boolean"
                },
                "fromCommitId": {
                    "description": "If provided, a lower bound for filtering commits alphabetically",
                    "type": "string"
                },
                "fromDate": {
                    "description": "If provided, only include history entries created after this date (string)",
                    "type": "string"
                },
                "ids": {
                    "description": "If provided, specifies the exact commit ids of the commits to fetch. May not be combined with other parameters.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references",
                    "type": "boolean"
                },
                "includeWorkItems": {
                    "description": "Whether to include linked work items",
                    "type": "boolean"
                },
                "itemPath": {
                    "description": "Path of item to search under",
                    "type": "string"
                },
                "itemVersion": {
                    "description": "If provided, identifies the commit or branch to search",
                    "$ref": "#/definitions/GitVersionDescriptor"
                },
                "toCommitId": {
                    "description": "If provided, an upper bound for filtering commits alphabetically",
                    "type": "string"
                },
                "toDate": {
                    "description": "If provided, only include history entries created before this date (string)",
                    "type": "string"
                },
                "user": {
                    "description": "Alias or display name of the committer",
                    "type": "string"
                }
            }
        },
        "GitRef": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "isLockedBy": {
                    "type": "IdentityRef"
                },
                "name": {
                    "type": "string"
                },
                "objectId": {
                    "type": "string"
                },
                "peeledObjectId": {
                    "type": "string"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "GitStatus"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitRefFavorite": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "identityId": {
                    "type": "Guid"
                },
                "name": {
                    "type": "string"
                },
                "repositoryId": {
                    "type": "Guid"
                },
                "type": {
                    "type": "RefFavoriteType",
                    "enum": [
                        "invalid",
                        "folder",
                        "ref"
                    ]
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "GitRefLockRequest": {
            "type": "object",
            "properties": {
                "lock": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GitRefUpdate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "newObjectId": {
                    "type": "string"
                },
                "oldObjectId": {
                    "type": "string"
                },
                "repositoryId": {
                    "type": "Guid"
                }
            }
        },
        "GitRefUpdateResult": {
            "type": "object",
            "properties": {
                "customMessage": {
                    "description": "Custom message for the result object For instance, Reason for failing.",
                    "type": "string"
                },
                "name": {
                    "description": "Ref name",
                    "type": "string"
                },
                "newObjectId": {
                    "description": "New object ID",
                    "type": "string"
                },
                "oldObjectId": {
                    "description": "Old object ID",
                    "type": "string"
                },
                "rejectedBy": {
                    "description": "Name of the plugin that rejected the updated.",
                    "type": "string"
                },
                "repositoryId": {
                    "description": "Repository ID",
                    "type": "Guid"
                },
                "success": {
                    "description": "True if the ref update succeeded, false otherwise",
                    "type": "boolean"
                },
                "updateStatus": {
                    "description": "Status of the update from the TFS server.",
                    "type": "GitRefUpdateStatus",
                    "enum": [
                        "succeeded",
                        "forcePushRequired",
                        "staleOldObjectId",
                        "invalidRefName",
                        "unprocessed",
                        "unresolvableToCommit",
                        "writePermissionRequired",
                        "manageNotePermissionRequired",
                        "createBranchPermissionRequired",
                        "createTagPermissionRequired",
                        "rejectedByPlugin",
                        "locked",
                        "refNameConflict",
                        "rejectedByPolicy",
                        "succeededNonExistentRef",
                        "succeededCorruptRef"
                    ]
                }
            }
        },
        "GitRefUpdateResultSet": {
            "type": "object",
            "properties": {
                "countFailed": {
                    "type": "integer",
                    "format": "int32"
                },
                "countSucceeded": {
                    "type": "integer",
                    "format": "int32"
                },
                "pushCorrelationId": {
                    "type": "Guid"
                },
                "pushIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "int32"
                    }
                },
                "pushTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "GitRefUpdateResult"
                    }
                }
            }
        },
        "GitRepository": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "defaultBranch": {
                    "type": "string"
                },
                "id": {
                    "type": "Guid"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "type": "TeamProjectReference"
                },
                "remoteUrl": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "validRemoteUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "GitRepositoryStats": {
            "type": "object",
            "properties": {
                "activePullRequestsCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "branchesCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "commitsCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "repositoryId": {
                    "type": "string"
                }
            }
        },
        "GitResolution": {
            "type": "object",
            "properties": {
            }
        },
        "GitResolutionMergeContent": {
            "type": "GitResolution",
            "properties": {
                "mergeType": {
                    "type": "GitResolutionMergeType",
                    "enum": [
                        "undecided",
                        "takeSourceContent",
                        "takeTargetContent",
                        "autoMerged",
                        "userMerged"
                    ]
                },
                "userMergedBlob": {
                    "$ref": "#/definitions/GitBlobRef"
                },
                "userMergedContent": {
                    "type": "array",
                    "items": {
                        "type": "byte"
                    }
                }
            }
        },
        "GitResolutionPathConflict": {
            "type": "GitResolution",
            "properties": {
                "action": {
                    "type": "GitResolutionPathConflictAction",
                    "enum": [
                        "undecided",
                        "keepSourceRenameTarget",
                        "keepSourceDeleteTarget",
                        "keepTargetRenameSource",
                        "keepTargetDeleteSource"
                    ]
                },
                "renamePath": {
                    "type": "string"
                }
            }
        },
        "GitResolutionPickOneAction": {
            "type": "GitResolution",
            "properties": {
                "action": {
                    "type": "GitResolutionWhichAction",
                    "enum": [
                        "undecided",
                        "pickSourceAction",
                        "pickTargetAction"
                    ]
                }
            }
        },
        "GitResolutionRename1to2": {
            "type": "GitResolutionMergeContent",
            "properties": {
                "action": {
                    "type": "GitResolutionRename1to2Action",
                    "enum": [
                        "undecided",
                        "keepSourcePath",
                        "keepTargetPath",
                        "keepBothFiles"
                    ]
                }
            }
        },
        "GitRevert": {
            "type": "GitAsyncRefOperation",
            "properties": {
                "revertId": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "GitStatus": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "context": {
                    "$ref": "#/definitions/GitStatusContext"
                },
                "createdBy": {
                    "type": "IdentityRef"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string"
                },
                "state": {
                    "type": "GitStatusState",
                    "enum": [
                        "notSet",
                        "pending",
                        "succeeded",
                        "failed",
                        "error"
                    ]
                },
                "targetUrl": {
                    "type": "string"
                },
                "updatedDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "GitStatusContext": {
            "type": "object",
            "properties": {
                "genre": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GitSuggestion": {
            "type": "object",
            "properties": {
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "GitTargetVersionDescriptor": {
            "type": "GitVersionDescriptor",
            "properties": {
                "targetVersion": {
                    "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
                    "type": "string"
                },
                "targetVersionOptions": {
                    "description": "Version options - Specify additional modifiers to version (e.g Previous)",
                    "type": "GitVersionOptions",
                    "enum": [
                        "none",
                        "previousChange",
                        "firstParent"
                    ]
                },
                "targetVersionType": {
                    "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
                    "type": "GitVersionType",
                    "enum": [
                        "branch",
                        "tag",
                        "commit",
                        "index"
                    ]
                }
            }
        },
        "GitTemplate": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the Template",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the Template",
                    "type": "string"
                }
            }
        },
        "GitTreeDiff": {
            "type": "object",
            "properties": {
                "baseTreeId": {
                    "description": "ObjectId of the base tree of this diff.",
                    "type": "string"
                },
                "diffEntries": {
                    "description": "List of tree entries that differ between the base and target tree.  Renames and object type changes are returned as a delete for the old object and add for the new object.  If a continuation token is returned in the response header, some tree entries are yet to be processed and may yeild more diff entries. If the continuation token is not returned all the diff entries have been included in this response.",
                    "type": "array",
                    "items": {
                        "type": "GitTreeDiffEntry"
                    }
                },
                "targetTreeId": {
                    "description": "ObjectId of the target tree of this diff.",
                    "type": "string"
                },
                "url": {
                    "description": "REST Url to this resource.",
                    "type": "string"
                }
            }
        },
        "GitTreeDiffEntry": {
            "type": "object",
            "properties": {
                "baseObjectId": {
                    "description": "SHA1 hash of the object in the base tree, if it exists. Will be null in case of adds.",
                    "type": "string"
                },
                "changeType": {
                    "description": "Type of change that affected this entry.",
                    "type": "VersionControlChangeType",
                    "enum": [
                        "none",
                        "add",
                        "edit",
                        "encoding",
                        "rename",
                        "delete",
                        "undelete",
                        "branch",
                        "merge",
                        "lock",
                        "rollback",
                        "sourceRename",
                        "targetRename",
                        "property",
                        "all"
                    ]
                },
                "objectType": {
                    "description": "Object type of the tree entry. Blob, Tree or Commit(\"submodule\")",
                    "type": "GitObjectType",
                    "enum": [
                        "bad",
                        "commit",
                        "tree",
                        "blob",
                        "tag",
                        "ext2",
                        "ofsDelta",
                        "refDelta"
                    ]
                },
                "path": {
                    "description": "Relative path in base and target trees.",
                    "type": "string"
                },
                "targetObjectId": {
                    "description": "SHA1 hash of the object in the target tree, if it exists. Will be null in case of deletes.",
                    "type": "string"
                }
            }
        },
        "GitTreeDiffResponse": {
            "type": "object",
            "properties": {
                "continuationToken": {
                    "description": "The HTTP client methods find the continuation token header in the response and populate this field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "treeDiff": {
                    "$ref": "#/definitions/GitTreeDiff"
                }
            }
        },
        "GitTreeEntryRef": {
            "type": "object",
            "properties": {
                "gitObjectType": {
                    "description": "Blob or tree",
                    "type": "GitObjectType",
                    "enum": [
                        "bad",
                        "commit",
                        "tree",
                        "blob",
                        "tag",
                        "ext2",
                        "ofsDelta",
                        "refDelta"
                    ]
                },
                "mode": {
                    "description": "Mode represented as octal string",
                    "type": "string"
                },
                "objectId": {
                    "description": "SHA1 hash of git object",
                    "type": "string"
                },
                "relativePath": {
                    "description": "Path relative to parent tree object",
                    "type": "string"
                },
                "size": {
                    "description": "Size of content",
                    "type": "integer",
                    "format": "int64"
                },
                "url": {
                    "description": "url to retrieve tree or blob",
                    "type": "string"
                }
            }
        },
        "GitTreeRef": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "objectId": {
                    "description": "SHA1 hash of git object",
                    "type": "string"
                },
                "size": {
                    "description": "Sum of sizes of all children",
                    "type": "integer",
                    "format": "int64"
                },
                "treeEntries": {
                    "description": "Blobs and trees under this tree",
                    "type": "array",
                    "items": {
                        "type": "GitTreeEntryRef"
                    }
                },
                "url": {
                    "description": "Url to tree",
                    "type": "string"
                }
            }
        },
        "GitUserDate": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GitVersionDescriptor": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "Version string identifier (name of tag/branch/index, SHA1 of commit)",
                    "type": "string"
                },
                "versionOptions": {
                    "description": "Version options - Specify additional modifiers to version (e.g Previous)",
                    "type": "GitVersionOptions",
                    "enum": [
                        "none",
                        "previousChange",
                        "firstParent"
                    ]
                },
                "versionType": {
                    "description": "Version type (branch, tag, commit, or index). Determines how Id is interpreted",
                    "type": "GitVersionType",
                    "enum": [
                        "branch",
                        "tag",
                        "commit",
                        "index"
                    ]
                }
            }
        },
        "HistoryEntry<T>": {
            "type": "object",
            "properties": {
                "changeList": {
                    "description": "The Change list (changeset/commit/shelveset) for this point in history",
                    "type": "Generic"
                },
                "itemChangeType": {
                    "description": "The change made to the item from this change list (only relevant for File history, not folders)",
                    "type": "VersionControlChangeType",
                    "enum": [
                        "none",
                        "add",
                        "edit",
                        "encoding",
                        "rename",
                        "delete",
                        "undelete",
                        "branch",
                        "merge",
                        "lock",
                        "rollback",
                        "sourceRename",
                        "targetRename",
                        "property",
                        "all"
                    ]
                },
                "serverItem": {
                    "description": "The path of the item at this point in history (only relevant for File history, not folders)",
                    "type": "string"
                }
            }
        },
        "HistoryQueryResults<T>": {
            "type": "object",
            "properties": {
                "moreResultsAvailable": {
                    "description": "True if there are more results available to fetch (we're returning the max # of items requested) A more RESTy solution would be to include a Link header",
                    "type": "boolean"
                },
                "results": {
                    "description": "The history entries (results) from this query",
                    "type": "array",
                    "items": {
                        "type": "Generic"
                    }
                }
            }
        },
        "IdentityRefWithVote": {
            "type": "IdentityRef",
            "properties": {
                "isRequired": {
                    "type": "boolean"
                },
                "reviewerUrl": {
                    "type": "string"
                },
                "vote": {
                    "type": "integer",
                    "format": "int16"
                },
                "votedFor": {
                    "type": "array",
                    "items": {
                        "type": "IdentityRefWithVote"
                    }
                }
            }
        },
        "IncludedGitCommit": {
            "type": "object",
            "properties": {
                "commitId": {
                    "type": "string"
                },
                "commitTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "parentCommitIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repositoryId": {
                    "type": "Guid"
                }
            }
        },
        "ItemContent": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "contentType": {
                    "type": "ItemContentType",
                    "enum": [
                        "rawText",
                        "base64Encoded"
                    ]
                }
            }
        },
        "ItemDetailsOptions": {
            "type": "object",
            "properties": {
                "includeContentMetadata": {
                    "description": "If true, include metadata about the file type",
                    "type": "boolean"
                },
                "recursionLevel": {
                    "description": "Specifies whether to include children (OneLevel), all descendants (Full) or None for folder items",
                    "type": "VersionControlRecursionType",
                    "enum": [
                        "none",
                        "oneLevel",
                        "oneLevelPlusNestedEmptyFolders",
                        "full"
                    ]
                }
            }
        },
        "ItemModel": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "contentMetadata": {
                    "$ref": "#/definitions/FileContentMetadata"
                },
                "isFolder": {
                    "type": "boolean"
                },
                "isSymLink": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "PullRequestTabExtensionConfig": {
            "type": "object",
            "properties": {
                "pullRequestId": {
                    "type": "integer",
                    "format": "int32"
                },
                "repositoryId": {
                    "type": "string"
                }
            }
        },
        "RemoteRepositoryValidation": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "SupportedIde": {
            "type": "object",
            "properties": {
                "downloadUrl": {
                    "description": "The download URL for the IDE.",
                    "type": "string"
                },
                "ideType": {
                    "description": "The type of the IDE.",
                    "type": "SupportedIdeType",
                    "enum": [
                        "unknown",
                        "androidStudio",
                        "appCode",
                        "cLion",
                        "dataGrip",
                        "eclipse",
                        "intelliJ",
                        "mPS",
                        "phpStorm",
                        "pyCharm",
                        "rubyMine",
                        "tower",
                        "visualStudio",
                        "webStorm"
                    ]
                },
                "name": {
                    "description": "The name of the IDE.",
                    "type": "string"
                },
                "protocolHandlerUrl": {
                    "description": "The URL to open the protocol handler for the IDE.",
                    "type": "string"
                },
                "supportedPlatforms": {
                    "description": "A list of SupportedPlatforms.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "TfvcBranch": {
            "type": "TfvcBranchRef",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "type": "TfvcBranch"
                    }
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "type": "TfvcBranchMapping"
                    }
                },
                "parent": {
                    "$ref": "#/definitions/TfvcShallowBranchRef"
                },
                "relatedBranches": {
                    "type": "array",
                    "items": {
                        "type": "TfvcShallowBranchRef"
                    }
                }
            }
        },
        "TfvcBranchMapping": {
            "type": "object",
            "properties": {
                "depth": {
                    "type": "string"
                },
                "serverItem": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "TfvcBranchRef": {
            "type": "TfvcShallowBranchRef",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string"
                },
                "isDeleted": {
                    "type": "boolean"
                },
                "owner": {
                    "type": "IdentityRef"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "TfvcChange": {
            "type": "Generic",
            "properties": {
                "mergeSources": {
                    "description": "List of merge sources in case of rename or branch creation.",
                    "type": "array",
                    "items": {
                        "type": "TfvcMergeSource"
                    }
                },
                "pendingVersion": {
                    "description": "Version at which a (shelved) change was pended against",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "TfvcChangeset": {
            "type": "TfvcChangesetRef",
            "properties": {
                "accountId": {
                    "type": "Guid"
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "TfvcChange"
                    }
                },
                "checkinNotes": {
                    "type": "array",
                    "items": {
                        "type": "CheckinNote"
                    }
                },
                "collectionId": {
                    "type": "Guid"
                },
                "hasMoreChanges": {
                    "type": "boolean"
                },
                "policyOverride": {
                    "$ref": "#/definitions/TfvcPolicyOverrideInfo"
                },
                "teamProjectIds": {
                    "type": "array",
                    "items": {
                        "type": "Guid"
                    }
                },
                "workItems": {
                    "type": "array",
                    "items": {
                        "type": "AssociatedWorkItem"
                    }
                }
            }
        },
        "TfvcChangesetRef": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "author": {
                    "type": "IdentityRef"
                },
                "changesetId": {
                    "type": "integer",
                    "format": "int32"
                },
                "checkedInBy": {
                    "type": "IdentityRef"
                },
                "comment": {
                    "type": "string"
                },
                "commentTruncated": {
                    "type": "boolean"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "TfvcChangesetSearchCriteria": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Alias or display name of user who made the changes",
                    "type": "string"
                },
                "followRenames": {
                    "description": "Whether or not to follow renames for the given item being queried",
                    "type": "boolean"
                },
                "fromDate": {
                    "description": "If provided, only include changesets created after this date (string) Think of a better name for this.",
                    "type": "string"
                },
                "fromId": {
                    "description": "If provided, only include changesets after this changesetID",
                    "type": "integer",
                    "format": "int32"
                },
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references",
                    "type": "boolean"
                },
                "itemPath": {
                    "description": "Path of item to search under",
                    "type": "string"
                },
                "toDate": {
                    "description": "If provided, only include changesets created before this date (string) Think of a better name for this.",
                    "type": "string"
                },
                "toId": {
                    "description": "If provided, a version descriptor for the latest change list to include",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "TfvcChangesetsRequestData": {
            "type": "object",
            "properties": {
                "changesetIds": {
                    "type": "array",
                    "items": {
                        "type": "int32"
                    }
                },
                "commentLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references",
                    "type": "boolean"
                }
            }
        },
        "TfvcCheckinEventData": {
            "type": "object",
            "properties": {
                "changeset": {
                    "$ref": "#/definitions/TfvcChangeset"
                },
                "project": {
                    "type": "TeamProjectReference"
                }
            }
        },
        "TfvcHistoryEntry": {
            "type": "Generic",
            "properties": {
                "encoding": {
                    "description": "The encoding of the item at this point in history (only relevant for File history, not folders)",
                    "type": "integer",
                    "format": "int32"
                },
                "fileId": {
                    "description": "The file id of the item at this point in history (only relevant for File history, not folders)",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "TfvcItem": {
            "type": "ItemModel",
            "properties": {
                "changeDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "deletionId": {
                    "type": "integer",
                    "format": "int32"
                },
                "hashValue": {
                    "description": "MD5 hash as a base 64 string, applies to files only.",
                    "type": "string"
                },
                "isBranch": {
                    "type": "boolean"
                },
                "isPendingChange": {
                    "type": "boolean"
                },
                "size": {
                    "description": "The size of the file, if applicable.",
                    "type": "integer",
                    "format": "int64"
                },
                "version": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "TfvcItemDescriptor": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "recursionLevel": {
                    "type": "VersionControlRecursionType",
                    "enum": [
                        "none",
                        "oneLevel",
                        "oneLevelPlusNestedEmptyFolders",
                        "full"
                    ]
                },
                "version": {
                    "type": "string"
                },
                "versionOption": {
                    "type": "TfvcVersionOption",
                    "enum": [
                        "none",
                        "previous",
                        "useRename"
                    ]
                },
                "versionType": {
                    "type": "TfvcVersionType",
                    "enum": [
                        "none",
                        "changeset",
                        "shelveset",
                        "change",
                        "date",
                        "latest",
                        "tip",
                        "mergeSource"
                    ]
                }
            }
        },
        "TfvcItemRequestData": {
            "type": "object",
            "properties": {
                "includeContentMetadata": {
                    "description": "If true, include metadata about the file type",
                    "type": "boolean"
                },
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references",
                    "type": "boolean"
                },
                "itemDescriptors": {
                    "type": "array",
                    "items": {
                        "type": "TfvcItemDescriptor"
                    }
                }
            }
        },
        "TfvcLabel": {
            "type": "TfvcLabelRef",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "TfvcItem"
                    }
                }
            }
        },
        "TfvcLabelRef": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "labelScope": {
                    "type": "string"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "IdentityRef"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "TfvcLabelRequestData": {
            "type": "object",
            "properties": {
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references",
                    "type": "boolean"
                },
                "itemLabelFilter": {
                    "type": "string"
                },
                "labelScope": {
                    "type": "string"
                },
                "maxItemCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "TfvcMergeSource": {
            "type": "object",
            "properties": {
                "isRename": {
                    "description": "Indicates if this a rename source. If false, it is a merge source.",
                    "type": "boolean"
                },
                "serverItem": {
                    "description": "The server item of the merge source",
                    "type": "string"
                },
                "versionFrom": {
                    "description": "Start of the version range",
                    "type": "integer",
                    "format": "int32"
                },
                "versionTo": {
                    "description": "End of the version range",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "TfvcPolicyFailureInfo": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                }
            }
        },
        "TfvcPolicyOverrideInfo": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "policyFailures": {
                    "type": "array",
                    "items": {
                        "type": "TfvcPolicyFailureInfo"
                    }
                }
            }
        },
        "TfvcShallowBranchRef": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                }
            }
        },
        "TfvcShelveset": {
            "type": "TfvcShelvesetRef",
            "properties": {
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "TfvcChange"
                    }
                },
                "notes": {
                    "type": "array",
                    "items": {
                        "type": "CheckinNote"
                    }
                },
                "policyOverride": {
                    "$ref": "#/definitions/TfvcPolicyOverrideInfo"
                },
                "workItems": {
                    "type": "array",
                    "items": {
                        "type": "AssociatedWorkItem"
                    }
                }
            }
        },
        "TfvcShelvesetRef": {
            "type": "object",
            "properties": {
                "_links": {
                    "type": "ReferenceLinks"
                },
                "comment": {
                    "type": "string"
                },
                "commentTruncated": {
                    "type": "boolean"
                },
                "createdDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "IdentityRef"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "TfvcShelvesetRequestData": {
            "type": "object",
            "properties": {
                "includeDetails": {
                    "description": "Whether to include policyOverride and notes Only applies when requesting a single deep shelveset",
                    "type": "boolean"
                },
                "includeLinks": {
                    "description": "Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.",
                    "type": "boolean"
                },
                "includeWorkItems": {
                    "description": "Whether to include workItems",
                    "type": "boolean"
                },
                "maxChangeCount": {
                    "description": "Max number of changes to include",
                    "type": "integer",
                    "format": "int32"
                },
                "maxCommentLength": {
                    "description": "Max length of comment",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "Shelveset's name",
                    "type": "string"
                },
                "owner": {
                    "description": "Owner's ID. Could be a name or a guid.",
                    "type": "string"
                }
            }
        },
        "TfvcVersionDescriptor": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "string"
                },
                "versionOption": {
                    "type": "TfvcVersionOption",
                    "enum": [
                        "none",
                        "previous",
                        "useRename"
                    ]
                },
                "versionType": {
                    "type": "TfvcVersionType",
                    "enum": [
                        "none",
                        "changeset",
                        "shelveset",
                        "change",
                        "date",
                        "latest",
                        "tip",
                        "mergeSource"
                    ]
                }
            }
        },
        "UpdateRefsRequest": {
            "type": "object",
            "properties": {
                "refUpdateRequests": {
                    "type": "array",
                    "items": {
                        "type": "GitRefUpdate"
                    }
                },
                "updateMode": {
                    "type": "GitRefUpdateMode",
                    "enum": [
                        "bestEffort",
                        "allOrNone"
                    ]
                }
            }
        },
        "VersionControlProjectInfo": {
            "type": "object",
            "properties": {
                "defaultSourceControlType": {
                    "type": "SourceControlTypes"
                },
                "project": {
                    "type": "TeamProjectReference"
                },
                "supportsGit": {
                    "type": "boolean"
                },
                "supportsTFVC": {
                    "type": "boolean"
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}