{
  "swagger": "2.0",
  "info": {
    "title": "CodeReview",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "3.2"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "basePath": "/",
  "tags": [
    {
      "name": "attachments"
    },
    {
      "name": "changes"
    },
    {
      "name": "comments"
    },
    {
      "name": "contents"
    },
    {
      "name": "contentsBatch"
    },
    {
      "name": "iterations"
    },
    {
      "name": "likes"
    },
    {
      "name": "properties"
    },
    {
      "name": "reviewers"
    },
    {
      "name": "reviews"
    },
    {
      "name": "reviewsBatch"
    },
    {
      "name": "settings"
    },
    {
      "name": "share"
    },
    {
      "name": "statuses"
    },
    {
      "name": "threads"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/_apis/codereview/reviews": {
      "get": {
        "tags": [
          "reviews"
        ],
        "summary": "GetReviews",
        "description": "Query reviews based on search criteria. When making subsequent requests that include continuation tokens, be sure to pass the same search criteria. Otherwise the subsequent requests may return unexpected results.",
        "operationId": "getReviews",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": true,
            "type": "string",
            "format": "ReviewSearchCriteria"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews": {
      "get": {
        "tags": [
          "reviews"
        ],
        "summary": "GetReviews",
        "description": "Query reviews based on search criteria. When making subsequent requests that include continuation tokens, be sure to pass the same search criteria. Otherwise the subsequent requests may return unexpected results.",
        "operationId": "getReviews",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": true,
            "type": "string",
            "format": "ReviewSearchCriteria"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "reviews"
        ],
        "summary": "CreateReview",
        "description": "",
        "operationId": "createReview",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}": {
      "delete": {
        "tags": [
          "reviews"
        ],
        "summary": "DeleteReview",
        "description": "",
        "operationId": "deleteReview",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "reviews"
        ],
        "summary": "GetReview",
        "description": "",
        "operationId": "getReview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeAllProperties",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "maxChangesCount",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "header",
            "name": "ifModifiedSince",
            "description": "Fetch latest review data if it was modified after IfModifiedSince timestamp.",
            "required": false,
            "type": "string",
            "format": "DateTimeOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "reviews"
        ],
        "summary": "ReplaceReview",
        "description": "",
        "operationId": "replaceReview",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "reviews"
        ],
        "summary": "UpdateReview",
        "description": "",
        "operationId": "updateReview",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/attachments": {
      "post": {
        "tags": [
          "attachments"
        ],
        "summary": "AddAttachment",
        "description": "",
        "operationId": "addAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "attachments"
        ],
        "summary": "GetAttachments",
        "description": "",
        "operationId": "getAttachments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "modifiedSince",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/attachments/{attachmentId}": {
      "delete": {
        "tags": [
          "attachments"
        ],
        "summary": "DeleteAttachment",
        "description": "",
        "operationId": "deleteAttachment",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "attachmentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "attachments"
        ],
        "summary": "GetAttachment",
        "description": "",
        "operationId": "getAttachment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "attachmentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/contents": {
      "get": {
        "tags": [
          "contents"
        ],
        "summary": "DownloadContent",
        "description": "",
        "operationId": "downloadContent",
        "produces": [
          "application/zip",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "contentHash",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "downloadFileName",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "contents"
        ],
        "summary": "UploadContent",
        "description": "",
        "operationId": "uploadContent",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Stream to upload",
            "required": true,
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "contentHash",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fileType",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/contentsbatch": {
      "post": {
        "tags": [
          "contentsBatch"
        ],
        "summary": "DownloadContentsBatchZip",
        "description": "Fetch file contents based on criteria. Criteria can be a set of iteration ids or content hashes. POST /_apis/codereview/reviews/{id}/contentsBatch",
        "operationId": "downloadContentsBatchZip",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DownloadContentsCriteria"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "downloadFileName",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/iterations": {
      "post": {
        "tags": [
          "iterations"
        ],
        "summary": "CreateIteration",
        "description": "",
        "operationId": "createIteration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Iteration"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Iteration"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "iterations"
        ],
        "summary": "GetIterations",
        "description": "",
        "operationId": "getIterations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeUnpublished",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Iteration"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/iterations/{iterationId}": {
      "get": {
        "tags": [
          "iterations"
        ],
        "summary": "GetIteration",
        "description": "",
        "operationId": "getIteration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Iteration"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "iterations"
        ],
        "summary": "UpdateIteration",
        "description": "",
        "operationId": "updateIteration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Iteration"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Iteration"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/changes": {
      "get": {
        "tags": [
          "changes"
        ],
        "summary": "GetChanges",
        "description": "",
        "operationId": "getChanges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "compareTo",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeEntry"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/changes/{changeId}/{fileTarget}": {
      "get": {
        "tags": [
          "changes"
        ],
        "summary": "GetContent",
        "description": "",
        "operationId": "getContent",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "changeId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "fileTarget",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/properties": {
      "patch": {
        "tags": [
          "properties"
        ],
        "summary": "CreateOrUpdateIterationProperties",
        "description": "Create or update review properties collection. PATCH /_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/properties The patch operation can be add, replace or remove. For add operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For replace operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For remove operation, the path cannot be empty. If the path does not exist, no action will be performed.",
        "operationId": "createOrUpdateIterationProperties",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatchDocument"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertiesCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "properties"
        ],
        "summary": "GetIterationProperties",
        "description": "Get iteration properties collection. GET /_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/properties",
        "operationId": "getIterationProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertiesCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/statuses": {
      "post": {
        "tags": [
          "statuses"
        ],
        "summary": "CreateIterationStatus",
        "description": "Create an iteration status. POST /_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/statuses/{statusId}",
        "operationId": "createIterationStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "statuses"
        ],
        "summary": "GetIterationStatuses",
        "description": "Get all the statuses associated with an iteration. GET /_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/statuses",
        "operationId": "getIterationStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Status"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/statuses/{statusId}": {
      "get": {
        "tags": [
          "statuses"
        ],
        "summary": "GetIterationStatus",
        "description": "Get the specific iteration status. GET /_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/statuses/{statusId}",
        "operationId": "getIterationStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "statuses"
        ],
        "summary": "UpdateIterationStatus",
        "description": "Update an iteration status. PATCH /_apis/codereview/reviews/{reviewId}/iterations/{iterationId}/statuses/{statusId}",
        "operationId": "updateIterationStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/properties": {
      "patch": {
        "tags": [
          "properties"
        ],
        "summary": "CreateOrUpdateReviewProperties",
        "description": "Create or update review properties collection. PATCH /_apis/codereview/reviews/{reviewId}/properties The patch operation can be add, replace or remove. For add operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For replace operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For remove operation, the path cannot be empty. If the path does not exist, no action will be performed.",
        "operationId": "createOrUpdateReviewProperties",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatchDocument"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertiesCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "properties"
        ],
        "summary": "GetReviewProperties",
        "description": "Get review properties collection. GET /_apis/codereview/reviews/{reviewId}/properties",
        "operationId": "getReviewProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertiesCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/reviewers": {
      "post": {
        "tags": [
          "reviewers"
        ],
        "summary": "AddReviewers",
        "description": "",
        "operationId": "addReviewers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reviewer"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reviewer"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "reviewers"
        ],
        "summary": "GetReviewers",
        "description": "",
        "operationId": "getReviewers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reviewer"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/reviewers/{reviewerId}": {
      "delete": {
        "tags": [
          "reviewers"
        ],
        "summary": "DeleteReviewer",
        "description": "",
        "operationId": "deleteReviewer",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "reviewers"
        ],
        "summary": "ReplaceReviewer",
        "description": "",
        "operationId": "replaceReviewer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reviewer"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Reviewer"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/share": {
      "post": {
        "tags": [
          "share"
        ],
        "summary": "ShareReview",
        "description": "",
        "operationId": "shareReview",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationContext"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/statuses": {
      "post": {
        "tags": [
          "statuses"
        ],
        "summary": "CreateReviewStatus",
        "description": "Create a review status. POST /_apis/codereview/reviews/{reviewId}/statuses",
        "operationId": "createReviewStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "statuses"
        ],
        "summary": "GetReviewStatuses",
        "description": "Get all the statuses associated with a review. GET /_apis/codereview/reviews/{reviewId}/statuses",
        "operationId": "getReviewStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Status"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/statuses/{statusId}": {
      "get": {
        "tags": [
          "statuses"
        ],
        "summary": "GetReviewStatus",
        "description": "Get the specific review status. GET /_apis/codereview/reviews/{reviewId}/statuses/{statusId}",
        "operationId": "getReviewStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "statuses"
        ],
        "summary": "UpdateReviewStatus",
        "description": "Update a review status. PATCH /_apis/codereview/reviews/{reviewId}/statuses/{statusId}",
        "operationId": "updateReviewStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/threads": {
      "post": {
        "tags": [
          "threads"
        ],
        "summary": "CreateThread",
        "description": "Create a review comment thread. POST /_apis/CodeReview/reviews/{id}/Threads",
        "operationId": "createThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentThread"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentThread"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "threads"
        ],
        "summary": "GetThreads",
        "description": "Get all review comment threads of a review. GET /_apis/CodeReview/reviews/{id}/Threads/ When modifiedSince parameter is passed, fetch threads of a review that were modified after modifiedSince timestamp.",
        "operationId": "getThreads",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "modifiedSince",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "trackingCriteria",
            "description": "",
            "required": false,
            "type": "string",
            "format": "CommentTrackingCriteria"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommentThread"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/threads/{threadId}": {
      "get": {
        "tags": [
          "threads"
        ],
        "summary": "GetThread",
        "description": "Get a review comment thread by id for a review. Return 304 if comment thread hasn't modified based on ifModifiedSince header. GET /_apis/CodeReview/reviews/{id}/Threads/{threadId}",
        "operationId": "getThread",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "trackingCriteria",
            "description": "",
            "required": false,
            "type": "string",
            "format": "CommentTrackingCriteria"
          },
          {
            "in": "header",
            "name": "ifModifiedSince",
            "description": "Fetch latest comment data if it was modified after IfModifiedSince timestamp.",
            "required": false,
            "type": "string",
            "format": "DateTimeOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentThread"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "threads"
        ],
        "summary": "UpdateThread",
        "description": "",
        "operationId": "updateThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentThread"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentThread"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/threads/{threadId}/comments": {
      "post": {
        "tags": [
          "comments"
        ],
        "summary": "CreateComment",
        "description": "Create a discussion comment. POST /_apis/CodeReview/reviews/{id}/Threads/{threadId}/comments",
        "operationId": "createComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscussionComment"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DiscussionComment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "GetComments",
        "description": "Read all comments for a review comment thread by id for a review. GET /_apis/CodeReview/reviews/{id}/Threads/{threadId}/comments",
        "operationId": "getComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscussionComment"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/threads/{threadId}/comments/{commentId}": {
      "delete": {
        "tags": [
          "comments"
        ],
        "summary": "DeleteComment",
        "description": "Soft delete a comment. Deleted(Withdrawn) comments are always returned. Use IsDeleted flag in each comment to detect if its a deleted comment, Delete /_apis/CodeReview/reviews/{id}/Threads/{threadId}/comments/{commentId}",
        "operationId": "deleteComment",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int16"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "GetComment",
        "description": "Get a comment for a review comment thread by id of a review based on commentId. GET /_apis/CodeReview/reviews/{id}/Threads/{threadId}/comments/{commentId}",
        "operationId": "getComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int16"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DiscussionComment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "comments"
        ],
        "summary": "UpdateComment",
        "description": "Update a comment. Patch /_apis/CodeReview/reviews/{id}/Threads/{threadId}/comments/{commentId}",
        "operationId": "updateComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscussionComment"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int16"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DiscussionComment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/threads/{threadId}/comments/{commentId}/likes": {
      "post": {
        "tags": [
          "likes"
        ],
        "summary": "CreateLike",
        "description": "Like a comment in a thread for a review. POST /_apis/CodeReview/reviews/{id}/threads/{id}/comments/{commentId}/likes",
        "operationId": "createLike",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentityRef"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int16"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IdentityRef"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "likes"
        ],
        "summary": "GetLikes",
        "description": "Get all likes of a comment in a thread for a review. GET /_apis/CodeReview/reviews/{id}/threads/{id}/comments/{commentId}/likes",
        "operationId": "getLikes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int16"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentityRef"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviews/{reviewId}/threads/{threadId}/comments/{commentId}/likes/{userId}": {
      "delete": {
        "tags": [
          "likes"
        ],
        "summary": "DeleteLike",
        "description": "Withdraw like of a comment in a thread for a review. DELETE /_apis/CodeReview/reviews/{id}/threads/{id}/comments/{commentId}/likes/{userId}",
        "operationId": "deleteLike",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int16"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/reviewsbatch": {
      "post": {
        "tags": [
          "reviewsBatch"
        ],
        "summary": "GetReviewsBatch",
        "description": "Query reviews by sourceArtifactIds. POST /_apis/codereview/reviewsBatch",
        "operationId": "getReviewsBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeDeleted",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{project}/_apis/codereview/settings": {
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "CreateReviewSettings",
        "description": "",
        "operationId": "createReviewSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewSettings"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReviewSettings"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "GetReviewSettings",
        "description": "",
        "operationId": "getReviewSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReviewSettings"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "UpdateReviewSettings",
        "description": "",
        "operationId": "updateReviewSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewSettings"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReviewSettings"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "Attachment": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "$ref": "#/definitions/IdentityRef"
        },
        "contentHash": {
          "description": "Content hash of on-disk representation of file content. Its calculated by the client by using SHA1 hash function.",
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the attachment, can be null.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the attachment, can't be null or empty.",
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        }
      }
    },
    "ChangeEntry": {
      "type": "object",
      "properties": {
        "base": {
          "$ref": "#/definitions/ChangeEntryFileInfo"
        },
        "changeId": {
          "description": "Uniquely tracks each change in an iteration. Automatically generated in server.",
          "type": "integer",
          "format": "int32"
        },
        "changeTrackingId": {
          "type": "integer",
          "format": "int32"
        },
        "extendedChangeType": {
          "description": "Change types as provided by source control. It contains change types that aren't supported by Type field.",
          "type": "string"
        },
        "iterationId": {
          "type": "integer",
          "format": "int32"
        },
        "modified": {
          "$ref": "#/definitions/ChangeEntryFileInfo"
        },
        "type": {
          "description": "Specify simplified change types that can be used by client to drive client logic.",
          "enum": [
            "none",
            "add",
            "edit",
            "rename",
            "move",
            "delete"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.WebApi.ChangeType"
          }
        }
      }
    },
    "ChangeEntryFileInfo": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewFileContentInfo"
        }
      ],
      "properties": {
      }
    },
    "CommentThread": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DiscussionThread"
        }
      ],
      "properties": {
        "threadContext": {
          "description": "Specify thread context such as position in left/right file.",
          "$ref": "#/definitions/CommentThreadContext"
        }
      }
    },
    "CommentThreadContext": {
      "type": "object",
      "properties": {
        "changeTrackingId": {
          "description": "Used to track a comment across iterations.",
          "type": "integer",
          "format": "int32"
        },
        "filePath": {
          "description": "File path relative to the root of the repository. It's up to the client to use any path format.",
          "type": "string"
        },
        "iterationContext": {
          "description": "Specify comparing iteration Ids when a comment thread is added while comparing 2 iterations.",
          "$ref": "#/definitions/IterationContext"
        },
        "leftFileEnd": {
          "description": "Position of last character of the comment in left file.",
          "$ref": "#/definitions/Position"
        },
        "leftFileStart": {
          "description": "Position of first character of the comment in left file.",
          "$ref": "#/definitions/Position"
        },
        "rightFileEnd": {
          "description": "Position of last character of the comment in right file.",
          "$ref": "#/definitions/Position"
        },
        "rightFileStart": {
          "description": "Position of first character of the comment in right file.",
          "$ref": "#/definitions/Position"
        },
        "trackingCriteria": {
          "description": "The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.",
          "$ref": "#/definitions/CommentTrackingCriteria"
        }
      }
    },
    "CommentTrackingCriteria": {
      "type": "object",
      "properties": {
        "firstComparingIteration": {
          "description": "The first comparing iteration being viewed. Threads will be tracked if this is greater than 0.",
          "type": "integer",
          "format": "int32"
        },
        "secondComparingIteration": {
          "description": "The second comparing iteration being viewed. Threads will be tracked if this is greater than 0.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DiscussionComment": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "$ref": "#/definitions/IdentityRef"
        },
        "canDelete": {
          "type": "boolean"
        },
        "commentType": {
          "enum": [
            "unknown",
            "text",
            "codeChange",
            "system"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.Discussion.WebApi.CommentType"
          }
        },
        "content": {
          "type": "string"
        },
        "id": {
          "description": "CommentId in a thread always starting from 1.",
          "type": "integer",
          "format": "int16"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date-time"
        },
        "parentId": {
          "description": "Used for comment replies. It must be a commentId of a comment in comment list of a thread.",
          "type": "integer",
          "format": "int16"
        },
        "publishedDate": {
          "type": "string",
          "format": "date-time"
        },
        "threadId": {
          "type": "integer",
          "format": "int32"
        },
        "usersLiked": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityRef"
          }
        }
      }
    },
    "DiscussionThread": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "artifactUri": {
          "type": "string"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscussionComment"
          }
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isDeleted": {
          "description": "A discussion is considered as deleted when all its comments are deleted. If thread has comments property set to null or Comments.Length is zero then return false. This property returns false by default because for all REST API calls comments property is not set.",
          "type": "boolean"
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date-time"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "publishedDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "enum": [
            "unknown",
            "active",
            "fixed",
            "wontFix",
            "closed",
            "byDesign",
            "pending"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.Discussion.WebApi.DiscussionStatus"
          }
        },
        "workItemId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DownloadContentsCriteria": {
      "type": "object",
      "properties": {
        "contentHashes": {
          "description": "If provided, specifies the exact content hashes of the files to fetch. Cannot be combined with other parameters such as IterationIds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fileType": {
          "description": "If provided, specifies the file type to fetch. Applicable only for content hashes.",
          "enum": [
            "changeEntry",
            "attachment"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.WebApi.ReviewFileType"
          }
        },
        "filterBy": {
          "description": "If provided, filter iteration files by fetching only base files or modified files. Applicable only for iterations.",
          "enum": [
            "base",
            "modified"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.WebApi.ChangeEntryFileType"
          }
        },
        "iterationIds": {
          "description": "If provided, specifies the iteration ids of the files to fetch. Cannot be combined with Content hashes.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "IdentityDescriptor": {
      "type": "object",
      "properties": {
        "identifier": {
          "description": "The unique identifier for this identity, not exceeding 256 chars, which will be persisted.",
          "type": "string"
        },
        "identityType": {
          "description": "Type of descriptor (for example, Windows, Passport, etc.).",
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Iteration": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "$ref": "#/definitions/IdentityRef"
        },
        "changeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeEntry"
          }
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isUnpublished": {
          "type": "boolean"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "reviewId": {
          "type": "integer",
          "format": "int32"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Status"
          }
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "IterationChanges": {
      "type": "object",
      "properties": {
        "changeEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeEntry"
          }
        },
        "nextSkip": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextTop": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "IterationContext": {
      "type": "object",
      "properties": {
        "firstComparingIteration": {
          "description": "First comparing iteration Id. Minimum value is 1.",
          "type": "integer",
          "format": "int16"
        },
        "secondComparingIteration": {
          "description": "Second comparing iteration Id. Minimum value is 1.",
          "type": "integer",
          "format": "int16"
        }
      }
    },
    "JObject": {
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "JContainer"
        }
      ],
      "properties": {
        "item": {
          "type": "string",
          "format": "JToken"
        },
        "type": {
          "type": "string",
          "format": "JTokenType"
        }
      }
    },
    "JsonPatchDocument": {
      "type": "object",
      "allOf": [
        {
          "type": "array",
          "items": {
          }
        }
      ],
      "properties": {
      }
    },
    "JsonPatchOperation": {
      "type": "object",
      "properties": {
        "from": {
          "description": "The path to copy from for the Move/Copy operation.",
          "type": "string"
        },
        "op": {
          "description": "The patch operation",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy",
            "test"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.WebApi.Patch.Operation"
          }
        },
        "path": {
          "description": "The path for the operation",
          "type": "string"
        },
        "value": {
          "description": "The value for the operation. This is either a primitive or a JToken.",
          "type": "object"
        }
      }
    },
    "NotificationContext": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Optional user note or message.",
          "type": "string"
        },
        "receivers": {
          "description": "Identities of users who will receive a share notification.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityRef"
          }
        },
        "subject": {
          "description": "Append text to subject of share notification. Ex: Email subject. When missing, server will set to a default.",
          "type": "string"
        }
      }
    },
    "Position": {
      "type": "object",
      "properties": {
        "line": {
          "description": "Position line starting with one.",
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "description": "Position offset starting with zero.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PropertiesCollection": {
      "type": "object",
      "properties": {
        "count": {
          "description": "Implements ICollection<KeyValuePair<String,Object>>.Count/>",
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "object"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReferenceLinks": {
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "author": {
          "$ref": "#/definitions/IdentityRef"
        },
        "completedDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "iterations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Iteration"
          }
        },
        "projectId": {
          "type": "string",
          "format": "uuid"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "reviewers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reviewer"
          }
        },
        "sourceArtifactId": {
          "type": "string"
        },
        "status": {
          "enum": [
            "active",
            "completed",
            "abandoned",
            "creating"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.WebApi.ReviewStatus"
          }
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Status"
          }
        },
        "title": {
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Reviewer": {
      "type": "object",
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "identity": {
          "$ref": "#/definitions/IdentityRef"
        },
        "iterationId": {
          "description": "Id of a valid published iteration. Latest iteration where the reviewer had voted. When a reviewer votes, client provided iterationId must be a published iterationId. When null, latest published iterationId is used.",
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "description": "Specifies reviewer kind. Its set to \"optional\" if not set for a new reviewer.",
          "enum": [
            "optional",
            "required"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.WebApi.ReviewerKind"
          }
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "reviewerStateId": {
          "description": "Specifies reviewer vote. By default, its set to \"No response\" if not set for a new reviewer. If a reviewer has voted on multiple iterations then it provides vote of latest iteration.",
          "type": "integer",
          "format": "int16"
        },
        "votedFor": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "votedForGroups": {
          "description": "Specifies the groups (if any) for which this reviewer has voted. It will have length > 0 only if the reviewer is a member of other groups and have voted. Voted means having reviewer state other than the initial \"NotStarted\" state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reviewer"
          }
        }
      }
    },
    "ReviewFileContentInfo": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "flags": {
          "description": "A generic way to store metadata about a particular change entry content. This information is later used by the IReviewContentProvider to decide how to retrieve the content.",
          "type": "string",
          "format": "byte"
        },
        "path": {
          "type": "string"
        },
        "reviewId": {
          "type": "integer",
          "format": "int32"
        },
        "sHA1Hash": {
          "description": "Content hash of on-disk representation of file content. Its calculated by the client by using SHA1 hash function. Ensure that uploaded file has same encoding as in source control.",
          "type": "string"
        }
      }
    },
    "ReviewFilesZipContent": {
      "type": "object",
      "properties": {
        "nextSkip": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextTop": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "zipStream": {
          "type": "string",
          "format": "Stream"
        }
      }
    },
    "ReviewSearchCriteria": {
      "type": "object",
      "properties": {
        "creatorIdentity": {
          "$ref": "#/definitions/IdentityDescriptor"
        },
        "includeDeleted": {
          "type": "boolean"
        },
        "maxCreatedDate": {
          "type": "string",
          "format": "date-time"
        },
        "maxUpdatedDate": {
          "type": "string",
          "format": "date-time"
        },
        "minCreatedDate": {
          "type": "string",
          "format": "date-time"
        },
        "minUpdatedDate": {
          "type": "string",
          "format": "date-time"
        },
        "orderAscending": {
          "type": "boolean"
        },
        "reviewerIdentity": {
          "$ref": "#/definitions/IdentityDescriptor"
        },
        "sourceArtifactPrefix": {
          "type": "string"
        },
        "status": {
          "enum": [
            "active",
            "completed",
            "abandoned",
            "creating"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.WebApi.ReviewStatus"
          }
        }
      }
    },
    "ReviewSettings": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "globalSettings": {
          "description": "The settings shared between all the source control connections.",
          "$ref": "#/definitions/JObject"
        },
        "settings": {
          "description": "The settings that are not shared by all the source control connections.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JObject"
          }
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "context": {
          "$ref": "#/definitions/StatusContext"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the status, can be null.",
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "iterationId": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "enum": [
            "notSet",
            "pending",
            "succeeded",
            "failed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.CodeReview.WebApi.MetaState"
          }
        },
        "targetUrl": {
          "description": "The url associated with the status, can be null.",
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "StatusContext": {
      "type": "object",
      "properties": {
        "genre": {
          "description": "The genre of the status, can be null.",
          "type": "string"
        },
        "name": {
          "description": "The name of the status, can't be null or empty.",
          "type": "string"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '3.2-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
     },
     "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.code": "Grants the ability to read source code and metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to get notified about version control events via service hooks.",
        "vso.code_write": "Grants the ability to read, update, and delete source code, access metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to create and manage pull requests and code reviews and to receive notifications about version control events via service hooks."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}