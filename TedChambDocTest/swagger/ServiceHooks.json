{
  "swagger": "2.0",
  "info": {
    "title": "ServiceHooks",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "3.1"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "basePath": "/",
  "tags": [
    {
      "name": "actions"
    },
    {
      "name": "consumers"
    },
    {
      "name": "events"
    },
    {
      "name": "inputValuesQuery"
    },
    {
      "name": "notifications"
    },
    {
      "name": "notificationsQuery"
    },
    {
      "name": "subscriptions"
    },
    {
      "name": "subscriptionsQuery"
    },
    {
      "name": "testNotifications"
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "pat": {
      "type": "basic",
      "description": "Personal access token"
    }
  },
  "security": [
    {
      "pat": []
    }
  ], 
  "paths": {
    "/_apis/hookssvc/consumers": {
      "get": {
        "tags": [
          "consumers"
        ],
        "summary": "GetConsumers",
        "description": "",
        "operationId": "getConsumers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/consumer"
              }
            }
          }
        }
      }
    },
    "/_apis/hookssvc/consumers/{consumerId}": {
      "get": {
        "tags": [
          "consumers"
        ],
        "summary": "GetConsumer",
        "description": "",
        "operationId": "getConsumer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "consumerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/consumer"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/consumers/{consumerId}/actions": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "GetConsumerActions",
        "description": "",
        "operationId": "getConsumerActions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "consumerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/consumerAction"
              }
            }
          }
        }
      }
    },
    "/_apis/hookssvc/consumers/{consumerId}/actions/{consumerActionId}": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "GetConsumerAction",
        "description": "",
        "operationId": "getConsumerAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "consumerId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "consumerActionId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/consumerAction"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/events": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "CreateEvents",
        "description": "",
        "operationId": "createEvents",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publishEventsRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/hookssvc/inputvaluesquery": {
      "post": {
        "tags": [
          "inputValuesQuery"
        ],
        "summary": "QueryInputValues",
        "description": "",
        "operationId": "queryInputValues",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscriptionInputValuesQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/subscriptionInputValuesQuery"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/notificationsquery": {
      "post": {
        "tags": [
          "notificationsQuery"
        ],
        "summary": "QueryNotifications",
        "description": "",
        "operationId": "queryNotifications",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notificationsQuery"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptions": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "CreateSubscription",
        "description": "",
        "operationId": "createSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          }
        }
      },
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "ListSubscriptions",
        "description": "",
        "operationId": "listSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "publisherId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "eventType",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "consumerId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "consumerActionId",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subscription"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "subscriptions"
        ],
        "summary": "ReplaceSubscription",
        "description": "",
        "operationId": "replaceSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptions/{subscriptionId}": {
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "summary": "DeleteSubscription",
        "description": "",
        "operationId": "deleteSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "GetSubscription",
        "description": "",
        "operationId": "getSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptions/{subscriptionId}/notifications": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "GetNotifications",
        "description": "",
        "operationId": "getNotifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "maxResults",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "status",
            "description": "",
            "required": false,
            "type": "string",
            "format": "notificationStatus"
          },
          {
            "in": "query",
            "name": "result",
            "description": "",
            "required": false,
            "type": "string",
            "format": "notificationResult"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notification"
              }
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptions/{subscriptionId}/notifications/{notificationId}": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "GetNotification",
        "description": "",
        "operationId": "getNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "notificationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notification"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/subscriptionsquery": {
      "post": {
        "tags": [
          "subscriptionsQuery"
        ],
        "summary": "QuerySubscriptions",
        "description": "",
        "operationId": "querySubscriptions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscriptionsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/subscriptionsQuery"
            }
          }
        }
      }
    },
    "/_apis/hookssvc/testnotifications": {
      "post": {
        "tags": [
          "testNotifications"
        ],
        "summary": "CreateTestNotification",
        "description": "",
        "operationId": "createTestNotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notification"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "consumer": {
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/referenceLinks"
        },
        "actions": {
          "description": "Gets this consumer's actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/consumerAction"
          }
        },
        "authenticationType": {
          "description": "Gets or sets this consumer's authentication type.",
          "enum": [
            "none",
            "oAuth",
            "external"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.AuthenticationType"
          }
        },
        "description": {
          "description": "Gets or sets this consumer's localized description.",
          "type": "string"
        },
        "externalConfiguration": {
          "description": "Non-null only if subscriptions for this consumer are configured externally.",
          "$ref": "#/definitions/externalConfigurationDescriptor"
        },
        "id": {
          "description": "Gets or sets this consumer's identifier.",
          "type": "string"
        },
        "imageUrl": {
          "description": "Gets or sets this consumer's image URL, if any.",
          "type": "string"
        },
        "informationUrl": {
          "description": "Gets or sets this consumer's information URL, if any.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets this consumer's input descriptors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/inputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets this consumer's localized name.",
          "type": "string"
        },
        "url": {
          "description": "The url for this resource",
          "type": "string"
        }
      }
    },
    "consumerAction": {
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/referenceLinks"
        },
        "allowResourceVersionOverride": {
          "description": "Gets or sets the flag indicating if resource version can be overridden when creating or editing a subscription.",
          "type": "boolean"
        },
        "consumerId": {
          "description": "Gets or sets the identifier of the consumer to which this action belongs.",
          "type": "string"
        },
        "description": {
          "description": "Gets or sets this action's localized description.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets this action's identifier.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets this action's input descriptors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/inputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets this action's localized name.",
          "type": "string"
        },
        "supportedEventTypes": {
          "description": "Gets or sets this action's supported event identifiers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supportedResourceVersions": {
          "description": "Gets or sets this action's supported resource versions.",
          "type": "object",
          "additionalProperties": {
            "type": "array"
          }
        },
        "url": {
          "description": "The url for this resource",
          "type": "string"
        }
      }
    },
    "event": {
      "type": "object",
      "properties": {
        "createdDate": {
          "description": "Gets or sets the UTC-based date and time that this event was created.",
          "type": "string",
          "format": "date-time"
        },
        "detailedMessage": {
          "description": "Gets or sets the detailed message associated with this event.",
          "$ref": "#/definitions/formattedEventMessage"
        },
        "eventType": {
          "description": "Gets or sets the type of this event.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the unique identifier of this event.",
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "description": "Gets or sets the (brief) message associated with this event.",
          "$ref": "#/definitions/formattedEventMessage"
        },
        "publisherId": {
          "description": "Gets or sets the identifier of the publisher that raised this event.",
          "type": "string"
        },
        "resource": {
          "description": "Gets or sets the data associated with this event.",
          "type": "object"
        },
        "resourceContainers": {
          "description": "Gets or sets the resource containers.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resourceContainer"
          }
        },
        "resourceVersion": {
          "description": "Gets or sets the version of the data associated with this event.",
          "type": "string"
        },
        "scope": {
          "description": "Gets or sets the scope for this event.",
          "enum": [
            "all",
            "project",
            "team",
            "collection",
            "account",
            "deployment"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.EventScope"
          }
        },
        "sessionToken": {
          "description": "Gets or sets the Session Token that can be used in further interactions",
          "$ref": "#/definitions/sessionToken"
        }
      }
    },
    "externalConfigurationDescriptor": {
      "type": "object",
      "properties": {
        "createSubscriptionUrl": {
          "description": "Url of the site to create this type of subscription.",
          "type": "string"
        },
        "editSubscriptionPropertyName": {
          "description": "The name of an input property that contains the URL to edit a subscription.",
          "type": "string"
        }
      }
    },
    "formattedEventMessage": {
      "type": "object",
      "properties": {
        "html": {
          "description": "Gets or sets the html format of the message",
          "type": "string"
        },
        "markdown": {
          "description": "Gets or sets the markdown format of the message",
          "type": "string"
        },
        "text": {
          "description": "Gets or sets the raw text of the message",
          "type": "string"
        }
      }
    },
    "identityRef": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "inputDescriptor": {
      "type": "object",
      "properties": {
        "dependencyInputIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "hasDynamicValueInformation": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "inputMode": {
          "type": "string",
          "format": "inputMode"
        },
        "isConfidential": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "type": "string"
        },
        "useInDefaultDescription": {
          "type": "boolean"
        },
        "validation": {
          "type": "string",
          "format": "inputValidation"
        },
        "valueHint": {
          "type": "string"
        },
        "values": {
          "$ref": "#/definitions/inputValues"
        }
      }
    },
    "inputFilter": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "inputFilterCondition"
          }
        }
      }
    },
    "inputValues": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "error": {
          "type": "string",
          "format": "inputValuesError"
        },
        "inputId": {
          "type": "string"
        },
        "isDisabled": {
          "type": "boolean"
        },
        "isLimitedToPossibleValues": {
          "type": "boolean"
        },
        "isReadOnly": {
          "type": "boolean"
        },
        "possibleValues": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "inputValue"
          }
        }
      }
    },
    "notification": {
      "type": "object",
      "properties": {
        "createdDate": {
          "description": "Gets or sets date and time that this result was created.",
          "type": "string",
          "format": "date-time"
        },
        "details": {
          "description": "Details about this notification (if available)",
          "$ref": "#/definitions/notificationDetails"
        },
        "eventId": {
          "description": "The event id associated with this notification",
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "The notification id",
          "type": "integer",
          "format": "int32"
        },
        "modifiedDate": {
          "description": "Gets or sets date and time that this result was last modified.",
          "type": "string",
          "format": "date-time"
        },
        "result": {
          "description": "Result of the notification",
          "enum": [
            "pending",
            "succeeded",
            "failed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationResult"
          }
        },
        "status": {
          "description": "Status of the notification",
          "enum": [
            "queued",
            "processing",
            "requestInProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationStatus"
          }
        },
        "subscriberId": {
          "description": "The subscriber Id  associated with this notification. This is the last identity who touched in the subscription. In case of test notifications it can be the tester if the subscription is not created yet.",
          "type": "string",
          "format": "uuid"
        },
        "subscriptionId": {
          "description": "The subscription id associated with this notification",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "notificationDetails": {
      "type": "object",
      "properties": {
        "completedDate": {
          "description": "Gets or sets the time that this notification was completed (response received from the consumer)",
          "type": "string",
          "format": "date-time"
        },
        "consumerActionId": {
          "description": "Gets or sets this notification detail's consumer action identifier.",
          "type": "string"
        },
        "consumerId": {
          "description": "Gets or sets this notification detail's consumer identifier.",
          "type": "string"
        },
        "consumerInputs": {
          "description": "Gets or sets this notification detail's consumer inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dequeuedDate": {
          "description": "Gets or sets the time that this notification was dequeued for processing",
          "type": "string",
          "format": "date-time"
        },
        "errorDetail": {
          "description": "Gets or sets this notification detail's error detail.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Gets or sets this notification detail's error message.",
          "type": "string"
        },
        "event": {
          "description": "Gets or sets this notification detail's event content.",
          "$ref": "#/definitions/event"
        },
        "eventType": {
          "description": "Gets or sets this notification detail's event type.",
          "type": "string"
        },
        "processedDate": {
          "description": "Gets or sets the time that this notification was finished processing (just before the request is sent to the consumer)",
          "type": "string",
          "format": "date-time"
        },
        "publisherId": {
          "description": "Gets or sets this notification detail's publisher identifier.",
          "type": "string"
        },
        "publisherInputs": {
          "description": "Gets or sets this notification detail's publisher inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "queuedDate": {
          "description": "Gets or sets the time that this notification was queued (created)",
          "type": "string",
          "format": "date-time"
        },
        "request": {
          "description": "Gets or sets this notification detail's request.",
          "type": "string"
        },
        "requestAttempts": {
          "description": "Number of requests attempted to be sent to the consumer",
          "type": "integer",
          "format": "int32"
        },
        "requestDuration": {
          "description": "Duration of the request to the consumer in seconds",
          "type": "number",
          "format": "double"
        },
        "response": {
          "description": "Gets or sets this notification detail's reponse.",
          "type": "string"
        }
      }
    },
    "notificationResultsSummaryDetail": {
      "type": "object",
      "properties": {
        "notificationCount": {
          "description": "Count of notification sent out with a matching result.",
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "description": "Result of the notification",
          "enum": [
            "pending",
            "succeeded",
            "failed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationResult"
          }
        }
      }
    },
    "notificationsQuery": {
      "type": "object",
      "properties": {
        "associatedSubscriptions": {
          "description": "The subscriptions associated with the notifications returned from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/subscription"
          }
        },
        "includeDetails": {
          "description": "If true, we will return all notification history for the query provided; otherwise, the summary is returned.",
          "type": "boolean"
        },
        "maxCreatedDate": {
          "description": "Optional maximum date at which the notification was created",
          "type": "string",
          "format": "date-time"
        },
        "maxResults": {
          "description": "Optional maximum number of overall results to include",
          "type": "integer",
          "format": "int32"
        },
        "maxResultsPerSubscription": {
          "description": "Optional maximum number of results for each subscription. Only takes effect when a list of subscription ids is supplied in the query.",
          "type": "integer",
          "format": "int32"
        },
        "minCreatedDate": {
          "description": "Optional minimum date at which the notification was created",
          "type": "string",
          "format": "date-time"
        },
        "publisherId": {
          "description": "Optional publisher id to restrict the results to",
          "type": "string"
        },
        "results": {
          "description": "Results from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/notification"
          }
        },
        "resultType": {
          "description": "Optional notification result type to filter results to",
          "enum": [
            "pending",
            "succeeded",
            "failed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationResult"
          }
        },
        "status": {
          "description": "Optional notification status to filter results to",
          "enum": [
            "queued",
            "processing",
            "requestInProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.NotificationStatus"
          }
        },
        "subscriptionIds": {
          "description": "Optional list of subscription ids to restrict the results to",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "summary": {
          "description": "Summary of notifications - the count of each result type (success, fail, ..).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationSummary"
          }
        }
      }
    },
    "notificationSummary": {
      "type": "object",
      "properties": {
        "results": {
          "description": "The notification results for this particular subscription.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationResultsSummaryDetail"
          }
        },
        "subscriptionId": {
          "description": "The subscription id associated with this notification",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "publisherEvent": {
      "type": "object",
      "properties": {
        "event": {
          "description": "The event being published",
          "$ref": "#/definitions/event"
        },
        "notificationId": {
          "description": "Gets or sets the id of the notification.",
          "type": "integer",
          "format": "int32"
        },
        "otherResourceVersions": {
          "description": "Gets or sets the array of older supported resource versions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/versionedResource"
          }
        },
        "publisherInputFilters": {
          "description": "Optional publisher-input filters which restricts the set of subscriptions which are triggered by the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/inputFilter"
          }
        }
      }
    },
    "publishEventsRequestData": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/publisherEvent"
          }
        }
      }
    },
    "referenceLinks": {
      "type": "object",
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "resourceContainer": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "description": "Gets or sets the container's base URL, i.e. the URL of the host (collection, application, or deploument) containing the container resource.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the container's specific Id.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Gets or sets the container's name.",
          "type": "string"
        },
        "url": {
          "description": "Gets or sets the container's REST API URL.",
          "type": "string"
        }
      }
    },
    "sessionToken": {
      "type": "object",
      "properties": {
        "error": {
          "description": "The error message in case of error",
          "type": "string"
        },
        "token": {
          "description": "The access token",
          "type": "string"
        },
        "validTo": {
          "description": "The expiration date in UTC",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "subscription": {
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/referenceLinks"
        },
        "actionDescription": {
          "type": "string"
        },
        "consumerActionId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "consumerInputs": {
          "description": "Consumer input values",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/identityRef"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "eventDescription": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "modifiedBy": {
          "$ref": "#/definitions/identityRef"
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "probationRetries": {
          "type": "string",
          "format": "byte"
        },
        "publisherId": {
          "type": "string"
        },
        "publisherInputs": {
          "description": "Publisher input values",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceVersion": {
          "type": "string"
        },
        "scope": {
          "enum": [
            "all",
            "project",
            "team",
            "collection",
            "account",
            "deployment"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.EventScope"
          }
        },
        "status": {
          "enum": [
            "enabled",
            "onProbation",
            "disabledByUser",
            "disabledBySystem"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.SubscriptionStatus"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "subscriptionInputValuesQuery": {
      "type": "object",
      "properties": {
        "inputValues": {
          "description": "The input values to return on input, and the result from the consumer on output.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/inputValues"
          }
        },
        "scope": {
          "description": "The scope at which the properties to query belong",
          "enum": [
            "publisher",
            "consumer"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.SubscriptionInputScope"
          }
        },
        "subscription": {
          "description": "Subscription containing information about the publisher/consumer and the current input values",
          "$ref": "#/definitions/subscription"
        }
      }
    },
    "subscriptionsQuery": {
      "type": "object",
      "properties": {
        "consumerActionId": {
          "description": "Optional consumer action id to restrict the results to (null for any)",
          "type": "string"
        },
        "consumerId": {
          "description": "Optional consumer id to restrict the results to (null for any)",
          "type": "string"
        },
        "consumerInputFilters": {
          "description": "Filter for subscription consumer inputs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/inputFilter"
          }
        },
        "eventType": {
          "description": "Optional event type id to restrict the results to (null for any)",
          "type": "string"
        },
        "publisherId": {
          "description": "Optional publisher id to restrict the results to (null for any)",
          "type": "string"
        },
        "publisherInputFilters": {
          "description": "Filter for subscription publisher inputs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/inputFilter"
          }
        },
        "results": {
          "description": "Results from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/subscription"
          }
        },
        "scope": {
          "description": "Optional scope - default scope is 'project'",
          "enum": [
            "all",
            "project",
            "team",
            "collection",
            "account",
            "deployment"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.ServiceHooks.WebApi.EventScope"
          }
        }
      }
    },
    "versionedResource": {
      "type": "object",
      "properties": {
        "compatibleWith": {
          "description": "Gets or sets the reference to the compatible version.",
          "type": "string"
        },
        "resource": {
          "description": "Gets or sets the resource data.",
          "type": "object"
        },
        "resourceVersion": {
          "description": "Gets or sets the version of the resource data.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '3.1-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}