{
  "swagger": "2.0",
  "info": {
    "title": "Core",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "3.1"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "basePath": "/",
  "tags": [
    {
      "name": "connectedServices"
    },
    {
      "name": "identityMru"
    },
    {
      "name": "members"
    },
    {
      "name": "processes"
    },
    {
      "name": "projectCollections"
    },
    {
      "name": "projectHistory"
    },
    {
      "name": "projects"
    },
    {
      "name": "proxies"
    },
    {
      "name": "teams"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/_apis/core/identitymru/{mruName}": {
      "post": {
        "tags": [
          "identityMru"
        ],
        "summary": "CreateIdentityMru",
        "description": "",
        "operationId": "createIdentityMru",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityData"
            }
          },
          {
            "in": "path",
            "name": "mruName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "identityMru"
        ],
        "summary": "DeleteIdentityMru",
        "description": "",
        "operationId": "deleteIdentityMru",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityData"
            }
          },
          {
            "in": "path",
            "name": "mruName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "identityMru"
        ],
        "summary": "GetIdentityMru",
        "description": "",
        "operationId": "getIdentityMru",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "mruName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/identityRef"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "identityMru"
        ],
        "summary": "UpdateIdentityMru",
        "description": "",
        "operationId": "updateIdentityMru",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityData"
            }
          },
          {
            "in": "path",
            "name": "mruName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/process/processes": {
      "get": {
        "tags": [
          "processes"
        ],
        "summary": "GetProcesses",
        "description": "",
        "operationId": "getProcesses",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/process"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work"
            ]
          }
        ]
      }
    },
    "/_apis/process/processes/{processId}": {
      "get": {
        "tags": [
          "processes"
        ],
        "summary": "GetProcessById",
        "description": "Retrieve process by id",
        "operationId": "getProcessById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "processId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/process"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work"
            ]
          }
        ]
      }
    },
    "/_apis/projectcollections": {
      "get": {
        "tags": [
          "projectCollections"
        ],
        "summary": "GetProjectCollections",
        "description": "Get project collection references for this application.",
        "operationId": "getProjectCollections",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/teamProjectCollectionReference"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile"
            ]
          }
        ]
      }
    },
    "/_apis/projectcollections/{collectionId}": {
      "get": {
        "tags": [
          "projectCollections"
        ],
        "summary": "GetProjectCollection",
        "description": "Get project collection with the specified id or name.",
        "operationId": "getProjectCollection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/teamProjectCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile"
            ]
          }
        ]
      }
    },
    "/_apis/projecthistory": {
      "get": {
        "tags": [
          "projectHistory"
        ],
        "summary": "GetProjectHistory",
        "description": "",
        "operationId": "getProjectHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "minRevision",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/teamProjectReference"
              }
            }
          }
        }
      }
    },
    "/_apis/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "GetProjects",
        "description": "Get project references with the specified state",
        "operationId": "getProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "stateFilter",
            "description": "Filter on team projects in a specific team project state (default: WellFormed).",
            "required": false,
            "type": "string",
            "format": "projectState"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/teamProjectReference"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile",
              "vso.project"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "QueueCreateProject",
        "description": "Queue a project creation.",
        "operationId": "queueCreateProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The project to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teamProject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/operationReference"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project_manage"
            ]
          }
        ]
      }
    },
    "/_apis/projects/{projectId}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "GetProject",
        "description": "Get project with the specified id or name, optionally including capabilities.",
        "operationId": "getProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeCapabilities",
            "description": "Include capabilities (such as source control) in the team project result (default: false).",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeHistory",
            "description": "Search within renamed projects (that had such name in the past).",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/teamProject"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile",
              "vso.project"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "QueueDeleteProject",
        "description": "Queue a project deletion.",
        "operationId": "queueDeleteProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "The project id of the project to delete.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/operationReference"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project_manage"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "projects"
        ],
        "summary": "UpdateProject",
        "description": "Update an existing project's name, abbreviation, or description.",
        "operationId": "updateProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The updates for the project.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teamProject"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "The project id of the project to update.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/operationReference"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project_write"
            ]
          }
        ]
      }
    },
    "/_apis/projects/{projectId}/connectedservices": {
      "post": {
        "tags": [
          "connectedServices"
        ],
        "summary": "CreateConnectedService",
        "description": "",
        "operationId": "createConnectedService",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webApiConnectedServiceDetails"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/webApiConnectedService"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "connectedServices"
        ],
        "summary": "GetConnectedServices",
        "description": "",
        "operationId": "getConnectedServices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "kind",
            "description": "",
            "required": false,
            "type": "string",
            "format": "connectedServiceKind"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/webApiConnectedService"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile",
              "vso.project"
            ]
          }
        ]
      }
    },
    "/_apis/projects/{projectId}/connectedservices/{name}": {
      "get": {
        "tags": [
          "connectedServices"
        ],
        "summary": "GetConnectedServiceDetails",
        "description": "",
        "operationId": "getConnectedServiceDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "name",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/webApiConnectedServiceDetails"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile",
              "vso.project"
            ]
          }
        ]
      }
    },
    "/_apis/projects/{projectId}/teams": {
      "post": {
        "tags": [
          "teams"
        ],
        "summary": "CreateTeam",
        "description": "Creates a team",
        "operationId": "createTeam",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The team data used to create the team.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webApiTeam"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "The name or id (GUID) of the team project in which to create the team.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/webApiTeam"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "GetTeams",
        "description": "",
        "operationId": "getTeams",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/webApiTeam"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile",
              "vso.project"
            ]
          }
        ]
      }
    },
    "/_apis/projects/{projectId}/teams/{teamId}": {
      "delete": {
        "tags": [
          "teams"
        ],
        "summary": "DeleteTeam",
        "description": "Deletes a team",
        "operationId": "deleteTeam",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "The name or id (GUID) of the team project containing the team to delete.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "teamId",
            "description": "The name of id of the team to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "GetTeam",
        "description": "Gets a team",
        "operationId": "getTeam",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "teamId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/webApiTeam"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile",
              "vso.project"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "teams"
        ],
        "summary": "UpdateTeam",
        "description": "Updates a team's name and/or description",
        "operationId": "updateTeam",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webApiTeam"
            }
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "The name or id (GUID) of the team project containing the team to update.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "teamId",
            "description": "The name of id of the team to update.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/webApiTeam"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project_write"
            ]
          }
        ]
      }
    },
    "/_apis/projects/{projectId}/teams/{teamId}/members": {
      "get": {
        "tags": [
          "members"
        ],
        "summary": "GetTeamMembers",
        "description": "",
        "operationId": "getTeamMembers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "teamId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/identityRef"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile",
              "vso.project"
            ]
          }
        ]
      }
    },
    "/_apis/proxies": {
      "put": {
        "tags": [
          "proxies"
        ],
        "summary": "CreateOrUpdateProxy",
        "description": "",
        "operationId": "createOrUpdateProxy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/proxy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/proxy"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "proxies"
        ],
        "summary": "DeleteProxy",
        "description": "",
        "operationId": "deleteProxy",
        "parameters": [
          {
            "in": "query",
            "name": "proxyUrl",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "site",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "proxies"
        ],
        "summary": "GetProxies",
        "description": "",
        "operationId": "getProxies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "proxyUrl",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/proxy"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "identityData": {
      "type": "object",
      "properties": {
        "identityIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "identityDescriptor": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "identityType": {
          "type": "string"
        }
      }
    },
    "identityRef": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "operationReference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "type": "string",
          "format": "operationStatus"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "process": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/processReference"
        }
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "isDefault": {
          "type": "boolean"
        },
        "type": {
          "enum": [
            "system",
            "custom",
            "inherited"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.Core.WebApi.ProcessType"
          }
        }
      }
    },
    "processReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "projectInfo": {
      "type": "object",
      "properties": {
        "abbreviation": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/projectProperty"
          }
        },
        "revision": {
          "description": "Current revision of the project",
          "type": "integer",
          "format": "int64"
        },
        "state": {
          "enum": [
            "deleting",
            "new",
            "wellFormed",
            "createPending",
            "all",
            "unchanged",
            "deleted"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.Core.WebApi.ProjectState"
          }
        },
        "uri": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "projectMessage": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/projectInfo"
        },
        "projectChangeType": {
          "enum": [
            "modified",
            "deleted",
            "added"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.Core.WebApi.ProjectChangeType"
          }
        }
      }
    },
    "projectProperty": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "proxy": {
      "type": "object",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/proxyAuthorization"
        },
        "description": {
          "description": "This is a description string",
          "type": "string"
        },
        "friendlyName": {
          "description": "The friendly name of the server",
          "type": "string"
        },
        "globalDefault": {
          "type": "boolean"
        },
        "site": {
          "description": "This is a string representation of the site that the proxy server is located in (e.g. \"NA-WA-RED\")",
          "type": "string"
        },
        "siteDefault": {
          "type": "boolean"
        },
        "url": {
          "description": "The URL of the proxy server",
          "type": "string"
        }
      }
    },
    "proxyAuthorization": {
      "type": "object",
      "properties": {
        "authorizationUrl": {
          "description": "Gets or sets the endpoint used to obtain access tokens from the configured token service.",
          "type": "string"
        },
        "clientId": {
          "description": "Gets or sets the client identifier for this proxy.",
          "type": "string",
          "format": "uuid"
        },
        "identity": {
          "description": "Gets or sets the user identity to authorize for on-prem.",
          "$ref": "#/definitions/identityDescriptor"
        },
        "publicKey": {
          "description": "Gets or sets the public key used to verify the identity of this proxy. Only specify on hosted.",
          "$ref": "#/definitions/publicKey"
        }
      }
    },
    "publicKey": {
      "type": "object",
      "properties": {
        "exponent": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "modulus": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "referenceLinks": {
      "type": "object",
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "teamContext": {
      "type": "object",
      "properties": {
        "project": {
          "description": "The team project Id or name.  Ignored if ProjectId is set.",
          "type": "string"
        },
        "projectId": {
          "description": "The Team Project ID.  Required if Project is not set.",
          "type": "string",
          "format": "uuid"
        },
        "team": {
          "description": "The Team Id or name.  Ignored if TeamId is set.",
          "type": "string"
        },
        "teamId": {
          "description": "The Team Id",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "teamProject": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/teamProjectReference"
        }
      ],
      "properties": {
        "_links": {
          "description": "The links to other objects related to this object.",
          "$ref": "#/definitions/referenceLinks"
        },
        "capabilities": {
          "description": "Set of capabilities this project has (such as process template & version control).",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "defaultTeam": {
          "description": "The shallow ref to the default team.",
          "$ref": "#/definitions/webApiTeamRef"
        }
      }
    },
    "teamProjectCollection": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/teamProjectCollectionReference"
        }
      ],
      "properties": {
        "_links": {
          "description": "The links to other objects related to this object.",
          "$ref": "#/definitions/referenceLinks"
        },
        "description": {
          "description": "Project collection description.",
          "type": "string"
        },
        "state": {
          "description": "Project collection state.",
          "type": "string"
        }
      }
    },
    "teamProjectCollectionReference": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Collection Id.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Collection Name.",
          "type": "string"
        },
        "url": {
          "description": "Collection REST Url.",
          "type": "string"
        }
      }
    },
    "teamProjectReference": {
      "type": "object",
      "properties": {
        "abbreviation": {
          "description": "Project abbreviation.",
          "type": "string"
        },
        "description": {
          "description": "The project's description (if any).",
          "type": "string"
        },
        "id": {
          "description": "Project identifier.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Project name.",
          "type": "string"
        },
        "revision": {
          "description": "Project revision.",
          "type": "integer",
          "format": "int64"
        },
        "state": {
          "description": "Project state.",
          "enum": [
            "deleting",
            "new",
            "wellFormed",
            "createPending",
            "all",
            "unchanged",
            "deleted"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.Core.WebApi.ProjectState"
          }
        },
        "url": {
          "description": "Url to the full version of the object.",
          "type": "string"
        }
      }
    },
    "temporaryDataCreatedDTO": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/temporaryDataDTO"
        }
      ],
      "properties": {
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "temporaryDataDTO": {
      "type": "object",
      "properties": {
        "expirationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "origin": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      }
    },
    "webApiConnectedService": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/webApiConnectedServiceRef"
        }
      ],
      "properties": {
        "authenticatedBy": {
          "description": "The user who did the OAuth authentication to created this service",
          "$ref": "#/definitions/identityRef"
        },
        "description": {
          "description": "Extra description on the service.",
          "type": "string"
        },
        "friendlyName": {
          "description": "Friendly Name of service connection",
          "type": "string"
        },
        "id": {
          "description": "Id/Name of the connection service. For Ex: Subscription Id for Azure Connection",
          "type": "string"
        },
        "kind": {
          "description": "The kind of service.",
          "type": "string"
        },
        "project": {
          "description": "The project associated with this service",
          "$ref": "#/definitions/teamProjectReference"
        },
        "serviceUri": {
          "description": "Optional uri to connect directly to the service such as https://windows.azure.com",
          "type": "string"
        }
      }
    },
    "webApiConnectedServiceDetails": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/webApiConnectedServiceRef"
        }
      ],
      "properties": {
        "connectedServiceMetaData": {
          "description": "Meta data for service connection",
          "$ref": "#/definitions/webApiConnectedService"
        },
        "credentialsXml": {
          "description": "Credential info",
          "type": "string"
        },
        "endPoint": {
          "description": "Optional uri to connect directly to the service such as https://windows.azure.com",
          "type": "string"
        }
      }
    },
    "webApiConnectedServiceRef": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "webApiCreateTagRequestData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "webApiProject": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/teamProjectReference"
        }
      ],
      "properties": {
        "capabilities": {
          "description": "Set of capabilities this project has",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "collection": {
          "description": "Reference to collection which contains this project",
          "$ref": "#/definitions/webApiProjectCollectionRef"
        },
        "defaultTeam": {
          "description": "Default team for this project",
          "$ref": "#/definitions/webApiTeamRef"
        }
      }
    },
    "webApiProjectCollection": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/webApiProjectCollectionRef"
        }
      ],
      "properties": {
        "description": {
          "description": "Project collection description",
          "type": "string"
        },
        "state": {
          "description": "Project collection state",
          "type": "string"
        }
      }
    },
    "webApiProjectCollectionRef": {
      "type": "object",
      "properties": {
        "collectionUrl": {
          "description": "Collection Tfs Url (Host Url)",
          "type": "string"
        },
        "id": {
          "description": "Collection Guid",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Collection Name",
          "type": "string"
        },
        "url": {
          "description": "Collection REST Url",
          "type": "string"
        }
      }
    },
    "webApiTagDefinition": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "webApiTeam": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/webApiTeamRef"
        }
      ],
      "properties": {
        "description": {
          "description": "Team description",
          "type": "string"
        },
        "identityUrl": {
          "description": "Identity REST API Url to this team",
          "type": "string"
        }
      }
    },
    "webApiTeamRef": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Team (Identity) Guid. A Team Foundation ID.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Team name",
          "type": "string"
        },
        "url": {
          "description": "Team REST API Url",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '3.1-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
     },
     "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.profile": "Grants the ability to read your profile, accounts, collections, projects, teams, and other top-level organizational artifacts.",
        "vso.project": "Grants the ability to read projects and teams.",
        "vso.project_manage": "Grants the ability to create, read, update, and delete projects and teams.",
        "vso.project_write": "Grants the ability to read and update projects and teams.",
        "vso.work": "Grants the ability to read work items, queries, boards, area and iterations paths, and other work item tracking related metadata. Also grants the ability to execute queries and to receive notifications about work item events via service hooks."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}