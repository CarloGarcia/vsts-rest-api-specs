{
  "swagger": "2.0",
  "info": {
    "title": "Notification",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "3.1"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "basePath": "/",
  "tags": [
    {
      "name": "batchNotificationOperations"
    },
    {
      "name": "events"
    },
    {
      "name": "eventTypeFieldValuesQuery"
    },
    {
      "name": "eventTypes"
    },
    {
      "name": "follows"
    },
    {
      "name": "statisticsQuery"
    },
    {
      "name": "subscriptionQuery"
    },
    {
      "name": "subscriptions"
    },
    {
      "name": "subscriptionTemplates"
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "pat": {
      "type": "basic",
      "description": "Personal access token"
    }
  },
  "security": [
    {
      "pat": []
    }
  ], 
  "paths": {
    "/_apis/notification/batchnotificationoperations": {
      "post": {
        "tags": [
          "batchNotificationOperations"
        ],
        "summary": "PerformBatchNotificationOperations",
        "description": "",
        "operationId": "performBatchNotificationOperations",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/batchNotificationOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/notification/events": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "PublishEvent",
        "description": "Publish an event.",
        "operationId": "publishEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vssNotificationEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/vssNotificationEvent"
            }
          }
        }
      }
    },
    "/_apis/notification/eventtypes": {
      "get": {
        "tags": [
          "eventTypes"
        ],
        "summary": "ListEventTypes",
        "description": "List available event types for this service. Optionally filter by event types for the specified publisher.",
        "operationId": "listEventTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "publisherId",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notificationEventType"
              }
            }
          }
        }
      }
    },
    "/_apis/notification/eventtypes/{eventType}": {
      "get": {
        "tags": [
          "eventTypes"
        ],
        "summary": "GetEventType",
        "description": "Get a specific event type.",
        "operationId": "getEventType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "eventType",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notificationEventType"
            }
          }
        }
      }
    },
    "/_apis/notification/eventTypes/{eventType}/fieldValuesQuery": {
      "post": {
        "tags": [
          "eventTypeFieldValuesQuery"
        ],
        "summary": "QueryEventTypes",
        "description": "",
        "operationId": "queryEventTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fieldValuesQuery"
            }
          },
          {
            "in": "path",
            "name": "eventType",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notificationEventField"
              }
            }
          }
        }
      }
    },
    "/_apis/notification/follows": {
      "post": {
        "tags": [
          "follows"
        ],
        "summary": "FollowArtifact",
        "description": "",
        "operationId": "followArtifact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/artifactSubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/artifactSubscription"
            }
          }
        }
      },
      "get": {
        "tags": [
          "follows"
        ],
        "summary": "GetArtifactSubscription",
        "description": "",
        "operationId": "getArtifactSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "artifactType",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "artifactId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/artifactSubscription"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "follows"
        ],
        "summary": "UnfollowArtifact",
        "description": "",
        "operationId": "unfollowArtifact",
        "parameters": [
          {
            "in": "query",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/notification/statisticsquery": {
      "post": {
        "tags": [
          "statisticsQuery"
        ],
        "summary": "QueryStatistics",
        "description": "",
        "operationId": "queryStatistics",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationStatisticsQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notificationStatistic"
              }
            }
          }
        }
      }
    },
    "/_apis/notification/subscriptionquery": {
      "post": {
        "tags": [
          "subscriptionQuery"
        ],
        "summary": "QuerySubscriptions",
        "description": "Query for notification subscriptions.",
        "operationId": "querySubscriptions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscriptionQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notificationSubscription"
              }
            }
          }
        }
      }
    },
    "/_apis/notification/subscriptions": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "CreateSubscription",
        "description": "Create a notification subscription.",
        "operationId": "createSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationSubscriptionCreateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notificationSubscription"
            }
          }
        }
      },
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "ListSubscriptions",
        "description": "Get a list of subscriptions for the specified subscriber. If no subscriber is specified, subscriptions for the calling user are returned.",
        "operationId": "listSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "subscriber",
            "description": "",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "queryFlags",
            "description": "",
            "required": false,
            "type": "string",
            "format": "subscriptionQueryFlags"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notificationSubscription"
              }
            }
          }
        }
      }
    },
    "/_apis/notification/subscriptions/{subscriptionId}": {
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "summary": "DeleteSubscription",
        "description": "Delete a notification subscription.",
        "operationId": "deleteSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "GetSubscription",
        "description": "Get a notification subscription.",
        "operationId": "getSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queryFlags",
            "description": "",
            "required": false,
            "type": "string",
            "format": "subscriptionQueryFlags"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notificationSubscription"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "subscriptions"
        ],
        "summary": "UpdateSubscription",
        "description": "Update an existing notification subscription.",
        "operationId": "updateSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationSubscriptionUpdateParameters"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notificationSubscription"
            }
          }
        }
      }
    },
    "/_apis/notification/subscriptiontemplates": {
      "get": {
        "tags": [
          "subscriptionTemplates"
        ],
        "summary": "GetSubscriptionTemplates",
        "description": "",
        "operationId": "getSubscriptionTemplates",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notificationSubscriptionTemplate"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "artifactFilter": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseSubscriptionFilter"
        }
      ],
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "artifactType": {
          "type": "string"
        },
        "artifactUri": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "artifactSubscription": {
      "type": "object",
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "artifactType": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "baseSubscriptionFilter": {
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "batchNotificationOperation": {
      "type": "object",
      "properties": {
        "notificationOperation": {
          "enum": [
            "none",
            "suspendUnprocessed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.NotificationOperation"
          }
        },
        "notificationQueryConditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationQueryCondition"
          }
        }
      }
    },
    "eventScope": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "expressionFilterClause": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "index": {
          "description": "The order in which this clause appeared in the filter query",
          "type": "integer",
          "format": "int32"
        },
        "logicalOperator": {
          "description": "Logical Operator 'AND', 'OR' or NULL (only for the first clause in the filter)",
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "expressionFilterGroup": {
      "type": "object",
      "properties": {
        "end": {
          "description": "The index of the last FilterClause in this group",
          "type": "integer",
          "format": "int32"
        },
        "level": {
          "description": "Level of the group, since groups can be nested for each nested group the level will increase by 1",
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "description": "The index of the first FilterClause in this group",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "expressionFilterModel": {
      "type": "object",
      "properties": {
        "clauses": {
          "description": "Flat list of clauses in this subscription",
          "type": "array",
          "items": {
            "$ref": "#/definitions/expressionFilterClause"
          }
        },
        "groups": {
          "description": "Grouping of clauses in the subscription",
          "type": "array",
          "items": {
            "$ref": "#/definitions/expressionFilterGroup"
          }
        },
        "maxGroupLevel": {
          "description": "Max depth of the Subscription tree",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "fieldInputValues": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/inputValues"
        }
      ],
      "properties": {
        "operators": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "fieldValuesQuery": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/inputValuesQuery"
        }
      ],
      "properties": {
        "inputValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fieldInputValues"
          }
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "identityRef": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "inputValues": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "error": {
          "type": "string",
          "format": "inputValuesError"
        },
        "inputId": {
          "type": "string"
        },
        "isDisabled": {
          "type": "boolean"
        },
        "isLimitedToPossibleValues": {
          "type": "boolean"
        },
        "isReadOnly": {
          "type": "boolean"
        },
        "possibleValues": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "inputValue"
          }
        }
      }
    },
    "inputValuesQuery": {
      "type": "object",
      "properties": {
        "currentValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inputValues"
          }
        },
        "resource": {
          "type": "object"
        }
      }
    },
    "iSubscriptionChannel": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "iSubscriptionFilter": {
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "notificationEventField": {
      "type": "object",
      "properties": {
        "fieldType": {
          "description": "Gets or sets the type of this field.",
          "$ref": "#/definitions/notificationEventFieldType"
        },
        "id": {
          "description": "Gets or sets the unique identifier of this field.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the name of this field.",
          "type": "string"
        },
        "path": {
          "description": "Gets or sets the path to the field in the event object. This path can be either Json Path or XPath, depending on if the event will be serialized into Json or XML",
          "type": "string"
        },
        "supportedScopes": {
          "description": "Gets or sets the scopes that this field supports. If not specified then the event type scopes apply.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "notificationEventFieldType": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the unique identifier of this field type.",
          "type": "string"
        },
        "operatorConstraints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/operatorConstraint"
          }
        },
        "operators": {
          "description": "Gets or sets the list of operators that this type supports.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "description": "Gets or sets the value definition of this field like the getValuesMethod and template to display in the UI",
          "$ref": "#/definitions/valueDefinition"
        }
      }
    },
    "notificationEventPublisher": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "subscriptionManagementInfo": {
          "$ref": "#/definitions/subscriptionManagement"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "notificationEventRole": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets an Id for that role, this id is used by the event.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the Name for that role, this name is used for UI display.",
          "type": "string"
        }
      }
    },
    "notificationEventType": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/notificationEventTypeCategory"
        },
        "color": {
          "description": "Gets or sets the color representing this event type. Example: rgb(128,245,211) or #fafafa",
          "type": "string"
        },
        "customSubscriptionsAllowed": {
          "type": "boolean"
        },
        "eventPublisher": {
          "$ref": "#/definitions/notificationEventPublisher"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/notificationEventField"
          }
        },
        "hasInitiator": {
          "type": "boolean"
        },
        "icon": {
          "description": "Gets or sets the icon representing this event type. Can be a URL or a CSS class. Example: css://some-css-class",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the unique identifier of this event definition.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the name of this event definition.",
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationEventRole"
          }
        },
        "supportedScopes": {
          "description": "Gets or sets the scopes that this event type supports",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "description": "Gets or sets the rest end point to get this event type details (fields, fields types)",
          "type": "string"
        }
      }
    },
    "notificationEventTypeCategory": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the unique identifier of this category.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the friendly name of this category.",
          "type": "string"
        }
      }
    },
    "notificationQueryCondition": {
      "type": "object",
      "properties": {
        "eventInitiator": {
          "type": "string",
          "format": "uuid"
        },
        "eventType": {
          "type": "string"
        },
        "subscriber": {
          "type": "string",
          "format": "uuid"
        },
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "notificationStatistic": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "hitCount": {
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "type": "string"
        },
        "type": {
          "enum": [
            "notificationBySubscription",
            "eventsByEventType",
            "notificationByEventType",
            "eventsByEventTypePerUser",
            "notificationByEventTypePerUser",
            "events",
            "notifications",
            "hourlyRangeStart",
            "hourlyNotificationBySubscription",
            "hourlyEventsByEventTypePerUser",
            "hourlyEvents",
            "hourlyNotifications"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.NotificationStatisticType"
          }
        },
        "user": {
          "$ref": "#/definitions/identityRef"
        }
      }
    },
    "notificationStatisticsQuery": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationStatisticsQueryConditions"
          }
        }
      }
    },
    "notificationStatisticsQueryConditions": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "hitCountMinimum": {
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "type": "string"
        },
        "type": {
          "enum": [
            "notificationBySubscription",
            "eventsByEventType",
            "notificationByEventType",
            "eventsByEventTypePerUser",
            "notificationByEventTypePerUser",
            "events",
            "notifications",
            "hourlyRangeStart",
            "hourlyNotificationBySubscription",
            "hourlyEventsByEventTypePerUser",
            "hourlyEvents",
            "hourlyNotifications"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.NotificationStatisticType"
          }
        },
        "user": {
          "$ref": "#/definitions/identityRef"
        }
      }
    },
    "notificationSubscription": {
      "type": "object",
      "properties": {
        "_links": {
          "description": "Links to related resources, APIs, and views for the subscription.",
          "$ref": "#/definitions/referenceLinks"
        },
        "adminConfig": {
          "description": "Admin-managed settings for the subscription. Only applies when the subscriber is a group.",
          "$ref": "#/definitions/subscriptionAdminConfig"
        },
        "channel": {
          "description": "Channel for delivering notifications triggered by the subscription.",
          "$ref": "#/definitions/iSubscriptionChannel"
        },
        "description": {
          "description": "Description of the subscription. Typically describes filter criteria which helps identity the subscription.",
          "type": "string"
        },
        "filter": {
          "description": "Matching criteria for the subscription.",
          "$ref": "#/definitions/iSubscriptionFilter"
        },
        "flags": {
          "description": "Read-only indicators that further describe the subscription.",
          "enum": [
            "none",
            "groupSubscription",
            "contributedSubscription",
            "canOptOut"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionFlags"
          }
        },
        "id": {
          "description": "Subscription identifier.",
          "type": "string"
        },
        "lastModifiedBy": {
          "description": "User that last modified (or created) the subscription.",
          "$ref": "#/definitions/identityRef"
        },
        "modifiedDate": {
          "description": "Date when the subscription was last modified. If the subscription has not been updated since it was created, this value will indicate when the subscription was created.",
          "type": "string",
          "format": "date-time"
        },
        "scope": {
          "description": "The container in which events must be published from in order to be matched by the subscription. If empty, the scope is the current host (typically an account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.",
          "$ref": "#/definitions/subscriptionScope"
        },
        "status": {
          "description": "Status of the subscription. Typically indicates whether the subscription is enabled or not.",
          "enum": [
            "jailedByNotificationsVolume",
            "pendingDeletion",
            "disabledMissingIdentity",
            "disabledInvalidRoleExpression",
            "disabledInvalidPathClause",
            "disabledAsDuplicateOfDefault",
            "disabledByAdmin",
            "disabledByUser",
            "enabled",
            "enabledOnProbation"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionStatus"
          }
        },
        "statusMessage": {
          "description": "Message that provides more details about the status of the subscription.",
          "type": "string"
        },
        "subscriber": {
          "description": "User or group that will receive notifications for events matching the subscription's filter criteria.",
          "$ref": "#/definitions/identityRef"
        },
        "url": {
          "description": "REST API URL of the subscriotion.",
          "type": "string"
        },
        "userConfig": {
          "description": "User-managed settings for the subscription. Only applies when the subscriber is a group. Typically used to indicate whether the calling user is opted in or out of a group subscription.",
          "$ref": "#/definitions/subscriptionUserConfig"
        }
      }
    },
    "notificationSubscriptionCreateParameters": {
      "type": "object",
      "properties": {
        "channel": {
          "description": "Channel for delivering notifications triggered by the new subscription.",
          "$ref": "#/definitions/iSubscriptionChannel"
        },
        "description": {
          "description": "Brief description for the new subscription. Typically describes filter criteria which helps identity the subscription.",
          "type": "string"
        },
        "filter": {
          "description": "Matching criteria for the new subscription.",
          "$ref": "#/definitions/iSubscriptionFilter"
        },
        "scope": {
          "description": "The container in which events must be published from in order to be matched by the new subscription. If not specified, defaults to the current host (typically an account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.",
          "$ref": "#/definitions/subscriptionScope"
        },
        "subscriber": {
          "description": "User or group that will receive notifications for events matching the subscription's filter criteria. If not specified, defaults to the calling user.",
          "$ref": "#/definitions/identityRef"
        }
      }
    },
    "notificationSubscriptionsViewData": {
      "type": "object",
      "properties": {
        "defaultServiceInstanceType": {
          "description": "Default service instance type, currently it is Tfs, it used if there is no publisher passed",
          "type": "string"
        },
        "eventTypes": {
          "description": "Supported  event types info, with their fields and field types",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/notificationEventType"
          }
        },
        "hasManagePermission": {
          "description": "Indicates whether the current user generally has permissions to manage (create, delete, etc) subscriptions in the view",
          "type": "boolean"
        },
        "hasViewPermission": {
          "description": "Indicates whether the current user generally has permissions to see subscriptions in the view",
          "type": "boolean"
        },
        "isAdminMode": {
          "description": "Is the subscription view being presented for the purpose of administration (not for managing personal subscriptions)",
          "type": "boolean"
        },
        "mapCategoryIdToCategoryName": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mapCategoryIdToSubscriptionTemplates": {
          "type": "object",
          "additionalProperties": {
            "type": "array"
          }
        },
        "mapEventTypeToCategoryId": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mapEventTypeToPublisherId": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "publishers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/notificationEventPublisher"
          }
        },
        "scopes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/subscriptionScope"
          }
        },
        "subscriber": {
          "description": "Subscriber to use when creating new subscriptions in the view",
          "$ref": "#/definitions/identityRef"
        },
        "subscriberEmail": {
          "type": "string"
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationSubscription"
          }
        }
      }
    },
    "notificationSubscriptionTemplate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "filter": {
          "$ref": "#/definitions/iSubscriptionFilter"
        },
        "id": {
          "type": "string"
        },
        "notificationEventInformation": {
          "$ref": "#/definitions/notificationEventType"
        },
        "type": {
          "enum": [
            "user",
            "team",
            "both",
            "none"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionTemplateType"
          }
        }
      }
    },
    "notificationSubscriptionUpdateParameters": {
      "type": "object",
      "properties": {
        "adminConfig": {
          "description": "Admin-managed settings for the subscription. Only applies to subscriptions where the subscriber is a group.",
          "$ref": "#/definitions/subscriptionAdminConfig"
        },
        "channel": {
          "description": "Channel for delivering notifications triggered by the subscription.",
          "$ref": "#/definitions/iSubscriptionChannel"
        },
        "description": {
          "description": "Updated description for the subscription. Typically describes filter criteria which helps identity the subscription.",
          "type": "string"
        },
        "filter": {
          "description": "Matching criteria for the subscription.",
          "$ref": "#/definitions/iSubscriptionFilter"
        },
        "scope": {
          "description": "The container in which events must be published from in order to be matched by the new subscription. If not specified, defaults to the current host (typically the current account or project collection). For example, a subscription scoped to project A will not produce notifications for events published from project B.",
          "$ref": "#/definitions/subscriptionScope"
        },
        "status": {
          "description": "Updated status for the subscription. Typically used to enable or disable a subscription.",
          "enum": [
            "jailedByNotificationsVolume",
            "pendingDeletion",
            "disabledMissingIdentity",
            "disabledInvalidRoleExpression",
            "disabledInvalidPathClause",
            "disabledAsDuplicateOfDefault",
            "disabledByAdmin",
            "disabledByUser",
            "enabled",
            "enabledOnProbation"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionStatus"
          }
        },
        "statusMessage": {
          "description": "Optional message that provides more details about the updated status.",
          "type": "string"
        },
        "subscriber": {
          "description": "User or group that will receive notifications for events matching the subscription's filter criteria.",
          "$ref": "#/definitions/identityRef"
        },
        "userConfig": {
          "description": "User-managed settings for the subscription. Only applies to subscriptions where the subscriber is a group. Typically used to opt-in or opt-out a user from a group subscription.",
          "$ref": "#/definitions/subscriptionUserConfig"
        }
      }
    },
    "operatorConstraint": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string"
        },
        "supportedScopes": {
          "description": "Gets or sets the list of scopes that this type supports.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "referenceLinks": {
      "type": "object",
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "subscriptionAdminConfig": {
      "type": "object",
      "properties": {
        "blockUserOptOut": {
          "description": "If true, members of the group subscribed to the associated subscription cannot opt (choose not to get notified)",
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "subscriptionChannelWithAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "useCustomAddress": {
          "type": "boolean"
        }
      }
    },
    "subscriptionManagement": {
      "type": "object",
      "properties": {
        "serviceInstanceType": {
          "type": "string",
          "format": "uuid"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "subscriptionQuery": {
      "type": "object",
      "properties": {
        "conditions": {
          "description": "One or more conditions to query on. If more than 2 conditions are specified, the combined results of each condition is returned (i.e. conditions are logically OR'ed).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/subscriptionQueryCondition"
          }
        },
        "queryFlags": {
          "description": "Flags the refine the types of subscriptions that will be returned from the query.",
          "enum": [
            "none",
            "includeAllGroupSubscriptions",
            "includeInvalidSubscriptions",
            "includeDeletedSubscriptions",
            "includeFilterDetails",
            "alwaysReturnBasicInformation",
            "includeAllSubscriptions"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionQueryFlags"
          }
        }
      }
    },
    "subscriptionQueryCondition": {
      "type": "object",
      "properties": {
        "filter": {
          "description": "Filter conditions that matching subscriptions must have. Typically only the filter's type and event type are used for matching.",
          "$ref": "#/definitions/iSubscriptionFilter"
        },
        "scope": {
          "description": "Scope that matching subscriptions must have.",
          "type": "string"
        },
        "subscriber": {
          "description": "ID of the subscriber (user or group) that matching subscriptions must be subscribed to.",
          "type": "string",
          "format": "uuid"
        },
        "subscriptionId": {
          "description": "ID of the subscription to query for.",
          "type": "string"
        },
        "subscriptionType": {
          "enum": [
            "default",
            "shared"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Notifications.WebApi.SubscriptionType"
          }
        }
      }
    },
    "subscriptionScope": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/eventScope"
        }
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "subscriptionStatisticViewData": {
      "type": "object",
      "properties": {
        "events": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/notificationEventType"
          }
        },
        "isAdmin": {
          "type": "boolean"
        },
        "statistics": {
          "type": "object",
          "additionalProperties": {
            "type": "array"
          }
        },
        "subscriptions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/notificationSubscription"
          }
        }
      }
    },
    "subscriptionUserConfig": {
      "type": "object",
      "properties": {
        "optedIn": {
          "description": "Indicates whether the user will receive notifications for the associated group subscription.",
          "type": "boolean"
        }
      }
    },
    "valueDefinition": {
      "type": "object",
      "properties": {
        "dataSource": {
          "description": "Gets or sets the data source.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "endPoint": {
          "description": "Gets or sets the rest end point.",
          "type": "string"
        },
        "resultTemplate": {
          "description": "Gets or sets the result template.",
          "type": "string"
        }
      }
    },
    "vssNotificationEvent": {
      "type": "object",
      "properties": {
        "actors": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "eventActor"
          }
        },
        "artifactUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "data": {
          "type": "object"
        },
        "eventType": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventScope"
          }
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '3.1-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}