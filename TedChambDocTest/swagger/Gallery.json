{
  "swagger": "2.0",
  "info": {
    "title": "Gallery",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "3.2"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "basePath": "/",
  "tags": [
    {
      "name": "accounts"
    },
    {
      "name": "accountsbyname"
    },
    {
      "name": "acquisitionoptions"
    },
    {
      "name": "acquisitionrequests"
    },
    {
      "name": "assetbyname"
    },
    {
      "name": "assets"
    },
    {
      "name": "authenticatedasset"
    },
    {
      "name": "azurepublisher"
    },
    {
      "name": "categories"
    },
    {
      "name": "certificates"
    },
    {
      "name": "events"
    },
    {
      "name": "extensionquery"
    },
    {
      "name": "extensions"
    },
    {
      "name": "extensionValidator"
    },
    {
      "name": "package"
    },
    {
      "name": "privateasset"
    },
    {
      "name": "publisherquery"
    },
    {
      "name": "publishers"
    },
    {
      "name": "qna"
    },
    {
      "name": "reports"
    },
    {
      "name": "reviews"
    },
    {
      "name": "securedCategories"
    },
    {
      "name": "settings"
    },
    {
      "name": "signingkey"
    },
    {
      "name": "statistics"
    },
    {
      "name": "stats"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/_apis/gallery/acquisitionoptions/{itemId}": {
      "get": {
        "tags": [
          "acquisitionoptions"
        ],
        "summary": "GetAcquisitionOptions",
        "description": "",
        "operationId": "getAcquisitionOptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "installationTarget",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "testCommerce",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "isFreeOrTrialInstall",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AcquisitionOptions"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_acquire"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/acquisitionrequests": {
      "post": {
        "tags": [
          "acquisitionrequests"
        ],
        "summary": "RequestAcquisition",
        "description": "",
        "operationId": "requestAcquisition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtensionAcquisitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExtensionAcquisitionRequest"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_acquire"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/categories": {
      "post": {
        "tags": [
          "securedCategories"
        ],
        "summary": "CreateCategory",
        "description": "",
        "operationId": "createCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtensionCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExtensionCategory"
            }
          }
        }
      }
    },
    "/_apis/gallery/events": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "PublishExtensionEvents",
        "description": "API endpoint to publish extension install/uninstall events. This is meant to be invoked by EMS only for sending us data related to install/uninstall of an extension.",
        "operationId": "publishExtensionEvents",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtensionEvents"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/gallery/extensions": {
      "post": {
        "tags": [
          "extensions"
        ],
        "summary": "CreateExtension",
        "description": "",
        "operationId": "createExtension",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Stream to upload",
            "required": true,
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublishedExtension"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/extensions/{extensionId}": {
      "delete": {
        "tags": [
          "extensions"
        ],
        "summary": "DeleteExtensionById",
        "description": "",
        "operationId": "deleteExtensionById",
        "parameters": [
          {
            "in": "path",
            "name": "extensionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "version",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "extensions"
        ],
        "summary": "GetExtensionById",
        "description": "",
        "operationId": "getExtensionById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "extensionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "version",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "flags",
            "description": "",
            "required": false,
            "type": "string",
            "format": "ExtensionQueryFlags"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublishedExtension"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "extensions"
        ],
        "summary": "UpdateExtensionById",
        "description": "",
        "operationId": "updateExtensionById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "extensionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublishedExtension"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/extensions/{extensionId}/accounts/{accountName}": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "ShareExtensionById",
        "description": "",
        "operationId": "shareExtensionById",
        "parameters": [
          {
            "in": "path",
            "name": "extensionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "accountName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "UnshareExtensionById",
        "description": "",
        "operationId": "unshareExtensionById",
        "parameters": [
          {
            "in": "path",
            "name": "extensionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "accountName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/extensionvalidator": {
      "post": {
        "tags": [
          "extensionValidator"
        ],
        "summary": "ExtensionValidator",
        "description": "",
        "operationId": "extensionValidator",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AzureRestApiRequestModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/gallery/publisher/{publisherName}/extension/{extensionName}/{version}/assets/{assetType}": {
      "get": {
        "tags": [
          "authenticatedasset"
        ],
        "summary": "GetAssetAuthenticated",
        "description": "",
        "operationId": "getAssetAuthenticated",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "assetType",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountToken",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        }
      }
    },
    "/_apis/gallery/publisher/{publisherName}/extension/{extensionName}/accountsbyname/{accountName}": {
      "post": {
        "tags": [
          "accountsbyname"
        ],
        "summary": "ShareExtension",
        "description": "",
        "operationId": "shareExtension",
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "accountName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "accountsbyname"
        ],
        "summary": "UnshareExtension",
        "description": "",
        "operationId": "unshareExtension",
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "accountName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publisher/{publisherName}/extension/{extensionName}/statistics": {
      "patch": {
        "tags": [
          "statistics"
        ],
        "summary": "UpdateExtensionStatistics",
        "description": "",
        "operationId": "updateExtensionStatistics",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtensionStatisticUpdate"
            }
          },
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/gallery/publishers": {
      "post": {
        "tags": [
          "publishers"
        ],
        "summary": "CreatePublisher",
        "description": "",
        "operationId": "createPublisher",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Publisher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Publisher"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_manage"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}": {
      "delete": {
        "tags": [
          "publishers"
        ],
        "summary": "DeletePublisher",
        "description": "",
        "operationId": "deletePublisher",
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "publishers"
        ],
        "summary": "GetPublisher",
        "description": "",
        "operationId": "getPublisher",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "flags",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Publisher"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "publishers"
        ],
        "summary": "UpdatePublisher",
        "description": "",
        "operationId": "updatePublisher",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Publisher"
            }
          },
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Publisher"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_manage"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/azurepublisher": {
      "put": {
        "tags": [
          "azurepublisher"
        ],
        "summary": "AssociateAzurePublisher",
        "description": "",
        "operationId": "associateAzurePublisher",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "azurePublisherId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AzurePublisher"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "azurepublisher"
        ],
        "summary": "QueryAssociatedAzurePublisher",
        "description": "",
        "operationId": "queryAssociatedAzurePublisher",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AzurePublisher"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions": {
      "post": {
        "tags": [
          "extensions"
        ],
        "summary": "CreateExtensionWithPublisher",
        "description": "",
        "operationId": "createExtensionWithPublisher",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Stream to upload",
            "required": true,
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          },
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublishedExtension"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}": {
      "delete": {
        "tags": [
          "extensions"
        ],
        "summary": "DeleteExtension",
        "description": "",
        "operationId": "deleteExtension",
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "version",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "extensions"
        ],
        "summary": "GetExtension",
        "description": "",
        "operationId": "getExtension",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "version",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "flags",
            "description": "",
            "required": false,
            "type": "string",
            "format": "ExtensionQueryFlags"
          },
          {
            "in": "query",
            "name": "accountToken",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublishedExtension"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "extensions"
        ],
        "summary": "UpdateExtension",
        "description": "",
        "operationId": "updateExtension",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Stream to upload",
            "required": true,
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          },
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublishedExtension"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "extensions"
        ],
        "summary": "UpdateExtensionProperties",
        "description": "",
        "operationId": "updateExtensionProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "flags",
            "description": "",
            "required": true,
            "type": "string",
            "format": "PublishedExtensionFlags"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublishedExtension"
            }
          }
        }
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/{version}/package": {
      "get": {
        "tags": [
          "package"
        ],
        "summary": "GetPackage",
        "description": "",
        "operationId": "getPackage",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountToken",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "acceptDefault",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/certificates/{version}": {
      "get": {
        "tags": [
          "certificates"
        ],
        "summary": "GetCertificate",
        "description": "",
        "operationId": "getCertificate",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "GetExtensionEvents",
        "description": "Get install/uninstall events of an extension.",
        "operationId": "getExtensionEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "Name of the publisher",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "Name of the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "count",
            "description": "Count of events to fetch, applies to each event type.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "afterDate",
            "description": "Fetch events that occured on or after this value",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "include",
            "description": "Filter options. Supported values: includeInstall, includeUninstall. Default is to fetch all types of events",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExtensionEvents"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/qna": {
      "post": {
        "tags": [
          "qna"
        ],
        "summary": "CreateQuestion",
        "description": "Creates a new question for an extension.",
        "operationId": "createQuestion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Question to be created for the extension.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          {
            "in": "path",
            "name": "publisherName",
            "description": "Name of the publisher who published the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "Name of the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/qna/{questionId}": {
      "patch": {
        "tags": [
          "qna"
        ],
        "summary": "UpdateQuestion",
        "description": "Updates an existing question for an extension.",
        "operationId": "updateQuestion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated question to be set for the extension.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          {
            "in": "path",
            "name": "publisherName",
            "description": "Name of the publisher who published the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "Name of the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "questionId",
            "description": "Identifier of the question to be updated for the extension.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        }
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/qna/{questionId}/responses": {
      "post": {
        "tags": [
          "qna"
        ],
        "summary": "CreateResponse",
        "description": "Creates a new response for a given question for an extension.",
        "operationId": "createResponse",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Response to be created for the extension.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          {
            "in": "path",
            "name": "publisherName",
            "description": "Name of the publisher who published the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "Name of the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "questionId",
            "description": "Identifier of the question for which response is to be created for the extension.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/qna/{questionId}/responses/{responseId}": {
      "patch": {
        "tags": [
          "qna"
        ],
        "summary": "UpdateResponse",
        "description": "Updates an existing response for a given question for an extension.",
        "operationId": "updateResponse",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated response to be set for the extension.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          {
            "in": "path",
            "name": "publisherName",
            "description": "Name of the publisher who published the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "Name of the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "questionId",
            "description": "Identifier of the question for which response is to be updated for the extension.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "responseId",
            "description": "Identifier of the response which has to be updated.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/reports": {
      "get": {
        "tags": [
          "reports"
        ],
        "summary": "GetExtensionReports",
        "description": "Returns extension reports",
        "operationId": "getExtensionReports",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "Name of the publisher who published the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "Name of the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "days",
            "description": "Last n days report",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{publisherName}/extensions/{extensionName}/stats": {
      "get": {
        "tags": [
          "stats"
        ],
        "summary": "GetExtensionDailyStats",
        "description": "",
        "operationId": "getExtensionDailyStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "days",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExtensionDailyStats"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{pubName}/extensions/{extName}/reviews": {
      "post": {
        "tags": [
          "reviews"
        ],
        "summary": "CreateReview",
        "description": "Creates a new review for an extension",
        "operationId": "createReview",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Review to be created for the extension",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          {
            "in": "path",
            "name": "pubName",
            "description": "Name of the publisher who published the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extName",
            "description": "Name of the extension",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      }
    },
    "/_apis/gallery/publishers/{pubName}/extensions/{extName}/reviews/{reviewId}": {
      "delete": {
        "tags": [
          "reviews"
        ],
        "summary": "DeleteReview",
        "description": "Deletes a review",
        "operationId": "deleteReview",
        "parameters": [
          {
            "in": "path",
            "name": "pubName",
            "description": "Name of the pubilsher who published the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extName",
            "description": "Name of the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "Id of the review which needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.gallery_publish"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "reviews"
        ],
        "summary": "UpdateReview",
        "description": "Updates or Flags a review",
        "operationId": "updateReview",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ReviewPatch object which contains the changes to be applied to the review",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewPatch"
            }
          },
          {
            "in": "path",
            "name": "pubName",
            "description": "Name of the pubilsher who published the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extName",
            "description": "Name of the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "reviewId",
            "description": "Id of the review which needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReviewPatch"
            }
          }
        }
      }
    },
    "/_apis/gallery/settings/{userScope}": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "GetGalleryUserSettings",
        "description": "Get all setting entries for the given user/all-users scope",
        "operationId": "getGalleryUserSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userScope",
            "description": "User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "settings"
        ],
        "summary": "SetGalleryUserSettings",
        "description": "Set all setting entries for the given user/all-users scope",
        "operationId": "setGalleryUserSettings",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A key-value pair of all settings that need to be set",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          {
            "in": "path",
            "name": "userScope",
            "description": "User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/gallery/settings/{userScope}/{key}": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "GetGalleryUserSettings",
        "description": "Get all setting entries for the given user/all-users scope",
        "operationId": "getGalleryUserSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userScope",
            "description": "User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "key",
            "description": "Optional key under which to filter all the entries",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/_apis/gallery/signingkey/{keyType}": {
      "post": {
        "tags": [
          "signingkey"
        ],
        "summary": "GenerateKey",
        "description": "",
        "operationId": "generateKey",
        "parameters": [
          {
            "in": "path",
            "name": "keyType",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "expireCurrentSeconds",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "signingkey"
        ],
        "summary": "GetSigningKey",
        "description": "",
        "operationId": "getSigningKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "keyType",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/_apis/public/gallery/categories": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "GetCategories",
        "description": "",
        "operationId": "getCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "languages",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/_apis/public/gallery/categories/{categoryName}": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "GetCategoryDetails",
        "description": "",
        "operationId": "getCategoryDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "languages",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "product",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CategoriesResult"
            }
          }
        }
      }
    },
    "/_apis/public/gallery/extensionquery": {
      "post": {
        "tags": [
          "extensionquery"
        ],
        "summary": "QueryExtensions",
        "description": "",
        "operationId": "queryExtensions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtensionQuery"
            }
          },
          {
            "in": "query",
            "name": "accountToken",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExtensionQueryResult"
            }
          }
        }
      }
    },
    "/_apis/public/gallery/extensions/{extensionId}/{version}/assets/{assetType}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "GetAsset",
        "description": "",
        "operationId": "getAsset",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "extensionId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "version",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "assetType",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountToken",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "acceptDefault",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        }
      }
    },
    "/_apis/public/gallery/publisher/{publisherName}/extension/{extensionName}/{version}/assetbyname/{assetType}": {
      "get": {
        "tags": [
          "assetbyname"
        ],
        "summary": "GetAssetByName",
        "description": "",
        "operationId": "getAssetByName",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "assetType",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountToken",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "acceptDefault",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        }
      }
    },
    "/_apis/public/gallery/publisher/{publisherName}/extension/{extensionName}/{version}/privateasset/{assetToken}/{assetType}": {
      "get": {
        "tags": [
          "privateasset"
        ],
        "summary": "GetAssetWithToken",
        "description": "",
        "operationId": "getAssetWithToken",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "assetType",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "assetToken",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountToken",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "acceptDefault",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        }
      }
    },
    "/_apis/public/gallery/publisherquery": {
      "post": {
        "tags": [
          "publisherquery"
        ],
        "summary": "QueryPublishers",
        "description": "",
        "operationId": "queryPublishers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublisherQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublisherQueryResult"
            }
          }
        }
      }
    },
    "/_apis/public/gallery/publishers/{publisherName}/extensions/{extensionName}/{version}/stats": {
      "post": {
        "tags": [
          "stats"
        ],
        "summary": "IncrementExtensionDailyStat",
        "description": "",
        "operationId": "incrementExtensionDailyStat",
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "statType",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/public/gallery/publishers/{publisherName}/extensions/{extensionName}/qna": {
      "get": {
        "tags": [
          "qna"
        ],
        "summary": "GetQuestions",
        "description": "Returns a list of questions with their responses associated with an extension.",
        "operationId": "getQuestions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "Name of the publisher who published the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "Name of the extension.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "count",
            "description": "Number of questions to retrieve (defaults to 10).",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number from which set of questions are to be retrieved.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/QuestionsResult"
            }
          }
        }
      }
    },
    "/_apis/public/gallery/publishers/{publisherName}/extensions/{extensionName}/reviews": {
      "get": {
        "tags": [
          "reviews"
        ],
        "summary": "GetReviews",
        "description": "Returns a list of reviews associated with an extension",
        "operationId": "getReviews",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "publisherName",
            "description": "Name of the publisher who published the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "extensionName",
            "description": "Name of the extension",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "count",
            "description": "Number of reviews to retrieve (defaults to 5)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "filterOptions",
            "description": "FilterOptions to filter out empty reviews etcetera, defaults to none",
            "required": false,
            "type": "string",
            "format": "ReviewFilterOptions"
          },
          {
            "in": "query",
            "name": "beforeDate",
            "description": "Use if you want to fetch reviews older than the specified date, defaults to null",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "afterDate",
            "description": "Use if you want to fetch reviews newer than the specified date, defaults to null",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReviewsResult"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AcquisitionOperation": {
      "type": "object",
      "properties": {
        "operationState": {
          "description": "State of the the AcquisitionOperation for the current user",
          "enum": [
            "disallow",
            "allow",
            "completed"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.AcquisitionRequest.AcquisitionOperationState"
          }
        },
        "operationType": {
          "description": "AcquisitionOperationType: install, request, buy, etc...",
          "enum": [
            "get",
            "install",
            "buy",
            "try",
            "request",
            "none"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.AcquisitionRequest.AcquisitionOperationType"
          }
        },
        "reason": {
          "description": "Optional reason to justify current state. Typically used with Disallow state.",
          "type": "string"
        }
      }
    },
    "AcquisitionOptions": {
      "type": "object",
      "properties": {
        "defaultOperation": {
          "description": "Default Operation for the ItemId in this target",
          "$ref": "#/definitions/AcquisitionOperation"
        },
        "itemId": {
          "description": "The item id that this options refer to",
          "type": "string"
        },
        "operations": {
          "description": "Operations allowed for the ItemId in this target",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AcquisitionOperation"
          }
        },
        "target": {
          "description": "The target that this options refer to",
          "type": "string"
        }
      }
    },
    "Answers": {
      "type": "object",
      "properties": {
        "vSMarketplaceExtensionName": {
          "description": "Gets or sets the vs marketplace extension name",
          "type": "string"
        },
        "vSMarketplacePublisherName": {
          "description": "Gets or sets the vs marketplace publsiher name",
          "type": "string"
        }
      }
    },
    "AssetDetails": {
      "type": "object",
      "properties": {
        "answers": {
          "description": "Gets or sets the Answers, which contains vs marketplace extension name and publisher name",
          "$ref": "#/definitions/Answers"
        },
        "publisherNaturalIdentifier": {
          "description": "Gets or sets the VS publisher Id",
          "type": "string"
        }
      }
    },
    "AzurePublisher": {
      "type": "object",
      "properties": {
        "azurePublisherId": {
          "type": "string"
        },
        "publisherName": {
          "type": "string"
        }
      }
    },
    "AzureRestApiRequestModel": {
      "type": "object",
      "properties": {
        "assetDetails": {
          "description": "Gets or sets the Asset details",
          "$ref": "#/definitions/AssetDetails"
        },
        "assetId": {
          "description": "Gets or sets the asset id",
          "type": "string"
        },
        "assetVersion": {
          "description": "Gets or sets the asset version",
          "type": "integer",
          "format": "int64"
        },
        "customerSupportEmail": {
          "description": "Gets or sets the customer support email",
          "type": "string"
        },
        "integrationContactEmail": {
          "description": "Gets or sets the integration contact email",
          "type": "string"
        },
        "operation": {
          "description": "Gets or sets the asset version",
          "type": "string"
        },
        "planId": {
          "description": "Gets or sets the plan identifier if any.",
          "type": "string"
        },
        "publisherId": {
          "description": "Gets or sets the publisher id",
          "type": "string"
        },
        "type": {
          "description": "Gets or sets the resource type",
          "type": "string"
        }
      }
    },
    "AzureRestApiResponseModel": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AzureRestApiRequestModel"
        }
      ],
      "properties": {
        "operationStatus": {
          "description": "Gets or sets the Asset operation status",
          "$ref": "#/definitions/RestApiResponseStatusModel"
        }
      }
    },
    "CategoriesResult": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionCategory"
          }
        }
      }
    },
    "CategoryLanguageTitle": {
      "type": "object",
      "properties": {
        "lang": {
          "description": "The language for which the title is applicable",
          "type": "string"
        },
        "lcid": {
          "description": "The language culture id of the lang parameter",
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "description": "Actual title to be shown on the UI",
          "type": "string"
        }
      }
    },
    "EventCounts": {
      "type": "object",
      "properties": {
        "averageRating": {
          "description": "Average rating on the day for extension",
          "type": "string",
          "format": "Single"
        },
        "buyCount": {
          "description": "Number of times the extension was bought in hosted scenario (applies only to VSTS extensions)",
          "type": "integer",
          "format": "int32"
        },
        "connectedBuyCount": {
          "description": "Number of times the extension was bought in connected scenario (applies only to VSTS extensions)",
          "type": "integer",
          "format": "int32"
        },
        "connectedInstallCount": {
          "description": "Number of times the extension was installed in connected scenario (applies only to VSTS extensions)",
          "type": "integer",
          "format": "int32"
        },
        "downloadCount": {
          "description": "Number of times the extension was downloaded (applies only to VSTS extensions)",
          "type": "integer",
          "format": "int64"
        },
        "installCount": {
          "description": "Number of times the extension was installed",
          "type": "integer",
          "format": "int64"
        },
        "tryCount": {
          "description": "Number of times the extension was installed as a trial (applies only to VSTS extensions)",
          "type": "integer",
          "format": "int32"
        },
        "uninstallCount": {
          "description": "Number of times the extension was uninstalled (applies only to VSTS extensions)",
          "type": "integer",
          "format": "int32"
        },
        "webPageViews": {
          "description": "Number of detail page views",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ExtensionAcquisitionRequest": {
      "type": "object",
      "properties": {
        "assignmentType": {
          "description": "How the item is being assigned",
          "enum": [
            "none",
            "me",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.AcquisitionRequest.AcquisitionAssignmentType"
          }
        },
        "billingId": {
          "description": "The id of the subscription used for purchase",
          "type": "string"
        },
        "itemId": {
          "description": "The marketplace id (publisherName.extensionName) for the item",
          "type": "string"
        },
        "operationType": {
          "description": "The type of operation, such as install, request, purchase",
          "enum": [
            "get",
            "install",
            "buy",
            "try",
            "request",
            "none"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.AcquisitionRequest.AcquisitionOperationType"
          }
        },
        "properties": {
          "description": "Additional properties which can be added to the request.",
          "$ref": "#/definitions/JObject"
        },
        "quantity": {
          "description": "How many licenses should be purchased",
          "type": "integer",
          "format": "int32"
        },
        "targets": {
          "description": "A list of target guids where the item should be acquired (installed, requested, etc.), such as account id",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExtensionBadge": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "imgUri": {
          "type": "string"
        },
        "link": {
          "type": "string"
        }
      }
    },
    "ExtensionCategory": {
      "type": "object",
      "properties": {
        "associatedProducts": {
          "description": "The name of the products with which this category is associated to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categoryId": {
          "type": "integer",
          "format": "int32"
        },
        "categoryName": {
          "description": "This is the internal name for a category",
          "type": "string"
        },
        "language": {
          "description": "This parameter is obsolete. Refer to LanguageTitles for langauge specific titles",
          "type": "string"
        },
        "languageTitles": {
          "description": "The list of all the titles of this category in various languages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryLanguageTitle"
          }
        },
        "parentCategoryName": {
          "description": "This is the internal name of the parent if this is associated with a parent",
          "type": "string"
        }
      }
    },
    "ExtensionDailyStat": {
      "type": "object",
      "properties": {
        "counts": {
          "description": "Stores the event counts",
          "$ref": "#/definitions/EventCounts"
        },
        "statisticDate": {
          "description": "Timestamp of this data point",
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "description": "Version of the extension",
          "type": "string"
        }
      }
    },
    "ExtensionDailyStats": {
      "type": "object",
      "properties": {
        "dailyStats": {
          "description": "List of extension statistics data points",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionDailyStat"
          }
        },
        "extensionId": {
          "description": "Id of the extension, this will never be sent back to the client. For internal use only.",
          "type": "string",
          "format": "uuid"
        },
        "extensionName": {
          "description": "Name of the extension",
          "type": "string"
        },
        "publisherName": {
          "description": "Name of the publisher",
          "type": "string"
        },
        "statCount": {
          "description": "Count of stats",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ExtensionEvent": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id which identifies each data point uniquely",
          "type": "integer",
          "format": "int64"
        },
        "properties": {
          "$ref": "#/definitions/JObject"
        },
        "statisticDate": {
          "description": "Timestamp of when the event occured",
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "description": "Version of the extension",
          "type": "string"
        }
      }
    },
    "ExtensionEvents": {
      "type": "object",
      "properties": {
        "events": {
          "description": "Generic container for events data. The dictionary key denotes the type of event and the list contains properties related to that event",
          "type": "object",
          "additionalProperties": {
            "type": "array"
          }
        },
        "extensionId": {
          "description": "Id of the extension, this will never be sent back to the client. This field will mainly be used when EMS calls into Gallery REST API to update install/uninstall events for various extensions in one go.",
          "type": "string",
          "format": "uuid"
        },
        "extensionName": {
          "description": "Name of the extension",
          "type": "string"
        },
        "publisherName": {
          "description": "Name of the publisher",
          "type": "string"
        }
      }
    },
    "ExtensionFile": {
      "type": "object",
      "properties": {
        "assetType": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "fileId": {
          "type": "integer",
          "format": "int32"
        },
        "isDefault": {
          "type": "boolean"
        },
        "isPublic": {
          "type": "boolean"
        },
        "language": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ExtensionFilterResult": {
      "type": "object",
      "properties": {
        "extensions": {
          "description": "This is the set of appplications that matched the query filter supplied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublishedExtension"
          }
        },
        "pagingToken": {
          "description": "The PagingToken is returned from a request when more records exist that match the result than were requested or could be returned. A follow-up query with this paging token can be used to retrieve more results.",
          "type": "string"
        },
        "resultMetadata": {
          "description": "This is the additional optional metadata for the given result. E.g. Total count of results which is useful in case of paged results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionFilterResultMetadata"
          }
        }
      }
    },
    "ExtensionFilterResultMetadata": {
      "type": "object",
      "properties": {
        "metadataItems": {
          "description": "The metadata items for the category",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          }
        },
        "metadataType": {
          "description": "Defines the category of metadata items",
          "type": "string"
        }
      }
    },
    "ExtensionIdentifier": {
      "type": "object",
      "properties": {
        "extensionName": {
          "description": "The ExtensionName component part of the fully qualified ExtensionIdentifier",
          "type": "string"
        },
        "publisherName": {
          "description": "The PublisherName component part of the fully qualified ExtensionIdentifier",
          "type": "string"
        }
      }
    },
    "ExtensionPackage": {
      "type": "object",
      "properties": {
        "extensionManifest": {
          "description": "Base 64 encoded extension package",
          "type": "string"
        }
      }
    },
    "ExtensionPolicy": {
      "type": "object",
      "properties": {
        "install": {
          "description": "Permissions on 'Install' operation",
          "enum": [
            "none",
            "private",
            "public",
            "preview",
            "released",
            "firstParty",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.ExtensionPolicyFlags"
          }
        },
        "request": {
          "description": "Permission on 'Request' operation",
          "enum": [
            "none",
            "private",
            "public",
            "preview",
            "released",
            "firstParty",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.ExtensionPolicyFlags"
          }
        }
      }
    },
    "ExtensionQuery": {
      "type": "object",
      "properties": {
        "assetTypes": {
          "description": "When retrieving extensions with a query; frequently the caller only needs a small subset of the assets. The caller may specify a list of asset types that should be returned if the extension contains it. All other assets will not be returned.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "filters": {
          "description": "Each filter is a unique query and will have matching set of extensions returned from the request. Each result will have the same index in the resulting array that the filter had in the incoming query.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryFilter"
          }
        },
        "flags": {
          "description": "The Flags are used to deterine which set of information the caller would like returned for the matched extensions.",
          "enum": [
            "none",
            "includeVersions",
            "includeFiles",
            "includeCategoryAndTags",
            "includeSharedAccounts",
            "includeVersionProperties",
            "excludeNonValidated",
            "includeInstallationTargets",
            "includeAssetUri",
            "includeStatistics",
            "includeLatestVersionOnly",
            "useFallbackAssetUri",
            "includeMetadata",
            "allAttributes"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.ExtensionQueryFlags"
          }
        }
      }
    },
    "ExtensionQueryResult": {
      "type": "object",
      "properties": {
        "results": {
          "description": "For each filter supplied in the query, a filter result will be returned in the query result.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionFilterResult"
          }
        }
      }
    },
    "ExtensionShare": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ExtensionStatistic": {
      "type": "object",
      "properties": {
        "statisticName": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ExtensionStatisticUpdate": {
      "type": "object",
      "properties": {
        "extensionName": {
          "type": "string"
        },
        "operation": {
          "enum": [
            "none",
            "set",
            "increment",
            "decrement",
            "delete"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.ExtensionStatisticOperation"
          }
        },
        "publisherName": {
          "type": "string"
        },
        "statistic": {
          "$ref": "#/definitions/ExtensionStatistic"
        }
      }
    },
    "ExtensionVersion": {
      "type": "object",
      "properties": {
        "assetUri": {
          "type": "string"
        },
        "badges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionBadge"
          }
        },
        "fallbackAssetUri": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionFile"
          }
        },
        "flags": {
          "enum": [
            "none",
            "validated"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.ExtensionVersionFlags"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "validationResultMessage": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "versionDescription": {
          "type": "string"
        }
      }
    },
    "FilterCriteria": {
      "type": "object",
      "properties": {
        "filterType": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "The value used in the match based on the filter type.",
          "type": "string"
        }
      }
    },
    "InstallationTarget": {
      "type": "object",
      "properties": {
        "maxInclusive": {
          "type": "boolean"
        },
        "maxVersion": {
          "type": "string"
        },
        "minInclusive": {
          "type": "boolean"
        },
        "minVersion": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "targetVersion": {
          "type": "string"
        }
      }
    },
    "JObject": {
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "JContainer"
        }
      ],
      "properties": {
        "item": {
          "$ref": "#/definitions/JToken"
        },
        "type": {
          "type": "string",
          "format": "JTokenType"
        }
      }
    },
    "JToken": {
      "type": "object",
      "properties": {
        "first": {
          "$ref": "#/definitions/JToken"
        },
        "hasValues": {
          "type": "boolean"
        },
        "item": {
          "$ref": "#/definitions/JToken"
        },
        "last": {
          "$ref": "#/definitions/JToken"
        },
        "next": {
          "$ref": "#/definitions/JToken"
        },
        "parent": {
          "type": "string",
          "format": "JContainer"
        },
        "path": {
          "type": "string"
        },
        "previous": {
          "$ref": "#/definitions/JToken"
        },
        "root": {
          "$ref": "#/definitions/JToken"
        },
        "type": {
          "type": "string",
          "format": "JTokenType"
        }
      }
    },
    "MetadataItem": {
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of the metadata item",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the metadata item",
          "type": "string"
        }
      }
    },
    "PublishedExtension": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deploymentType": {
          "enum": [
            "exe",
            "msi",
            "vsix",
            "referralLink"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.ExtensionDeploymentTechnology"
          }
        },
        "displayName": {
          "type": "string"
        },
        "extensionId": {
          "type": "string",
          "format": "uuid"
        },
        "extensionName": {
          "type": "string"
        },
        "flags": {
          "enum": [
            "none",
            "disabled",
            "builtIn",
            "validated",
            "trusted",
            "paid",
            "public",
            "multiVersion",
            "system",
            "preview",
            "unpublished",
            "trial"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.PublishedExtensionFlags"
          }
        },
        "installationTargets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstallationTarget"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "longDescription": {
          "type": "string"
        },
        "publishedDate": {
          "description": "Date on which the extension was first uploaded.",
          "type": "string",
          "format": "date-time"
        },
        "publisher": {
          "$ref": "#/definitions/PublisherFacts"
        },
        "releaseDate": {
          "description": "Date on which the extension first went public.",
          "type": "string",
          "format": "date-time"
        },
        "sharedWith": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionShare"
          }
        },
        "shortDescription": {
          "type": "string"
        },
        "statistics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionStatistic"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionVersion"
          }
        }
      }
    },
    "Publisher": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublishedExtension"
          }
        },
        "flags": {
          "enum": [
            "unChanged",
            "none",
            "disabled",
            "verified",
            "serviceFlags"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.PublisherFlags"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "longDescription": {
          "type": "string"
        },
        "publisherId": {
          "type": "string",
          "format": "uuid"
        },
        "publisherName": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        }
      }
    },
    "PublisherFacts": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "flags": {
          "enum": [
            "unChanged",
            "none",
            "disabled",
            "verified",
            "serviceFlags"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.PublisherFlags"
          }
        },
        "publisherId": {
          "type": "string",
          "format": "uuid"
        },
        "publisherName": {
          "type": "string"
        }
      }
    },
    "PublisherFilterResult": {
      "type": "object",
      "properties": {
        "publishers": {
          "description": "This is the set of appplications that matched the query filter supplied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Publisher"
          }
        }
      }
    },
    "PublisherQuery": {
      "type": "object",
      "properties": {
        "filters": {
          "description": "Each filter is a unique query and will have matching set of publishers returned from the request. Each result will have the same index in the resulting array that the filter had in the incoming query.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryFilter"
          }
        },
        "flags": {
          "description": "The Flags are used to deterine which set of information the caller would like returned for the matched publishers.",
          "enum": [
            "none",
            "includeExtensions",
            "includeEmailAddress"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.PublisherQueryFlags"
          }
        }
      }
    },
    "PublisherQueryResult": {
      "type": "object",
      "properties": {
        "results": {
          "description": "For each filter supplied in the query, a filter result will be returned in the query result.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublisherFilterResult"
          }
        }
      }
    },
    "QnAItem": {
      "type": "object",
      "properties": {
        "createdDate": {
          "description": "Time when the review was first created",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Unique identifier of a QnA item",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "Get status of item",
          "enum": [
            "none",
            "userEditable",
            "publisherCreated"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.QnAItemStatus"
          }
        },
        "text": {
          "description": "Text description of the QnA item",
          "type": "string"
        },
        "updatedDate": {
          "description": "Time when the review was edited/updated",
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "description": "User details for the item.",
          "$ref": "#/definitions/UserIdentityRef"
        }
      }
    },
    "QueryFilter": {
      "type": "object",
      "properties": {
        "criteria": {
          "description": "The filter values define the set of values in this query. They are applied based on the QueryFilterType.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "direction": {
          "description": "The PagingDirection is applied to a paging token if one exists. If not the direction is ignored, and Forward from the start of the resultset is used. Direction should be left out of the request unless a paging token is used to help prevent future issues.",
          "enum": [
            "backward",
            "forward"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.PagingDirection"
          }
        },
        "pageNumber": {
          "description": "The page number requested by the user. If not provided 1 is assumed by default.",
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "description": "The page size defines the number of results the caller wants for this filter. The count can't exceed the overall query size limits.",
          "type": "integer",
          "format": "int32"
        },
        "pagingToken": {
          "description": "The paging token is a distinct type of filter and the other filter fields are ignored. The paging token represents the continuation of a previously executed query. The information about where in the result and what fields are being filtered are embeded in the token.",
          "type": "string"
        },
        "sortBy": {
          "description": "Defines the type of sorting to be applied on the results. The page slice is cut of the sorted results only.",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "Defines the order of sorting, 1 for Ascending, 2 for Descending, else default ordering based on the SortBy value",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Question": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/QnAItem"
        }
      ],
      "properties": {
        "responses": {
          "description": "List of answers in for the question / thread",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response"
          }
        }
      }
    },
    "QuestionsResult": {
      "type": "object",
      "properties": {
        "hasMoreQuestions": {
          "description": "Flag indicating if there are more QnA threads to be shown (for paging)",
          "type": "boolean"
        },
        "questions": {
          "description": "List of the QnA threads",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Question"
          }
        }
      }
    },
    "Response": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/QnAItem"
        }
      ],
      "properties": {
      }
    },
    "RestApiResponseStatusModel": {
      "type": "object",
      "properties": {
        "operationDetails": {
          "description": "Gets or sets the operation details",
          "$ref": "#/definitions/JToken"
        },
        "operationId": {
          "description": "Gets or sets the operation id",
          "type": "string"
        },
        "percentageCompleted": {
          "description": "Gets or sets the completed status percentage",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "Gets or sets the status",
          "enum": [
            "completed",
            "failed",
            "inprogress",
            "skipped"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.Commerce.RestApiResponseStatus"
          }
        },
        "statusMessage": {
          "description": "Gets or sets the status message",
          "type": "string"
        }
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "adminReply": {
          "description": "Admin Reply, if any, for this review",
          "$ref": "#/definitions/ReviewReply"
        },
        "id": {
          "description": "Unique identifier of a review item",
          "type": "integer",
          "format": "int64"
        },
        "isDeleted": {
          "description": "Flag for soft deletion",
          "type": "boolean"
        },
        "isIgnored": {
          "type": "boolean"
        },
        "productVersion": {
          "description": "Version of the product for which review was submitted",
          "type": "string"
        },
        "rating": {
          "description": "Rating procided by the user",
          "type": "string",
          "format": "byte"
        },
        "reply": {
          "description": "Reply, if any, for this review",
          "$ref": "#/definitions/ReviewReply"
        },
        "text": {
          "description": "Text description of the review",
          "type": "string"
        },
        "title": {
          "description": "Title of the review",
          "type": "string"
        },
        "updatedDate": {
          "description": "Time when the review was edited/updated",
          "type": "string",
          "format": "date-time"
        },
        "userDisplayName": {
          "description": "Name of the user",
          "type": "string"
        },
        "userId": {
          "description": "Id of the user who submitted the review",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ReviewPatch": {
      "type": "object",
      "properties": {
        "operation": {
          "description": "Denotes the patch operation type",
          "enum": [
            "flagReview",
            "updateReview",
            "replyToReview",
            "adminResponseForReview"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.ReviewPatchOperation"
          }
        },
        "reportedConcern": {
          "description": "Use when patch operation is FlagReview",
          "$ref": "#/definitions/UserReportedConcern"
        },
        "reviewItem": {
          "description": "Use when patch operation is EditReview",
          "$ref": "#/definitions/Review"
        }
      }
    },
    "ReviewReply": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the reply",
          "type": "integer",
          "format": "int64"
        },
        "isDeleted": {
          "description": "Flag for soft deletion",
          "type": "boolean"
        },
        "productVersion": {
          "description": "Version of the product when the reply was submitted or updated",
          "type": "string"
        },
        "replyText": {
          "description": "Content of the reply",
          "type": "string"
        },
        "reviewId": {
          "description": "Id of the review, to which this reply belongs",
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "description": "Title of the reply",
          "type": "string"
        },
        "updatedDate": {
          "description": "Date the reply was submitted or updated",
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "description": "Id of the user who left the reply",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ReviewsResult": {
      "type": "object",
      "properties": {
        "hasMoreReviews": {
          "description": "Flag indicating if there are more reviews to be shown (for paging)",
          "type": "boolean"
        },
        "reviews": {
          "description": "List of reviews",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          }
        },
        "totalIgnoredReviewCount": {
          "type": "integer",
          "format": "int64"
        },
        "totalReviewCount": {
          "description": "Count of total review items",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserExtensionPolicy": {
      "type": "object",
      "properties": {
        "displayName": {
          "description": "User display name that this policy refers to",
          "type": "string"
        },
        "permissions": {
          "description": "The extension policy applied to the user",
          "$ref": "#/definitions/ExtensionPolicy"
        },
        "userId": {
          "description": "User id that this policy refers to",
          "type": "string"
        }
      }
    },
    "UserIdentityRef": {
      "type": "object",
      "properties": {
        "displayName": {
          "description": "User display name",
          "type": "string"
        },
        "id": {
          "description": "User VSID",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "UserReportedConcern": {
      "type": "object",
      "properties": {
        "category": {
          "description": "Category of the concern",
          "enum": [
            "general",
            "abusive",
            "spam"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.Gallery.WebApi.ConcernCategory"
          }
        },
        "concernText": {
          "description": "User comment associated with the report",
          "type": "string"
        },
        "reviewId": {
          "description": "Id of the review which was reported",
          "type": "integer",
          "format": "int64"
        },
        "submittedDate": {
          "description": "Date the report was submitted",
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "description": "Id of the user who reported a review",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '3.2-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
     },
     "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.gallery": "Grants read access to public and private items and publishers.",
        "vso.gallery_manage": "Grants read access, the ability to publish and manage items and publishers.",
        "vso.gallery_publish": "Grants read access and the ability to upload, update, and share items.",
        "vso.gallery_acquire": "Grants read access and the ability to acquire items."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}