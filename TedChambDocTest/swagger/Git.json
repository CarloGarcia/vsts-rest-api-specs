{
  "swagger": "2.0",
  "info": {
    "title": "Git",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "3.1"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "basePath": "/",
  "tags": [
    {
      "name": "blobs"
    },
    {
      "name": "branchStats"
    },
    {
      "name": "changes"
    },
    {
      "name": "cherryPicks"
    },
    {
      "name": "commitDiffs"
    },
    {
      "name": "commits"
    },
    {
      "name": "commitsBatch"
    },
    {
      "name": "deletedRepositories"
    },
    {
      "name": "importRequests"
    },
    {
      "name": "items"
    },
    {
      "name": "itemsBatch"
    },
    {
      "name": "pullRequestAttachments"
    },
    {
      "name": "pullRequestCommits"
    },
    {
      "name": "pullRequestConflicts"
    },
    {
      "name": "pullRequestIterationChanges"
    },
    {
      "name": "pullRequestIterations"
    },
    {
      "name": "pullRequestQuery"
    },
    {
      "name": "pullRequestReviewers"
    },
    {
      "name": "pullRequests"
    },
    {
      "name": "pullRequestShare"
    },
    {
      "name": "pullRequestStatuses"
    },
    {
      "name": "pullRequestThreadComments"
    },
    {
      "name": "pullRequestThreads"
    },
    {
      "name": "pullRequestWorkItems"
    },
    {
      "name": "pushes"
    },
    {
      "name": "refLockRequest"
    },
    {
      "name": "refs"
    },
    {
      "name": "refsFavorites"
    },
    {
      "name": "repositories"
    },
    {
      "name": "reverts"
    },
    {
      "name": "statuses"
    },
    {
      "name": "suggestions"
    },
    {
      "name": "treeDiffs"
    },
    {
      "name": "trees"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/_apis/git/pullrequests/{pullRequestId}": {
      "get": {
        "tags": [
          "pullRequests"
        ],
        "summary": "GetPullRequestById",
        "description": "Get a pull request using its ID",
        "operationId": "getPullRequestById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "the Id of the pull request",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          }
        }
      }
    },
    "/_apis/git/repositories": {
      "post": {
        "tags": [
          "repositories"
        ],
        "summary": "CreateRepository",
        "description": "Create a git repository",
        "operationId": "createRepository",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          }
        }
      },
      "get": {
        "tags": [
          "repositories"
        ],
        "summary": "GetRepositories",
        "description": "Retrieve git repositories.",
        "operationId": "getRepositories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "includeLinks",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeAllUrls",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRepository"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}": {
      "delete": {
        "tags": [
          "repositories"
        ],
        "summary": "DeleteRepository",
        "description": "Delete a git repository",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "repositories"
        ],
        "summary": "GetRepository",
        "description": "",
        "operationId": "getRepository",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "repositories"
        ],
        "summary": "UpdateRepository",
        "description": "Updates the Git repository with the single populated change in the specified repository information.",
        "operationId": "updateRepository",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/blobs": {
      "post": {
        "tags": [
          "blobs"
        ],
        "summary": "GetBlobsZip",
        "description": "Gets one or more blobs in a zip file download.",
        "operationId": "getBlobsZip",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filename",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "stream"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/blobs/{sha1}": {
      "get": {
        "tags": [
          "blobs"
        ],
        "summary": "GetBlob",
        "description": "Gets a single blob.",
        "operationId": "getBlob",
        "produces": [
          "application/octet-stream",
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sha1",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "download",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitBlobRef"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/commits": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "GetCommits",
        "description": "Retrieve git commits for a project",
        "operationId": "getCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": true,
            "type": "string",
            "format": "gitQueryCommitsCriteria"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitCommitRef"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/commits/{commitId}": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "GetCommit",
        "description": "Retrieve a particular commit.",
        "operationId": "getCommit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "commitId",
            "description": "The id of the commit.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "changeCount",
            "description": "The number of changes to include in the result.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCommit"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/commits/{commitId}/changes": {
      "get": {
        "tags": [
          "changes"
        ],
        "summary": "GetChanges",
        "description": "Retrieve changes for a particular commit.",
        "operationId": "getChanges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "commitId",
            "description": "The id of the commit.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "The maximum number of changes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of changes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCommitChanges"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/commits/{commitId}/statuses": {
      "post": {
        "tags": [
          "statuses"
        ],
        "summary": "CreateCommitStatus",
        "description": "",
        "operationId": "createCommitStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitStatus"
            }
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitStatus"
            }
          }
        }
      },
      "get": {
        "tags": [
          "statuses"
        ],
        "summary": "GetStatuses",
        "description": "",
        "operationId": "getStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "commitId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "latestOnly",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitStatus"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/commitsbatch": {
      "post": {
        "tags": [
          "commitsBatch"
        ],
        "summary": "GetCommitsBatch",
        "description": "Retrieve git commits for a project",
        "operationId": "getCommitsBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitQueryCommitsCriteria"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeStatuses",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitCommitRef"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/diffs/commits": {
      "get": {
        "tags": [
          "commitDiffs"
        ],
        "summary": "GetCommitDiffs",
        "description": "Get differences in committed items between two commits.",
        "operationId": "getCommitDiffs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "Friendly name or guid of repository",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "diffCommonCommit",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "top",
            "description": "Maximum number of changes to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of changes to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "baseVersionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitBaseVersionDescriptor"
          },
          {
            "in": "query",
            "name": "targetVersionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitTargetVersionDescriptor"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCommitDiffs"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/items": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "GetItems",
        "description": "Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.",
        "operationId": "getItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "scopePath",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursionLevel",
            "description": "",
            "required": false,
            "type": "string",
            "format": "versionControlRecursionType"
          },
          {
            "in": "query",
            "name": "includeContentMetadata",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "latestProcessedChange",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "download",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "versionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitVersionDescriptor"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitItem"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/items/{path}": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "GetItem",
        "description": "Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.",
        "operationId": "getItem",
        "produces": [
          "application/octet-stream",
          "text/plain",
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "scopePath",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursionLevel",
            "description": "",
            "required": false,
            "type": "string",
            "format": "versionControlRecursionType"
          },
          {
            "in": "query",
            "name": "includeContentMetadata",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "latestProcessedChange",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "download",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "versionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitVersionDescriptor"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitItem"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/itemsbatch": {
      "post": {
        "tags": [
          "itemsBatch"
        ],
        "summary": "GetItemsBatch",
        "description": "Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path",
        "operationId": "getItemsBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitItemRequestData"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "array"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullrequestquery": {
      "post": {
        "tags": [
          "pullRequestQuery"
        ],
        "summary": "GetPullRequestQuery",
        "description": "Query for pull requests",
        "operationId": "getPullRequestQuery",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestQuery"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestQuery"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullrequests": {
      "post": {
        "tags": [
          "pullRequests"
        ],
        "summary": "CreatePullRequest",
        "description": "Create a git pull request",
        "operationId": "createPullRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequests"
        ],
        "summary": "GetPullRequests",
        "description": "Query for pull requests",
        "operationId": "getPullRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": true,
            "type": "string",
            "format": "gitPullRequestSearchCriteria"
          },
          {
            "in": "query",
            "name": "maxCommentLength",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequest"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullrequests/{pullRequestId}": {
      "get": {
        "tags": [
          "pullRequests"
        ],
        "summary": "GetPullRequest",
        "description": "Retrieve a pull request",
        "operationId": "getPullRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxCommentLength",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeWorkItemRefs",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pullRequests"
        ],
        "summary": "UpdatePullRequest",
        "description": "Updates a pull request",
        "operationId": "updatePullRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments": {
      "get": {
        "tags": [
          "pullRequestAttachments"
        ],
        "summary": "GetAttachments",
        "description": "",
        "operationId": "getAttachments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/attachment"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}": {
      "post": {
        "tags": [
          "pullRequestAttachments"
        ],
        "summary": "CreateAttachment",
        "description": "Create a new attachment",
        "operationId": "createAttachment",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Stream to upload",
            "required": true,
            "schema": {
              "type": "string",
              "format": "stream"
            }
          },
          {
            "in": "path",
            "name": "fileName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/attachment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "pullRequestAttachments"
        ],
        "summary": "DeleteAttachment",
        "description": "",
        "operationId": "deleteAttachment",
        "parameters": [
          {
            "in": "path",
            "name": "fileName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestAttachments"
        ],
        "summary": "GetAttachmentContent",
        "description": "",
        "operationId": "getAttachmentContent",
        "produces": [
          "application/zip",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "stream"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/commits": {
      "get": {
        "tags": [
          "pullRequestCommits"
        ],
        "summary": "GetPullRequestCommits",
        "description": "Retrieve pull request's commits",
        "operationId": "getPullRequestCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitCommitRef"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts": {
      "get": {
        "tags": [
          "pullRequestConflicts"
        ],
        "summary": "GetPullRequestConflicts",
        "description": "Retrieve all conflicts for a pull request",
        "operationId": "getPullRequestConflicts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeObsolete",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitConflict"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}": {
      "get": {
        "tags": [
          "pullRequestConflicts"
        ],
        "summary": "GetPullRequestConflict",
        "description": "Retrieve one conflict for a pull request by ID",
        "operationId": "getPullRequestConflict",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "conflictId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitConflict"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pullRequestConflicts"
        ],
        "summary": "UpdatePullRequestConflict",
        "description": "Update merge conflict resolution",
        "operationId": "updatePullRequestConflict",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitConflict"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "conflictId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitConflict"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations": {
      "get": {
        "tags": [
          "pullRequestIterations"
        ],
        "summary": "GetPullRequestIterations",
        "description": "",
        "operationId": "getPullRequestIterations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequestIteration"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}": {
      "get": {
        "tags": [
          "pullRequestIterations"
        ],
        "summary": "GetPullRequestIteration",
        "description": "",
        "operationId": "getPullRequestIteration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestIteration"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/changes": {
      "get": {
        "tags": [
          "pullRequestIterationChanges"
        ],
        "summary": "GetPullRequestIterationChanges",
        "description": "",
        "operationId": "getPullRequestIterationChanges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "compareTo",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestIterationChanges"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/commits": {
      "get": {
        "tags": [
          "pullRequestCommits"
        ],
        "summary": "GetPullRequestIterationCommits",
        "description": "Get the commits for an iteration.",
        "operationId": "getPullRequestIterationCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "Iteration to retrieve commits for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitCommitRef"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses": {
      "post": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "CreatePullRequestIterationStatus",
        "description": "Create a pull request iteration status",
        "operationId": "createPullRequestIterationStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "GetPullRequestIterationStatuses",
        "description": "Get all the statuses associated with a pull request iteration.",
        "operationId": "getPullRequestIterationStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequestStatus"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}": {
      "get": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "GetPullRequestIterationStatus",
        "description": "Get the specific pull request iteration status.",
        "operationId": "getPullRequestIterationStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers": {
      "post": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "CreatePullRequestReviewers",
        "description": "Adds reviewers to a git pull request",
        "operationId": "createPullRequestReviewers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/identityRef"
              }
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/identityRefWithVote"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "GetPullRequestReviewers",
        "description": "Retrieve a pull request reviewers",
        "operationId": "getPullRequestReviewers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/identityRefWithVote"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}": {
      "put": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "CreatePullRequestReviewer",
        "description": "Adds a reviewer to a git pull request",
        "operationId": "createPullRequestReviewer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityRefWithVote"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/identityRefWithVote"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "DeletePullRequestReviewer",
        "description": "Adds reviewers to a git pull request",
        "operationId": "deletePullRequestReviewer",
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "GetPullRequestReviewer",
        "description": "Retrieve a reviewer from a pull request",
        "operationId": "getPullRequestReviewer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/identityRefWithVote"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/share": {
      "post": {
        "tags": [
          "pullRequestShare"
        ],
        "summary": "SharePullRequest",
        "description": "",
        "operationId": "sharePullRequest",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shareNotificationContext"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses": {
      "post": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "CreatePullRequestStatus",
        "description": "Create a pull request status",
        "operationId": "createPullRequestStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "GetPullRequestStatuses",
        "description": "Get all the statuses associated with a pull request.",
        "operationId": "getPullRequestStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequestStatus"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}": {
      "get": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "GetPullRequestStatus",
        "description": "Get the specific pull request status.",
        "operationId": "getPullRequestStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads": {
      "post": {
        "tags": [
          "pullRequestThreads"
        ],
        "summary": "CreateThread",
        "description": "Create a pull request review comment thread",
        "operationId": "createThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestThreads"
        ],
        "summary": "GetThreads",
        "description": "Get all pull request comment threads.",
        "operationId": "getThreads",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "iteration",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "baseIteration",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequestCommentThread"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}": {
      "get": {
        "tags": [
          "pullRequestThreads"
        ],
        "summary": "GetPullRequestThread",
        "description": "Get a pull request comment thread by id for a pull request",
        "operationId": "getPullRequestThread",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "iteration",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "baseIteration",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pullRequestThreads"
        ],
        "summary": "UpdateThread",
        "description": "Update a pull request review comment thread",
        "operationId": "updateThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments": {
      "post": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "CreateComment",
        "description": "Create a pull request review comment",
        "operationId": "createComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/comment"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "GetComments",
        "description": "Get all pull request comments in a thread.",
        "operationId": "getComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/comment"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}": {
      "delete": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "DeleteComment",
        "description": "Delete a pull request comment by id for a pull request",
        "operationId": "deleteComment",
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "GetComment",
        "description": "Get a pull request comment by id for a pull request",
        "operationId": "getComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "UpdateComment",
        "description": "Update a pull request review comment thread",
        "operationId": "updateComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/comment"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/workitems": {
      "get": {
        "tags": [
          "pullRequestWorkItems"
        ],
        "summary": "GetPullRequestWorkItems",
        "description": "Retrieve a pull request work items",
        "operationId": "getPullRequestWorkItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/associatedWorkItem"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pushes": {
      "post": {
        "tags": [
          "pushes"
        ],
        "summary": "CreatePush",
        "description": "Push changes to the repository.",
        "operationId": "createPush",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPush"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, a project-scoped route must be used.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPush"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pushes"
        ],
        "summary": "GetPushes",
        "description": "Retrieves pushes associated with the specified repository.",
        "operationId": "getPushes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitPushSearchCriteria"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPush"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/pushes/{pushId}": {
      "get": {
        "tags": [
          "pushes"
        ],
        "summary": "GetPush",
        "description": "Retrieve a particular push.",
        "operationId": "getPush",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pushId",
            "description": "The id of the push.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "The number of commits to include in the result.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeRefUpdates",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPush"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/refs": {
      "post": {
        "tags": [
          "refs"
        ],
        "summary": "UpdateRefs",
        "description": "Creates or updates refs with the given information",
        "operationId": "updateRefs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of ref updates to attempt to perform",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRefUpdate"
              }
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "The id of the project.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRefUpdateResult"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/refs/{*filter}": {
      "get": {
        "tags": [
          "refs"
        ],
        "summary": "GetRefs",
        "description": "Queries the provided repository for its refs and returns them.",
        "operationId": "getRefs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "[optional] A filter to apply to the refs.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "[optional] Specifies if referenceLinks should be included in the result. default is false.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "latestStatusesOnly",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRef"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/refs/{filter}": {
      "patch": {
        "tags": [
          "refs"
        ],
        "summary": "UpdateRef",
        "description": "",
        "operationId": "updateRef",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitRefUpdate"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRef"
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/stats/branches": {
      "get": {
        "tags": [
          "branchStats"
        ],
        "summary": "GetBranch",
        "description": "Retrieve statistics about a single branch.",
        "operationId": "getBranch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "Friendly name or guid of repository",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name of the branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "baseVersionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitVersionDescriptor"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitBranchStats"
            }
          }
        }
      },
      "post": {
        "tags": [
          "branchStats"
        ],
        "summary": "GetBranchStatsBatch",
        "description": "Retrieve statistics for multiple commits",
        "operationId": "getBranchStatsBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitQueryBranchStatsCriteria"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "Friendly name or guid of repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitBranchStats"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/suggestions": {
      "get": {
        "tags": [
          "suggestions"
        ],
        "summary": "GetSuggestions",
        "description": "Retrieve a set of suggestions (including a pull request suggestion).",
        "operationId": "getSuggestions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitSuggestion"
              }
            }
          }
        }
      }
    },
    "/_apis/git/repositories/{repositoryId}/trees/{sha1}": {
      "get": {
        "tags": [
          "trees"
        ],
        "summary": "GetTree",
        "description": "",
        "operationId": "getTree",
        "produces": [
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sha1",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitTreeRef"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/deletedrepositories": {
      "get": {
        "tags": [
          "deletedRepositories"
        ],
        "summary": "GetDeletedRepositories",
        "description": "Retrieve deleted git repositories.",
        "operationId": "getDeletedRepositories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitDeletedRepository"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/favorites/refs": {
      "post": {
        "tags": [
          "refsFavorites"
        ],
        "summary": "CreateFavorite",
        "description": "Creates a ref favorite",
        "operationId": "createFavorite",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitRefFavorite"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRefFavorite"
            }
          }
        }
      },
      "get": {
        "tags": [
          "refsFavorites"
        ],
        "summary": "GetRefFavorites",
        "description": "Gets the refs favorites for a repo and an identity.",
        "operationId": "getRefFavorites",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "repositoryId",
            "description": "The id of the repository.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "identityId",
            "description": "The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRefFavorite"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/favorites/refs/{favoriteId}": {
      "delete": {
        "tags": [
          "refsFavorites"
        ],
        "summary": "DeleteRefFavorite",
        "description": "",
        "operationId": "deleteRefFavorite",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "favoriteId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "refsFavorites"
        ],
        "summary": "GetRefFavorite",
        "description": "",
        "operationId": "getRefFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "favoriteId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRefFavorite"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/pullrequests": {
      "get": {
        "tags": [
          "pullRequests"
        ],
        "summary": "GetPullRequestsByProject",
        "description": "Query pull requests by project",
        "operationId": "getPullRequestsByProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": true,
            "type": "string",
            "format": "gitPullRequestSearchCriteria"
          },
          {
            "in": "query",
            "name": "maxCommentLength",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequest"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories": {
      "post": {
        "tags": [
          "repositories"
        ],
        "summary": "CreateRepository",
        "description": "Create a git repository",
        "operationId": "createRepository",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          }
        }
      },
      "get": {
        "tags": [
          "repositories"
        ],
        "summary": "GetRepositories",
        "description": "Retrieve git repositories.",
        "operationId": "getRepositories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeAllUrls",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRepository"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}": {
      "delete": {
        "tags": [
          "repositories"
        ],
        "summary": "DeleteRepository",
        "description": "Delete a git repository",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "repositories"
        ],
        "summary": "GetRepository",
        "description": "",
        "operationId": "getRepository",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "repositories"
        ],
        "summary": "UpdateRepository",
        "description": "Updates the Git repository with the single populated change in the specified repository information.",
        "operationId": "updateRepository",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRepository"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/blobs": {
      "post": {
        "tags": [
          "blobs"
        ],
        "summary": "GetBlobsZip",
        "description": "Gets one or more blobs in a zip file download.",
        "operationId": "getBlobsZip",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filename",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "stream"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/blobs/{sha1}": {
      "get": {
        "tags": [
          "blobs"
        ],
        "summary": "GetBlob",
        "description": "Gets a single blob.",
        "operationId": "getBlob",
        "produces": [
          "application/octet-stream",
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sha1",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "download",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitBlobRef"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/cherryPicks": {
      "post": {
        "tags": [
          "cherryPicks"
        ],
        "summary": "CreateCherryPick",
        "description": "",
        "operationId": "createCherryPick",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitAsyncRefOperationParameters"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCherryPick"
            }
          }
        }
      },
      "get": {
        "tags": [
          "cherryPicks"
        ],
        "summary": "GetCherryPickForRefName",
        "description": "",
        "operationId": "getCherryPickForRefName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "refName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCherryPick"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}": {
      "get": {
        "tags": [
          "cherryPicks"
        ],
        "summary": "GetCherryPick",
        "description": "",
        "operationId": "getCherryPick",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "cherryPickId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCherryPick"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/commits": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "GetCommits",
        "description": "Retrieve git commits for a project",
        "operationId": "getCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": true,
            "type": "string",
            "format": "gitQueryCommitsCriteria"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitCommitRef"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}": {
      "get": {
        "tags": [
          "commits"
        ],
        "summary": "GetCommit",
        "description": "Retrieve a particular commit.",
        "operationId": "getCommit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "The id of the commit.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "changeCount",
            "description": "The number of changes to include in the result.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCommit"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/changes": {
      "get": {
        "tags": [
          "changes"
        ],
        "summary": "GetChanges",
        "description": "Retrieve changes for a particular commit.",
        "operationId": "getChanges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "The id of the commit.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "The maximum number of changes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of changes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCommitChanges"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/statuses": {
      "post": {
        "tags": [
          "statuses"
        ],
        "summary": "CreateCommitStatus",
        "description": "",
        "operationId": "createCommitStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitStatus"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitStatus"
            }
          }
        }
      },
      "get": {
        "tags": [
          "statuses"
        ],
        "summary": "GetStatuses",
        "description": "",
        "operationId": "getStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "latestOnly",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitStatus"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/commitsbatch": {
      "post": {
        "tags": [
          "commitsBatch"
        ],
        "summary": "GetCommitsBatch",
        "description": "Retrieve git commits for a project",
        "operationId": "getCommitsBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitQueryCommitsCriteria"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeStatuses",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitCommitRef"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/diffs/commits": {
      "get": {
        "tags": [
          "commitDiffs"
        ],
        "summary": "GetCommitDiffs",
        "description": "Get differences in committed items between two commits.",
        "operationId": "getCommitDiffs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "Friendly name or guid of repository",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "diffCommonCommit",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "top",
            "description": "Maximum number of changes to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of changes to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "baseVersionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitBaseVersionDescriptor"
          },
          {
            "in": "query",
            "name": "targetVersionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitTargetVersionDescriptor"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitCommitDiffs"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/importRequests": {
      "post": {
        "tags": [
          "importRequests"
        ],
        "summary": "CreateImportRequest",
        "description": "Create an import request",
        "operationId": "createImportRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitImportRequest"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "validateParameters",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitImportRequest"
            }
          }
        }
      },
      "get": {
        "tags": [
          "importRequests"
        ],
        "summary": "QueryImportRequests",
        "description": "Retrieve import requests for a repository",
        "operationId": "queryImportRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeAbandoned",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitImportRequest"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}": {
      "get": {
        "tags": [
          "importRequests"
        ],
        "summary": "GetImportRequest",
        "description": "Retrieve a particular import request",
        "operationId": "getImportRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "importRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitImportRequest"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "importRequests"
        ],
        "summary": "UpdateImportRequest",
        "description": "Update an import request",
        "operationId": "updateImportRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitImportRequest"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "importRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitImportRequest"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/items": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "GetItems",
        "description": "Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.",
        "operationId": "getItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "scopePath",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursionLevel",
            "description": "",
            "required": false,
            "type": "string",
            "format": "versionControlRecursionType"
          },
          {
            "in": "query",
            "name": "includeContentMetadata",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "latestProcessedChange",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "download",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "versionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitVersionDescriptor"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitItem"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/items/{path}": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "GetItem",
        "description": "Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.",
        "operationId": "getItem",
        "produces": [
          "application/octet-stream",
          "text/plain",
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "scopePath",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursionLevel",
            "description": "",
            "required": false,
            "type": "string",
            "format": "versionControlRecursionType"
          },
          {
            "in": "query",
            "name": "includeContentMetadata",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "latestProcessedChange",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "download",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "versionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitVersionDescriptor"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitItem"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/itemsbatch": {
      "post": {
        "tags": [
          "itemsBatch"
        ],
        "summary": "GetItemsBatch",
        "description": "Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path",
        "operationId": "getItemsBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitItemRequestData"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "array"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullrequestquery": {
      "post": {
        "tags": [
          "pullRequestQuery"
        ],
        "summary": "GetPullRequestQuery",
        "description": "Query for pull requests",
        "operationId": "getPullRequestQuery",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestQuery"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestQuery"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullrequests": {
      "post": {
        "tags": [
          "pullRequests"
        ],
        "summary": "CreatePullRequest",
        "description": "Create a git pull request",
        "operationId": "createPullRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequests"
        ],
        "summary": "GetPullRequests",
        "description": "Query for pull requests",
        "operationId": "getPullRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": true,
            "type": "string",
            "format": "gitPullRequestSearchCriteria"
          },
          {
            "in": "query",
            "name": "maxCommentLength",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequest"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullrequests/{pullRequestId}": {
      "get": {
        "tags": [
          "pullRequests"
        ],
        "summary": "GetPullRequest",
        "description": "Retrieve a pull request",
        "operationId": "getPullRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "maxCommentLength",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeWorkItemRefs",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pullRequests"
        ],
        "summary": "UpdatePullRequest",
        "description": "Updates a pull request",
        "operationId": "updatePullRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequest"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments": {
      "get": {
        "tags": [
          "pullRequestAttachments"
        ],
        "summary": "GetAttachments",
        "description": "",
        "operationId": "getAttachments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/attachment"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}": {
      "post": {
        "tags": [
          "pullRequestAttachments"
        ],
        "summary": "CreateAttachment",
        "description": "Create a new attachment",
        "operationId": "createAttachment",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Stream to upload",
            "required": true,
            "schema": {
              "type": "string",
              "format": "stream"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fileName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/attachment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "pullRequestAttachments"
        ],
        "summary": "DeleteAttachment",
        "description": "",
        "operationId": "deleteAttachment",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fileName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestAttachments"
        ],
        "summary": "GetAttachmentContent",
        "description": "",
        "operationId": "getAttachmentContent",
        "produces": [
          "application/zip",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fileName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "stream"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/commits": {
      "get": {
        "tags": [
          "pullRequestCommits"
        ],
        "summary": "GetPullRequestCommits",
        "description": "Retrieve pull request's commits",
        "operationId": "getPullRequestCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitCommitRef"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts": {
      "get": {
        "tags": [
          "pullRequestConflicts"
        ],
        "summary": "GetPullRequestConflicts",
        "description": "Retrieve all conflicts for a pull request",
        "operationId": "getPullRequestConflicts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeObsolete",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitConflict"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}": {
      "get": {
        "tags": [
          "pullRequestConflicts"
        ],
        "summary": "GetPullRequestConflict",
        "description": "Retrieve one conflict for a pull request by ID",
        "operationId": "getPullRequestConflict",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "conflictId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitConflict"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pullRequestConflicts"
        ],
        "summary": "UpdatePullRequestConflict",
        "description": "Update merge conflict resolution",
        "operationId": "updatePullRequestConflict",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitConflict"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "conflictId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitConflict"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations": {
      "get": {
        "tags": [
          "pullRequestIterations"
        ],
        "summary": "GetPullRequestIterations",
        "description": "",
        "operationId": "getPullRequestIterations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequestIteration"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}": {
      "get": {
        "tags": [
          "pullRequestIterations"
        ],
        "summary": "GetPullRequestIteration",
        "description": "",
        "operationId": "getPullRequestIteration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestIteration"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/changes": {
      "get": {
        "tags": [
          "pullRequestIterationChanges"
        ],
        "summary": "GetPullRequestIterationChanges",
        "description": "",
        "operationId": "getPullRequestIterationChanges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "compareTo",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestIterationChanges"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/commits": {
      "get": {
        "tags": [
          "pullRequestCommits"
        ],
        "summary": "GetPullRequestIterationCommits",
        "description": "Get the commits for an iteration.",
        "operationId": "getPullRequestIterationCommits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "Iteration to retrieve commits for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitCommitRef"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses": {
      "post": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "CreatePullRequestIterationStatus",
        "description": "Create a pull request iteration status",
        "operationId": "createPullRequestIterationStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "GetPullRequestIterationStatuses",
        "description": "Get all the statuses associated with a pull request iteration.",
        "operationId": "getPullRequestIterationStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequestStatus"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}": {
      "get": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "GetPullRequestIterationStatus",
        "description": "Get the specific pull request iteration status.",
        "operationId": "getPullRequestIterationStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers": {
      "post": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "CreatePullRequestReviewers",
        "description": "Adds reviewers to a git pull request",
        "operationId": "createPullRequestReviewers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/identityRef"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/identityRefWithVote"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "GetPullRequestReviewers",
        "description": "Retrieve a pull request reviewers",
        "operationId": "getPullRequestReviewers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/identityRefWithVote"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}": {
      "put": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "CreatePullRequestReviewer",
        "description": "Adds a reviewer to a git pull request",
        "operationId": "createPullRequestReviewer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identityRefWithVote"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/identityRefWithVote"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "DeletePullRequestReviewer",
        "description": "Adds reviewers to a git pull request",
        "operationId": "deletePullRequestReviewer",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestReviewers"
        ],
        "summary": "GetPullRequestReviewer",
        "description": "Retrieve a reviewer from a pull request",
        "operationId": "getPullRequestReviewer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/identityRefWithVote"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/share": {
      "post": {
        "tags": [
          "pullRequestShare"
        ],
        "summary": "SharePullRequest",
        "description": "",
        "operationId": "sharePullRequest",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shareNotificationContext"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses": {
      "post": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "CreatePullRequestStatus",
        "description": "Create a pull request status",
        "operationId": "createPullRequestStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "GetPullRequestStatuses",
        "description": "Get all the statuses associated with a pull request.",
        "operationId": "getPullRequestStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequestStatus"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}": {
      "get": {
        "tags": [
          "pullRequestStatuses"
        ],
        "summary": "GetPullRequestStatus",
        "description": "Get the specific pull request status.",
        "operationId": "getPullRequestStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestStatus"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads": {
      "post": {
        "tags": [
          "pullRequestThreads"
        ],
        "summary": "CreateThread",
        "description": "Create a pull request review comment thread",
        "operationId": "createThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestThreads"
        ],
        "summary": "GetThreads",
        "description": "Get all pull request comment threads.",
        "operationId": "getThreads",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "iteration",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "baseIteration",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPullRequestCommentThread"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}": {
      "get": {
        "tags": [
          "pullRequestThreads"
        ],
        "summary": "GetPullRequestThread",
        "description": "Get a pull request comment thread by id for a pull request",
        "operationId": "getPullRequestThread",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "iteration",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "baseIteration",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pullRequestThreads"
        ],
        "summary": "UpdateThread",
        "description": "Update a pull request review comment thread",
        "operationId": "updateThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPullRequestCommentThread"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments": {
      "post": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "CreateComment",
        "description": "Create a pull request review comment",
        "operationId": "createComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/comment"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "GetComments",
        "description": "Get all pull request comments in a thread.",
        "operationId": "getComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/comment"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}": {
      "delete": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "DeleteComment",
        "description": "Delete a pull request comment by id for a pull request",
        "operationId": "deleteComment",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "GetComment",
        "description": "Get a pull request comment by id for a pull request",
        "operationId": "getComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pullRequestThreadComments"
        ],
        "summary": "UpdateComment",
        "description": "Update a pull request review comment thread",
        "operationId": "updateComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/comment"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/workitems": {
      "get": {
        "tags": [
          "pullRequestWorkItems"
        ],
        "summary": "GetPullRequestWorkItems",
        "description": "Retrieve a pull request work items",
        "operationId": "getPullRequestWorkItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/associatedWorkItem"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pushes": {
      "post": {
        "tags": [
          "pushes"
        ],
        "summary": "CreatePush",
        "description": "Push changes to the repository.",
        "operationId": "createPush",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitPush"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, a project-scoped route must be used.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPush"
            }
          }
        }
      },
      "get": {
        "tags": [
          "pushes"
        ],
        "summary": "GetPushes",
        "description": "Retrieves pushes associated with the specified repository.",
        "operationId": "getPushes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchCriteria",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitPushSearchCriteria"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitPush"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}": {
      "get": {
        "tags": [
          "pushes"
        ],
        "summary": "GetPush",
        "description": "Retrieve a particular push.",
        "operationId": "getPush",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pushId",
            "description": "The id of the push.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "The number of commits to include in the result.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeRefUpdates",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitPush"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/refs": {
      "post": {
        "tags": [
          "refs"
        ],
        "summary": "UpdateRefs",
        "description": "Creates or updates refs with the given information",
        "operationId": "updateRefs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of ref updates to attempt to perform",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRefUpdate"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "The id of the project.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRefUpdateResult"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}": {
      "get": {
        "tags": [
          "refs"
        ],
        "summary": "GetRefs",
        "description": "Queries the provided repository for its refs and returns them.",
        "operationId": "getRefs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "[optional] A filter to apply to the refs.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "[optional] Specifies if referenceLinks should be included in the result. default is false.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "latestStatusesOnly",
            "description": "",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitRef"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/refs/{filter}": {
      "patch": {
        "tags": [
          "refs"
        ],
        "summary": "UpdateRef",
        "description": "",
        "operationId": "updateRef",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitRefUpdate"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRef"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/reverts": {
      "post": {
        "tags": [
          "reverts"
        ],
        "summary": "CreateRevert",
        "description": "",
        "operationId": "createRevert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitAsyncRefOperationParameters"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRevert"
            }
          }
        }
      },
      "get": {
        "tags": [
          "reverts"
        ],
        "summary": "GetRevertForRefName",
        "description": "",
        "operationId": "getRevertForRefName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "refName",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRevert"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}": {
      "get": {
        "tags": [
          "reverts"
        ],
        "summary": "GetRevert",
        "description": "",
        "operationId": "getRevert",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "revertId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitRevert"
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/stats/branches": {
      "get": {
        "tags": [
          "branchStats"
        ],
        "summary": "GetBranch",
        "description": "Retrieve statistics about a single branch.",
        "operationId": "getBranch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "Friendly name or guid of repository",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name of the branch",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "baseVersionDescriptor",
            "description": "",
            "required": false,
            "type": "string",
            "format": "gitVersionDescriptor"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitBranchStats"
            }
          }
        }
      },
      "post": {
        "tags": [
          "branchStats"
        ],
        "summary": "GetBranchStatsBatch",
        "description": "Retrieve statistics for multiple commits",
        "operationId": "getBranchStatsBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitQueryBranchStatsCriteria"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "Friendly name or guid of repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitBranchStats"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/suggestions": {
      "get": {
        "tags": [
          "suggestions"
        ],
        "summary": "GetSuggestions",
        "description": "Retrieve a set of suggestions (including a pull request suggestion).",
        "operationId": "getSuggestions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gitSuggestion"
              }
            }
          }
        }
      }
    },
    "/{project}/_apis/git/repositories/{repositoryId}/trees/{sha1}": {
      "get": {
        "tags": [
          "trees"
        ],
        "summary": "GetTree",
        "description": "",
        "operationId": "getTree",
        "produces": [
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sha1",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "recursive",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/gitTreeRef"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "associatedWorkItem": {
      "type": "object",
      "properties": {
        "assignedTo": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "description": "REST url",
          "type": "string"
        },
        "webUrl": {
          "type": "string"
        },
        "workItemType": {
          "type": "string"
        }
      }
    },
    "asyncGitOperationNotification": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "asyncRefOperationCommitLevelEventNotification": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/asyncGitOperationNotification"
        }
      ],
      "properties": {
        "commitId": {
          "type": "string"
        }
      }
    },
    "asyncRefOperationCompletedNotification": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/asyncGitOperationNotification"
        }
      ],
      "properties": {
        "newRefName": {
          "type": "string"
        }
      }
    },
    "asyncRefOperationConflictNotification": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/asyncRefOperationCommitLevelEventNotification"
        }
      ],
      "properties": {
      }
    },
    "asyncRefOperationGeneralFailureNotification": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/asyncGitOperationNotification"
        }
      ],
      "properties": {
      }
    },
    "asyncRefOperationProgressNotification": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/asyncRefOperationCommitLevelEventNotification"
        }
      ],
      "properties": {
        "progress": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "attachment": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "author": {
          "description": "The person that uploaded this attachment",
          "$ref": "#/definitions/identityRef"
        },
        "contentHash": {
          "description": "Content hash of on-disk representation of file content. Its calculated by the server by using SHA1 hash function.",
          "type": "string"
        },
        "createdDate": {
          "description": "The time the attachment was uploaded",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the attachment, can be null.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the attachment, can't be null or empty.",
          "type": "string"
        },
        "id": {
          "description": "Id of the code review attachment",
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "$ref": "#/definitions/propertiesCollection"
        },
        "url": {
          "description": "The url to download the content of the attachment",
          "type": "string"
        }
      }
    },
    "change": {
      "type": "object",
      "properties": {
        "changeType": {
          "enum": [
            "none",
            "add",
            "edit",
            "encoding",
            "rename",
            "delete",
            "undelete",
            "branch",
            "merge",
            "lock",
            "rollback",
            "sourceRename",
            "targetRename",
            "property",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlChangeType"
          }
        },
        "item": {
          "type": "string",
          "format": "t"
        },
        "newContent": {
          "$ref": "#/definitions/itemContent"
        },
        "sourceServerItem": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "changeCountDictionary": {
      "type": "object",
      "allOf": [
        {
          "type": "object"
        }
      ],
      "properties": {
      }
    },
    "changeList": {
      "type": "object",
      "properties": {
        "allChangesIncluded": {
          "type": "boolean"
        },
        "changeCounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "change"
          }
        },
        "comment": {
          "type": "string"
        },
        "commentTruncated": {
          "type": "boolean"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/checkinNote"
          }
        },
        "owner": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string",
          "format": "uuid"
        },
        "sortDate": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "changeListSearchCriteria": {
      "type": "object",
      "properties": {
        "compareVersion": {
          "description": "If provided, a version descriptor to compare against base",
          "type": "string"
        },
        "excludeDeletes": {
          "description": "If true, don't include delete history entries",
          "type": "boolean"
        },
        "followRenames": {
          "description": "Whether or not to follow renames for the given item being queried",
          "type": "boolean"
        },
        "fromDate": {
          "description": "If provided, only include history entries created after this date (string)",
          "type": "string"
        },
        "fromVersion": {
          "description": "If provided, a version descriptor for the earliest change list to include",
          "type": "string"
        },
        "itemPath": {
          "description": "Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.",
          "type": "string"
        },
        "itemPaths": {
          "description": "List of item paths to search under. If this member is used then itemPath will be ignored.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "itemVersion": {
          "description": "Version of the items to search",
          "type": "string"
        },
        "skip": {
          "description": "Number of results to skip (used when clicking more...)",
          "type": "integer",
          "format": "int32"
        },
        "toDate": {
          "description": "If provided, only include history entries created before this date (string)",
          "type": "string"
        },
        "top": {
          "description": "If provided, the maximum number of history entries to return",
          "type": "integer",
          "format": "int32"
        },
        "toVersion": {
          "description": "If provided, a version descriptor for the latest change list to include",
          "type": "string"
        },
        "user": {
          "description": "Alias or display name of user who made the changes",
          "type": "string"
        }
      }
    },
    "checkinNote": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "comment": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "author": {
          "description": "The author of the pull request comment.",
          "$ref": "#/definitions/identityRef"
        },
        "commentType": {
          "description": "Determines what kind of comment when it was created.",
          "enum": [
            "unknown",
            "text",
            "codeChange",
            "system"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.CommentType"
          }
        },
        "content": {
          "description": "The comment's content.",
          "type": "string"
        },
        "id": {
          "description": "The pull request comment id. It always starts from 1.",
          "type": "integer",
          "format": "int16"
        },
        "isDeleted": {
          "description": "Marks if this comment was soft-deleted.",
          "type": "boolean"
        },
        "lastUpdatedDate": {
          "description": "The date a comment was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "parentCommentId": {
          "description": "The pull request comment id of the parent comment. This is used for replies",
          "type": "integer",
          "format": "int16"
        },
        "publishedDate": {
          "description": "The date a comment was first published.",
          "type": "string",
          "format": "date-time"
        },
        "usersLiked": {
          "description": "A list of the users who've liked this comment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/identityRef"
          }
        }
      }
    },
    "commentIterationContext": {
      "type": "object",
      "properties": {
        "firstComparingIteration": {
          "description": "First comparing iteration Id. Minimum value is 1.",
          "type": "integer",
          "format": "int16"
        },
        "secondComparingIteration": {
          "description": "Second comparing iteration Id. Minimum value is 1.",
          "type": "integer",
          "format": "int16"
        }
      }
    },
    "commentPosition": {
      "type": "object",
      "properties": {
        "line": {
          "description": "Position line starting with one.",
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "description": "Position offset starting with zero.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "commentThread": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "comments": {
          "description": "A list of the comments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/comment"
          }
        },
        "id": {
          "description": "The comment thread id.",
          "type": "integer",
          "format": "int32"
        },
        "isDeleted": {
          "description": "Specify if the thread is deleted which happens when all comments are deleted",
          "type": "boolean"
        },
        "lastUpdatedDate": {
          "description": "The time this thread was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "properties": {
          "description": "A list of (optional) thread properties.",
          "$ref": "#/definitions/propertiesCollection"
        },
        "publishedDate": {
          "description": "The time this thread was published.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the comment thread.",
          "enum": [
            "unknown",
            "active",
            "fixed",
            "wontFix",
            "closed",
            "byDesign",
            "pending"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.CommentThreadStatus"
          }
        },
        "threadContext": {
          "description": "Specify thread context such as position in left/right file.",
          "$ref": "#/definitions/commentThreadContext"
        }
      }
    },
    "commentThreadContext": {
      "type": "object",
      "properties": {
        "filePath": {
          "description": "File path relative to the root of the repository. It's up to the client to use any path format.",
          "type": "string"
        },
        "leftFileEnd": {
          "description": "Position of last character of the comment in left file.",
          "$ref": "#/definitions/commentPosition"
        },
        "leftFileStart": {
          "description": "Position of first character of the comment in left file.",
          "$ref": "#/definitions/commentPosition"
        },
        "rightFileEnd": {
          "description": "Position of last character of the comment in right file.",
          "$ref": "#/definitions/commentPosition"
        },
        "rightFileStart": {
          "description": "Position of first character of the comment in right file.",
          "$ref": "#/definitions/commentPosition"
        }
      }
    },
    "commentTrackingCriteria": {
      "type": "object",
      "properties": {
        "firstComparingIteration": {
          "description": "The first comparing iteration being viewed. Threads will be tracked if this is greater than 0.",
          "type": "integer",
          "format": "int32"
        },
        "secondComparingIteration": {
          "description": "The second comparing iteration being viewed. Threads will be tracked if this is greater than 0.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "fileContentMetadata": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        },
        "encoding": {
          "type": "integer",
          "format": "int32"
        },
        "extension": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "isBinary": {
          "type": "boolean"
        },
        "isImage": {
          "type": "boolean"
        },
        "vsLink": {
          "type": "string"
        }
      }
    },
    "gitAsyncRefOperation": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "detailedStatus": {
          "$ref": "#/definitions/gitAsyncRefOperationDetail"
        },
        "parameters": {
          "$ref": "#/definitions/gitAsyncRefOperationParameters"
        },
        "status": {
          "enum": [
            "queued",
            "inProgress",
            "completed",
            "failed",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncOperationStatus"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "gitAsyncRefOperationDetail": {
      "type": "object",
      "properties": {
        "conflict": {
          "type": "boolean"
        },
        "currentCommitId": {
          "type": "string"
        },
        "progress": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "gitAsyncRefOperationParameters": {
      "type": "object",
      "properties": {
        "generatedRefName": {
          "type": "string"
        },
        "ontoRefName": {
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/gitRepository"
        },
        "source": {
          "$ref": "#/definitions/gitAsyncRefOperationSource"
        }
      }
    },
    "gitAsyncRefOperationSource": {
      "type": "object",
      "properties": {
        "commitList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitCommitRef"
          }
        },
        "pullRequestId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitBaseVersionDescriptor": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitVersionDescriptor"
        }
      ],
      "properties": {
        "baseVersion": {
          "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
          "type": "string"
        },
        "baseVersionOptions": {
          "description": "Version options - Specify additional modifiers to version (e.g Previous)",
          "enum": [
            "none",
            "previousChange",
            "firstParent"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions"
          }
        },
        "baseVersionType": {
          "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
          "enum": [
            "branch",
            "tag",
            "commit",
            "index"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType"
          }
        }
      }
    },
    "gitBlobRef": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "objectId": {
          "description": "SHA1 hash of git object",
          "type": "string"
        },
        "size": {
          "description": "Size of blob content (in bytes)",
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "gitBranchStats": {
      "type": "object",
      "properties": {
        "aheadCount": {
          "type": "integer",
          "format": "int32"
        },
        "behindCount": {
          "type": "integer",
          "format": "int32"
        },
        "commit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "isBaseVersion": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "gitChange": {
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "change"
        }
      ],
      "properties": {
        "changeId": {
          "description": "Id of the change within the group.  For example, within the iteration",
          "type": "integer",
          "format": "int32"
        },
        "newContentTemplate": {
          "description": "New Content template to be used",
          "$ref": "#/definitions/gitTemplate"
        },
        "originalPath": {
          "description": "Original path of item if different from current path",
          "type": "string"
        }
      }
    },
    "gitCherryPick": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitAsyncRefOperation"
        }
      ],
      "properties": {
        "cherryPickId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitCommit": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitCommitRef"
        }
      ],
      "properties": {
        "push": {
          "$ref": "#/definitions/gitPushRef"
        },
        "treeId": {
          "type": "string"
        }
      }
    },
    "gitCommitChanges": {
      "type": "object",
      "properties": {
        "changeCounts": {
          "$ref": "#/definitions/changeCountDictionary"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitChange"
          }
        }
      }
    },
    "gitCommitDiffs": {
      "type": "object",
      "properties": {
        "aheadCount": {
          "type": "integer",
          "format": "int32"
        },
        "allChangesIncluded": {
          "type": "boolean"
        },
        "baseCommit": {
          "type": "string"
        },
        "behindCount": {
          "type": "integer",
          "format": "int32"
        },
        "changeCounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitChange"
          }
        },
        "commonCommit": {
          "type": "string"
        },
        "targetCommit": {
          "type": "string"
        }
      }
    },
    "gitCommitRef": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "author": {
          "$ref": "#/definitions/gitUserDate"
        },
        "changeCounts": {
          "$ref": "#/definitions/changeCountDictionary"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitChange"
          }
        },
        "comment": {
          "type": "string"
        },
        "commentTruncated": {
          "type": "boolean"
        },
        "commitId": {
          "type": "string"
        },
        "committer": {
          "$ref": "#/definitions/gitUserDate"
        },
        "parents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remoteUrl": {
          "type": "string"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitStatus"
          }
        },
        "url": {
          "type": "string"
        },
        "workItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourceRef"
          }
        }
      }
    },
    "gitCommitToCreate": {
      "type": "object",
      "properties": {
        "baseRef": {
          "$ref": "#/definitions/gitRef"
        },
        "comment": {
          "type": "string"
        },
        "pathActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitPathAction"
          }
        }
      }
    },
    "gitConflict": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "conflictId": {
          "type": "integer",
          "format": "int32"
        },
        "conflictPath": {
          "type": "string"
        },
        "conflictType": {
          "enum": [
            "none",
            "addAdd",
            "addRename",
            "deleteEdit",
            "deleteRename",
            "directoryFile",
            "directoryChild",
            "editDelete",
            "editEdit",
            "fileDirectory",
            "rename1to2",
            "rename2to1",
            "renameAdd",
            "renameDelete",
            "renameRename"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictType"
          }
        },
        "mergeBaseCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "mergeOrigin": {
          "$ref": "#/definitions/gitMergeOriginRef"
        },
        "mergeSourceCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "mergeTargetCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "resolutionError": {
          "enum": [
            "none",
            "mergeContentNotFound",
            "pathInUse",
            "invalidPath",
            "unknownAction",
            "unknownMergeType",
            "otherError"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionError"
          }
        },
        "resolutionStatus": {
          "enum": [
            "unresolved",
            "partiallyResolved",
            "resolved"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionStatus"
          }
        },
        "resolvedBy": {
          "$ref": "#/definitions/identityRef"
        },
        "resolvedDate": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "gitConflictAddAdd": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/gitResolutionMergeContent"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        }
      }
    },
    "gitConflictAddRename": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionPathConflict"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetOriginalPath": {
          "type": "string"
        }
      }
    },
    "gitConflictDeleteEdit": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionPickOneAction"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        }
      }
    },
    "gitConflictDeleteRename": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionPickOneAction"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetNewPath": {
          "type": "string"
        }
      }
    },
    "gitConflictDirectoryFile": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/gitResolutionPathConflict"
        },
        "sourceTree": {
          "$ref": "#/definitions/gitTreeRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        }
      }
    },
    "gitConflictEditDelete": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionPickOneAction"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        }
      }
    },
    "gitConflictEditEdit": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionMergeContent"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        }
      }
    },
    "gitConflictFileDirectory": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/gitResolutionPathConflict"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetTree": {
          "$ref": "#/definitions/gitTreeRef"
        }
      }
    },
    "gitConflictRename1to2": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionRename1to2"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "sourceNewPath": {
          "type": "string"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetNewPath": {
          "type": "string"
        }
      }
    },
    "gitConflictRename2to1": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/gitResolutionPathConflict"
        },
        "sourceNewBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "sourceOriginalBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "sourceOriginalPath": {
          "type": "string"
        },
        "targetNewBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetOriginalBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetOriginalPath": {
          "type": "string"
        }
      }
    },
    "gitConflictRenameAdd": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionPathConflict"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "sourceOriginalPath": {
          "type": "string"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        }
      }
    },
    "gitConflictRenameDelete": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionPickOneAction"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "sourceNewPath": {
          "type": "string"
        }
      }
    },
    "gitConflictRenameRename": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "originalPath": {
          "type": "string"
        },
        "resolution": {
          "$ref": "#/definitions/gitResolutionMergeContent"
        },
        "sourceBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/gitBlobRef"
        }
      }
    },
    "gitDeletedRepository": {
      "type": "object",
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "deletedBy": {
          "$ref": "#/definitions/identityRef"
        },
        "deletedDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/teamProjectReference"
        }
      }
    },
    "gitFilePathsCollection": {
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "gitHistoryQueryResults": {
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "historyQueryResults"
        }
      ],
      "properties": {
        "startingCommitId": {
          "description": "Seed commit used for querying history.  Used for skip feature.",
          "type": "string"
        },
        "unpopulatedCount": {
          "type": "integer",
          "format": "int32"
        },
        "unprocessedCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitImportFailedEvent": {
      "type": "object",
      "properties": {
        "sourceRepositoryName": {
          "type": "string"
        },
        "targetRepository": {
          "$ref": "#/definitions/gitRepository"
        }
      }
    },
    "gitImportGitSource": {
      "type": "object",
      "properties": {
        "url": {
          "description": "Url for the source repo",
          "type": "string"
        }
      }
    },
    "gitImportRequest": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "detailedStatus": {
          "$ref": "#/definitions/gitImportStatusDetail"
        },
        "importRequestId": {
          "type": "integer",
          "format": "int32"
        },
        "parameters": {
          "description": "Parameters for creating an import request",
          "$ref": "#/definitions/gitImportRequestParameters"
        },
        "repository": {
          "$ref": "#/definitions/gitRepository"
        },
        "status": {
          "enum": [
            "queued",
            "inProgress",
            "completed",
            "failed",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncOperationStatus"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "gitImportRequestParameters": {
      "type": "object",
      "properties": {
        "deleteServiceEndpointAfterImportIsDone": {
          "description": "Option to delete service endpoint when import is done",
          "type": "boolean"
        },
        "gitSource": {
          "description": "Source for importing git repository",
          "$ref": "#/definitions/gitImportGitSource"
        },
        "serviceEndpointId": {
          "description": "Service Endpoint for connection to external endpoint",
          "type": "string",
          "format": "uuid"
        },
        "tfvcSource": {
          "description": "Source for importing tfvc repository",
          "$ref": "#/definitions/gitImportTfvcSource"
        }
      }
    },
    "gitImportStatusDetail": {
      "type": "object",
      "properties": {
        "allSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "currentStep": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "gitImportSucceededEvent": {
      "type": "object",
      "properties": {
        "sourceRepositoryName": {
          "type": "string"
        },
        "targetRepository": {
          "$ref": "#/definitions/gitRepository"
        }
      }
    },
    "gitImportTfvcSource": {
      "type": "object",
      "properties": {
        "importHistory": {
          "description": "Set true to import History, false otherwise",
          "type": "boolean"
        },
        "importHistoryDurationInDays": {
          "description": "Get history for last n days (max allowed value is 180 days)",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
          "type": "string"
        }
      }
    },
    "gitItem": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/itemModel"
        }
      ],
      "properties": {
        "commitId": {
          "description": "SHA1 of commit item was fetched at",
          "type": "string"
        },
        "gitObjectType": {
          "description": "Type of object (Commit, Tree, Blob, Tag, ...)",
          "enum": [
            "bad",
            "commit",
            "tree",
            "blob",
            "tag",
            "ext2",
            "ofsDelta",
            "refDelta"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitObjectType"
          }
        },
        "latestProcessedChange": {
          "description": "Shallow ref to commit that last changed this item Only populated if latestProcessedChange is requested May not be accurate if latest change is not yet cached",
          "$ref": "#/definitions/gitCommitRef"
        },
        "objectId": {
          "description": "Git object id",
          "type": "string"
        },
        "originalObjectId": {
          "description": "Git object id",
          "type": "string"
        }
      }
    },
    "gitItemDescriptor": {
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to item",
          "type": "string"
        },
        "recursionLevel": {
          "description": "Specifies whether to include children (OneLevel), all descendants (Full), or None",
          "enum": [
            "none",
            "oneLevel",
            "oneLevelPlusNestedEmptyFolders",
            "full"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType"
          }
        },
        "version": {
          "description": "Version string (interpretation based on VersionType defined in subclass",
          "type": "string"
        },
        "versionOptions": {
          "description": "Version modifiers (e.g. previous)",
          "enum": [
            "none",
            "previousChange",
            "firstParent"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions"
          }
        },
        "versionType": {
          "description": "How to interpret version (branch,tag,commit)",
          "enum": [
            "branch",
            "tag",
            "commit",
            "index"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType"
          }
        }
      }
    },
    "gitItemRequestData": {
      "type": "object",
      "properties": {
        "includeContentMetadata": {
          "description": "Whether to include metadata for all items",
          "type": "boolean"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "itemDescriptors": {
          "description": "Collection of items to fetch, including path, version, and recursion level",
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitItemDescriptor"
          }
        },
        "latestProcessedChange": {
          "description": "Whether to include shallow ref to commit that last changed each item",
          "type": "boolean"
        }
      }
    },
    "gitLastChangeItem": {
      "type": "object",
      "properties": {
        "commitId": {
          "description": "Gets or sets the commit Id this item was modified most recently for the provided version.",
          "type": "string"
        },
        "path": {
          "description": "Gets or sets the path of the item.",
          "type": "string"
        }
      }
    },
    "gitLastChangeTreeItems": {
      "type": "object",
      "properties": {
        "items": {
          "description": "The last change of items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitLastChangeItem"
          }
        },
        "lastExploredTime": {
          "description": "The last explored time, in case the result is not comprehensive. Null otherwise.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gitMergeOriginRef": {
      "type": "object",
      "properties": {
        "pullRequestId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitPathAction": {
      "type": "object",
      "properties": {
        "action": {
          "enum": [
            "none",
            "edit",
            "delete",
            "add",
            "rename"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitPathActions"
          }
        },
        "base64Content": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "rawTextContent": {
          "type": "string"
        },
        "targetPath": {
          "type": "string"
        }
      }
    },
    "gitPathToItemsCollection": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "array"
          }
        }
      }
    },
    "gitPullRequest": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "artifactId": {
          "type": "string"
        },
        "autoCompleteSetBy": {
          "$ref": "#/definitions/identityRef"
        },
        "closedBy": {
          "$ref": "#/definitions/identityRef"
        },
        "closedDate": {
          "type": "string",
          "format": "date-time"
        },
        "codeReviewId": {
          "type": "integer",
          "format": "int32"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitCommitRef"
          }
        },
        "completionOptions": {
          "$ref": "#/definitions/gitPullRequestCompletionOptions"
        },
        "completionQueueTime": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "$ref": "#/definitions/identityRef"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "lastMergeCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "lastMergeSourceCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "lastMergeTargetCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "mergeId": {
          "type": "string",
          "format": "uuid"
        },
        "mergeStatus": {
          "enum": [
            "notSet",
            "queued",
            "conflicts",
            "succeeded",
            "rejectedByPolicy",
            "failure"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestAsyncStatus"
          }
        },
        "pullRequestId": {
          "type": "integer",
          "format": "int32"
        },
        "remoteUrl": {
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/gitRepository"
        },
        "reviewers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/identityRefWithVote"
          }
        },
        "sourceRefName": {
          "type": "string"
        },
        "status": {
          "enum": [
            "notSet",
            "active",
            "abandoned",
            "completed",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestStatus"
          }
        },
        "supportsIterations": {
          "type": "boolean"
        },
        "targetRefName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "workItemRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourceRef"
          }
        }
      }
    },
    "gitPullRequestChange": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitChange"
        }
      ],
      "properties": {
        "changeTrackingId": {
          "description": "Id used to track files through multiple changes",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitPullRequestCommentThread": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/commentThread"
        }
      ],
      "properties": {
        "pullRequestThreadContext": {
          "description": "Extended context information unique to pull requests",
          "$ref": "#/definitions/gitPullRequestCommentThreadContext"
        }
      }
    },
    "gitPullRequestCommentThreadContext": {
      "type": "object",
      "properties": {
        "changeTrackingId": {
          "description": "Used to track a comment across iterations. This value can be found by looking at the iteration's changes list. Must be set for pull requests with iteration support. Otherwise, it's not required for 'legacy' pull requests.",
          "type": "integer",
          "format": "int32"
        },
        "iterationContext": {
          "description": "Specify comparing iteration Ids when a comment thread is added while comparing 2 iterations.",
          "$ref": "#/definitions/commentIterationContext"
        },
        "trackingCriteria": {
          "description": "The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.",
          "$ref": "#/definitions/commentTrackingCriteria"
        }
      }
    },
    "gitPullRequestCompletionOptions": {
      "type": "object",
      "properties": {
        "deleteSourceBranch": {
          "type": "boolean"
        },
        "mergeCommitMessage": {
          "type": "string"
        },
        "squashMerge": {
          "type": "boolean"
        }
      }
    },
    "gitPullRequestIteration": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "author": {
          "$ref": "#/definitions/identityRef"
        },
        "changeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitPullRequestChange"
          }
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitCommitRef"
          }
        },
        "commonRefCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "hasMoreCommits": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "push": {
          "$ref": "#/definitions/gitPushRef"
        },
        "sourceRefCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "targetRefCommit": {
          "$ref": "#/definitions/gitCommitRef"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gitPullRequestIterationChanges": {
      "type": "object",
      "properties": {
        "changeEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitPullRequestChange"
          }
        },
        "nextSkip": {
          "type": "integer",
          "format": "int32"
        },
        "nextTop": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitPullRequestQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "description": "The query to perform",
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitPullRequestQueryInput"
          }
        },
        "results": {
          "description": "The results of the query",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "gitPullRequestQueryInput": {
      "type": "object",
      "properties": {
        "items": {
          "description": "The list commit ids to search for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "The type of query to perform",
          "enum": [
            "notSet",
            "lastMergeCommit",
            "commit"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQueryType"
          }
        }
      }
    },
    "gitPullRequestReviewFileContentInfo": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "path": {
          "description": "The file change path.",
          "type": "string"
        },
        "sHA1Hash": {
          "description": "Content hash of on-disk representation of file content. Its calculated by the client by using SHA1 hash function. Ensure that uploaded file has same encoding as in source control.",
          "type": "string"
        }
      }
    },
    "gitPullRequestSearchCriteria": {
      "type": "object",
      "properties": {
        "creatorId": {
          "type": "string",
          "format": "uuid"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        },
        "reviewerId": {
          "type": "string",
          "format": "uuid"
        },
        "sourceRefName": {
          "type": "string"
        },
        "status": {
          "enum": [
            "notSet",
            "active",
            "abandoned",
            "completed",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestStatus"
          }
        },
        "targetRefName": {
          "type": "string"
        }
      }
    },
    "gitPullRequestStatus": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitStatus"
        }
      ],
      "properties": {
        "iterationId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitPush": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitPushRef"
        }
      ],
      "properties": {
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitCommitRef"
          }
        },
        "refUpdates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitRefUpdate"
          }
        },
        "repository": {
          "$ref": "#/definitions/gitRepository"
        }
      }
    },
    "gitPushEventData": {
      "type": "object",
      "properties": {
        "afterId": {
          "type": "string"
        },
        "beforeId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitCommit"
          }
        },
        "repository": {
          "$ref": "#/definitions/gitRepository"
        }
      }
    },
    "gitPushRef": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "pushCorrelationId": {
          "type": "string",
          "format": "uuid"
        },
        "pushedBy": {
          "$ref": "#/definitions/identityRef"
        },
        "pushId": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "gitPushSearchCriteria": {
      "type": "object",
      "properties": {
        "fromDate": {
          "type": "string",
          "format": "date-time"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "includeRefUpdates": {
          "type": "boolean"
        },
        "pusherId": {
          "type": "string",
          "format": "uuid"
        },
        "refName": {
          "type": "string"
        },
        "toDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gitQueryBranchStatsCriteria": {
      "type": "object",
      "properties": {
        "baseCommit": {
          "$ref": "#/definitions/gitVersionDescriptor"
        },
        "targetCommits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitVersionDescriptor"
          }
        }
      }
    },
    "gitQueryCommitsCriteria": {
      "type": "object",
      "properties": {
        "$skip": {
          "description": "Number of entries to skip",
          "type": "integer",
          "format": "int32"
        },
        "$top": {
          "description": "Maximum number of entries to retrieve",
          "type": "integer",
          "format": "int32"
        },
        "author": {
          "description": "Alias or display name of the author",
          "type": "string"
        },
        "compareVersion": {
          "description": "If provided, the earliest commit in the graph to search",
          "$ref": "#/definitions/gitVersionDescriptor"
        },
        "excludeDeletes": {
          "description": "If true, don't include delete history entries",
          "type": "boolean"
        },
        "fromCommitId": {
          "description": "If provided, a lower bound for filtering commits alphabetically",
          "type": "string"
        },
        "fromDate": {
          "description": "If provided, only include history entries created after this date (string)",
          "type": "string"
        },
        "ids": {
          "description": "If provided, specifies the exact commit ids of the commits to fetch. May not be combined with other parameters.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "includeWorkItems": {
          "description": "Whether to include linked work items",
          "type": "boolean"
        },
        "itemPath": {
          "description": "Path of item to search under",
          "type": "string"
        },
        "itemVersion": {
          "description": "If provided, identifies the commit or branch to search",
          "$ref": "#/definitions/gitVersionDescriptor"
        },
        "toCommitId": {
          "description": "If provided, an upper bound for filtering commits alphabetically",
          "type": "string"
        },
        "toDate": {
          "description": "If provided, only include history entries created before this date (string)",
          "type": "string"
        },
        "user": {
          "description": "Alias or display name of the committer",
          "type": "string"
        }
      }
    },
    "gitRef": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "isLocked": {
          "type": "boolean"
        },
        "isLockedBy": {
          "$ref": "#/definitions/identityRef"
        },
        "name": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "peeledObjectId": {
          "type": "string"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitStatus"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "gitRefFavorite": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "identityId": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "enum": [
            "invalid",
            "folder",
            "ref"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.RefFavoriteType"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "gitRefLockRequest": {
      "type": "object",
      "properties": {
        "lock": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "gitRefUpdate": {
      "type": "object",
      "properties": {
        "isLocked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "newObjectId": {
          "type": "string"
        },
        "oldObjectId": {
          "type": "string"
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "gitRefUpdateResult": {
      "type": "object",
      "properties": {
        "customMessage": {
          "description": "Custom message for the result object For instance, Reason for failing.",
          "type": "string"
        },
        "isLocked": {
          "description": "Whether the ref is locked or not",
          "type": "boolean"
        },
        "name": {
          "description": "Ref name",
          "type": "string"
        },
        "newObjectId": {
          "description": "New object ID",
          "type": "string"
        },
        "oldObjectId": {
          "description": "Old object ID",
          "type": "string"
        },
        "rejectedBy": {
          "description": "Name of the plugin that rejected the updated.",
          "type": "string"
        },
        "repositoryId": {
          "description": "Repository ID",
          "type": "string",
          "format": "uuid"
        },
        "success": {
          "description": "True if the ref update succeeded, false otherwise",
          "type": "boolean"
        },
        "updateStatus": {
          "description": "Status of the update from the TFS server.",
          "enum": [
            "succeeded",
            "forcePushRequired",
            "staleOldObjectId",
            "invalidRefName",
            "unprocessed",
            "unresolvableToCommit",
            "writePermissionRequired",
            "manageNotePermissionRequired",
            "createBranchPermissionRequired",
            "createTagPermissionRequired",
            "rejectedByPlugin",
            "locked",
            "refNameConflict",
            "rejectedByPolicy",
            "succeededNonExistentRef",
            "succeededCorruptRef"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateStatus"
          }
        }
      }
    },
    "gitRefUpdateResultSet": {
      "type": "object",
      "properties": {
        "countFailed": {
          "type": "integer",
          "format": "int32"
        },
        "countSucceeded": {
          "type": "integer",
          "format": "int32"
        },
        "pushCorrelationId": {
          "type": "string",
          "format": "uuid"
        },
        "pushIds": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "pushTime": {
          "type": "string",
          "format": "date-time"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitRefUpdateResult"
          }
        }
      }
    },
    "gitRepository": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "defaultBranch": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/teamProjectReference"
        },
        "remoteUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "validRemoteUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "gitRepositoryStats": {
      "type": "object",
      "properties": {
        "activePullRequestsCount": {
          "type": "integer",
          "format": "int32"
        },
        "branchesCount": {
          "type": "integer",
          "format": "int32"
        },
        "commitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "repositoryId": {
          "type": "string"
        }
      }
    },
    "gitResolution": {
      "type": "object",
      "properties": {
      }
    },
    "gitResolutionMergeContent": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitResolution"
        }
      ],
      "properties": {
        "mergeType": {
          "enum": [
            "undecided",
            "takeSourceContent",
            "takeTargetContent",
            "autoMerged",
            "userMerged"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionMergeType"
          }
        },
        "userMergedBlob": {
          "$ref": "#/definitions/gitBlobRef"
        },
        "userMergedContent": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "gitResolutionPathConflict": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitResolution"
        }
      ],
      "properties": {
        "action": {
          "enum": [
            "undecided",
            "keepSourceRenameTarget",
            "keepSourceDeleteTarget",
            "keepTargetRenameSource",
            "keepTargetDeleteSource"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionPathConflictAction"
          }
        },
        "renamePath": {
          "type": "string"
        }
      }
    },
    "gitResolutionPickOneAction": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitResolution"
        }
      ],
      "properties": {
        "action": {
          "enum": [
            "undecided",
            "pickSourceAction",
            "pickTargetAction"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionWhichAction"
          }
        }
      }
    },
    "gitResolutionRename1to2": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitResolutionMergeContent"
        }
      ],
      "properties": {
        "action": {
          "enum": [
            "undecided",
            "keepSourcePath",
            "keepTargetPath",
            "keepBothFiles"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionRename1to2Action"
          }
        }
      }
    },
    "gitRevert": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitAsyncRefOperation"
        }
      ],
      "properties": {
        "revertId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gitStatus": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "context": {
          "$ref": "#/definitions/gitStatusContext"
        },
        "createdBy": {
          "$ref": "#/definitions/identityRef"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "state": {
          "enum": [
            "notSet",
            "pending",
            "succeeded",
            "failed",
            "error"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitStatusState"
          }
        },
        "targetUrl": {
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gitStatusContext": {
      "type": "object",
      "properties": {
        "genre": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "gitSuggestion": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "gitTargetVersionDescriptor": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/gitVersionDescriptor"
        }
      ],
      "properties": {
        "targetVersion": {
          "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
          "type": "string"
        },
        "targetVersionOptions": {
          "description": "Version options - Specify additional modifiers to version (e.g Previous)",
          "enum": [
            "none",
            "previousChange",
            "firstParent"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions"
          }
        },
        "targetVersionType": {
          "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
          "enum": [
            "branch",
            "tag",
            "commit",
            "index"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType"
          }
        }
      }
    },
    "gitTemplate": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Template",
          "type": "string"
        },
        "type": {
          "description": "Type of the Template",
          "type": "string"
        }
      }
    },
    "gitTreeDiff": {
      "type": "object",
      "properties": {
        "baseTreeId": {
          "description": "ObjectId of the base tree of this diff.",
          "type": "string"
        },
        "diffEntries": {
          "description": "List of tree entries that differ between the base and target tree.  Renames and object type changes are returned as a delete for the old object and add for the new object.  If a continuation token is returned in the response header, some tree entries are yet to be processed and may yeild more diff entries. If the continuation token is not returned all the diff entries have been included in this response.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitTreeDiffEntry"
          }
        },
        "targetTreeId": {
          "description": "ObjectId of the target tree of this diff.",
          "type": "string"
        },
        "url": {
          "description": "REST Url to this resource.",
          "type": "string"
        }
      }
    },
    "gitTreeDiffEntry": {
      "type": "object",
      "properties": {
        "baseObjectId": {
          "description": "SHA1 hash of the object in the base tree, if it exists. Will be null in case of adds.",
          "type": "string"
        },
        "changeType": {
          "description": "Type of change that affected this entry.",
          "enum": [
            "none",
            "add",
            "edit",
            "encoding",
            "rename",
            "delete",
            "undelete",
            "branch",
            "merge",
            "lock",
            "rollback",
            "sourceRename",
            "targetRename",
            "property",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlChangeType"
          }
        },
        "objectType": {
          "description": "Object type of the tree entry. Blob, Tree or Commit(\"submodule\")",
          "enum": [
            "bad",
            "commit",
            "tree",
            "blob",
            "tag",
            "ext2",
            "ofsDelta",
            "refDelta"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitObjectType"
          }
        },
        "path": {
          "description": "Relative path in base and target trees.",
          "type": "string"
        },
        "targetObjectId": {
          "description": "SHA1 hash of the object in the target tree, if it exists. Will be null in case of deletes.",
          "type": "string"
        }
      }
    },
    "gitTreeDiffResponse": {
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "The HTTP client methods find the continuation token header in the response and populate this field.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "treeDiff": {
          "$ref": "#/definitions/gitTreeDiff"
        }
      }
    },
    "gitTreeEntryRef": {
      "type": "object",
      "properties": {
        "gitObjectType": {
          "description": "Blob or tree",
          "enum": [
            "bad",
            "commit",
            "tree",
            "blob",
            "tag",
            "ext2",
            "ofsDelta",
            "refDelta"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitObjectType"
          }
        },
        "mode": {
          "description": "Mode represented as octal string",
          "type": "string"
        },
        "objectId": {
          "description": "SHA1 hash of git object",
          "type": "string"
        },
        "relativePath": {
          "description": "Path relative to parent tree object",
          "type": "string"
        },
        "size": {
          "description": "Size of content",
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "description": "url to retrieve tree or blob",
          "type": "string"
        }
      }
    },
    "gitTreeRef": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "objectId": {
          "description": "SHA1 hash of git object",
          "type": "string"
        },
        "size": {
          "description": "Sum of sizes of all children",
          "type": "integer",
          "format": "int64"
        },
        "treeEntries": {
          "description": "Blobs and trees under this tree",
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitTreeEntryRef"
          }
        },
        "url": {
          "description": "Url to tree",
          "type": "string"
        }
      }
    },
    "gitUserDate": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "gitVersionDescriptor": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Version string identifier (name of tag/branch/index, SHA1 of commit)",
          "type": "string"
        },
        "versionOptions": {
          "description": "Version options - Specify additional modifiers to version (e.g Previous)",
          "enum": [
            "none",
            "previousChange",
            "firstParent"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions"
          }
        },
        "versionType": {
          "description": "Version type (branch, tag, commit, or index). Determines how Id is interpreted",
          "enum": [
            "branch",
            "tag",
            "commit",
            "index"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType"
          }
        }
      }
    },
    "historyEntry": {
      "type": "object",
      "properties": {
        "changeList": {
          "description": "The Change list (changeset/commit/shelveset) for this point in history",
          "type": "string",
          "format": "changeList"
        },
        "itemChangeType": {
          "description": "The change made to the item from this change list (only relevant for File history, not folders)",
          "enum": [
            "none",
            "add",
            "edit",
            "encoding",
            "rename",
            "delete",
            "undelete",
            "branch",
            "merge",
            "lock",
            "rollback",
            "sourceRename",
            "targetRename",
            "property",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlChangeType"
          }
        },
        "serverItem": {
          "description": "The path of the item at this point in history (only relevant for File history, not folders)",
          "type": "string"
        }
      }
    },
    "historyQueryResults": {
      "type": "object",
      "properties": {
        "moreResultsAvailable": {
          "description": "True if there are more results available to fetch (we're returning the max # of items requested) A more RESTy solution would be to include a Link header",
          "type": "boolean"
        },
        "results": {
          "description": "The history entries (results) from this query",
          "type": "array",
          "items": {
            "type": "string",
            "format": "historyEntry"
          }
        }
      }
    },
    "identityRef": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "identityRefWithVote": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/identityRef"
        }
      ],
      "properties": {
        "isRequired": {
          "type": "boolean"
        },
        "reviewerUrl": {
          "type": "string"
        },
        "vote": {
          "type": "integer",
          "format": "int16"
        },
        "votedFor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/identityRefWithVote"
          }
        }
      }
    },
    "includedGitCommit": {
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "commitTime": {
          "type": "string",
          "format": "date-time"
        },
        "parentCommitIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "itemContent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "contentType": {
          "enum": [
            "rawText",
            "base64Encoded"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.ItemContentType"
          }
        }
      }
    },
    "itemDetailsOptions": {
      "type": "object",
      "properties": {
        "includeContentMetadata": {
          "description": "If true, include metadata about the file type",
          "type": "boolean"
        },
        "recursionLevel": {
          "description": "Specifies whether to include children (OneLevel), all descendants (Full) or None for folder items",
          "enum": [
            "none",
            "oneLevel",
            "oneLevelPlusNestedEmptyFolders",
            "full"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType"
          }
        }
      }
    },
    "itemModel": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "contentMetadata": {
          "$ref": "#/definitions/fileContentMetadata"
        },
        "isFolder": {
          "type": "boolean"
        },
        "isSymLink": {
          "type": "boolean"
        },
        "path": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "propertiesCollection": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "object"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pullRequestTabExtensionConfig": {
      "type": "object",
      "properties": {
        "pullRequestId": {
          "type": "integer",
          "format": "int32"
        },
        "repositoryId": {
          "type": "string"
        }
      }
    },
    "referenceLinks": {
      "type": "object",
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "remoteRepositoryValidation": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "resourceRef": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "shareNotificationContext": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Optional user note or message.",
          "type": "string"
        },
        "receivers": {
          "description": "Identities of users who will receive a share notification.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/identityRef"
          }
        }
      }
    },
    "supportedIde": {
      "type": "object",
      "properties": {
        "downloadUrl": {
          "description": "The download URL for the IDE.",
          "type": "string"
        },
        "ideType": {
          "description": "The type of the IDE.",
          "enum": [
            "unknown",
            "androidStudio",
            "appCode",
            "cLion",
            "dataGrip",
            "eclipse",
            "intelliJ",
            "mPS",
            "phpStorm",
            "pyCharm",
            "rubyMine",
            "tower",
            "visualStudio",
            "webStorm"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.SupportedIdeType"
          }
        },
        "name": {
          "description": "The name of the IDE.",
          "type": "string"
        },
        "protocolHandlerUrl": {
          "description": "The URL to open the protocol handler for the IDE.",
          "type": "string"
        },
        "supportedPlatforms": {
          "description": "A list of SupportedPlatforms.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "teamProjectReference": {
      "type": "object",
      "properties": {
        "abbreviation": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        },
        "state": {
          "type": "string",
          "format": "projectState"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "tfvcBranch": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/tfvcBranchRef"
        }
      ],
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcBranch"
          }
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcBranchMapping"
          }
        },
        "parent": {
          "$ref": "#/definitions/tfvcShallowBranchRef"
        },
        "relatedBranches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcShallowBranchRef"
          }
        }
      }
    },
    "tfvcBranchMapping": {
      "type": "object",
      "properties": {
        "depth": {
          "type": "string"
        },
        "serverItem": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "tfvcBranchRef": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/tfvcShallowBranchRef"
        }
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/identityRef"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "tfvcChange": {
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "change"
        }
      ],
      "properties": {
        "mergeSources": {
          "description": "List of merge sources in case of rename or branch creation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcMergeSource"
          }
        },
        "pendingVersion": {
          "description": "Version at which a (shelved) change was pended against",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "tfvcChangeset": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/tfvcChangesetRef"
        }
      ],
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcChange"
          }
        },
        "checkinNotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/checkinNote"
          }
        },
        "collectionId": {
          "type": "string",
          "format": "uuid"
        },
        "hasMoreChanges": {
          "type": "boolean"
        },
        "policyOverride": {
          "$ref": "#/definitions/tfvcPolicyOverrideInfo"
        },
        "teamProjectIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "workItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/associatedWorkItem"
          }
        }
      }
    },
    "tfvcChangesetRef": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "author": {
          "$ref": "#/definitions/identityRef"
        },
        "changesetId": {
          "type": "integer",
          "format": "int32"
        },
        "checkedInBy": {
          "$ref": "#/definitions/identityRef"
        },
        "comment": {
          "type": "string"
        },
        "commentTruncated": {
          "type": "boolean"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "tfvcChangesetSearchCriteria": {
      "type": "object",
      "properties": {
        "author": {
          "description": "Alias or display name of user who made the changes",
          "type": "string"
        },
        "followRenames": {
          "description": "Whether or not to follow renames for the given item being queried",
          "type": "boolean"
        },
        "fromDate": {
          "description": "If provided, only include changesets created after this date (string) Think of a better name for this.",
          "type": "string"
        },
        "fromId": {
          "description": "If provided, only include changesets after this changesetID",
          "type": "integer",
          "format": "int32"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "itemPath": {
          "description": "Path of item to search under",
          "type": "string"
        },
        "toDate": {
          "description": "If provided, only include changesets created before this date (string) Think of a better name for this.",
          "type": "string"
        },
        "toId": {
          "description": "If provided, a version descriptor for the latest change list to include",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "tfvcChangesetsRequestData": {
      "type": "object",
      "properties": {
        "changesetIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "commentLength": {
          "type": "integer",
          "format": "int32"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        }
      }
    },
    "tfvcCheckinEventData": {
      "type": "object",
      "properties": {
        "changeset": {
          "$ref": "#/definitions/tfvcChangeset"
        },
        "project": {
          "$ref": "#/definitions/teamProjectReference"
        }
      }
    },
    "tfvcHistoryEntry": {
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "historyEntry"
        }
      ],
      "properties": {
        "encoding": {
          "description": "The encoding of the item at this point in history (only relevant for File history, not folders)",
          "type": "integer",
          "format": "int32"
        },
        "fileId": {
          "description": "The file id of the item at this point in history (only relevant for File history, not folders)",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "tfvcItem": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/itemModel"
        }
      ],
      "properties": {
        "changeDate": {
          "type": "string",
          "format": "date-time"
        },
        "deletionId": {
          "type": "integer",
          "format": "int32"
        },
        "hashValue": {
          "description": "MD5 hash as a base 64 string, applies to files only.",
          "type": "string"
        },
        "isBranch": {
          "type": "boolean"
        },
        "isPendingChange": {
          "type": "boolean"
        },
        "size": {
          "description": "The size of the file, if applicable.",
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "tfvcItemDescriptor": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "recursionLevel": {
          "enum": [
            "none",
            "oneLevel",
            "oneLevelPlusNestedEmptyFolders",
            "full"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType"
          }
        },
        "version": {
          "type": "string"
        },
        "versionOption": {
          "enum": [
            "none",
            "previous",
            "useRename"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionOption"
          }
        },
        "versionType": {
          "enum": [
            "none",
            "changeset",
            "shelveset",
            "change",
            "date",
            "latest",
            "tip",
            "mergeSource"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionType"
          }
        }
      }
    },
    "tfvcItemRequestData": {
      "type": "object",
      "properties": {
        "includeContentMetadata": {
          "description": "If true, include metadata about the file type",
          "type": "boolean"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "itemDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcItemDescriptor"
          }
        }
      }
    },
    "tfvcLabel": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/tfvcLabelRef"
        }
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcItem"
          }
        }
      }
    },
    "tfvcLabelRef": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "labelScope": {
          "type": "string"
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/identityRef"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "tfvcLabelRequestData": {
      "type": "object",
      "properties": {
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "itemLabelFilter": {
          "type": "string"
        },
        "labelScope": {
          "type": "string"
        },
        "maxItemCount": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "tfvcMergeSource": {
      "type": "object",
      "properties": {
        "isRename": {
          "description": "Indicates if this a rename source. If false, it is a merge source.",
          "type": "boolean"
        },
        "serverItem": {
          "description": "The server item of the merge source",
          "type": "string"
        },
        "versionFrom": {
          "description": "Start of the version range",
          "type": "integer",
          "format": "int32"
        },
        "versionTo": {
          "description": "End of the version range",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "tfvcPolicyFailureInfo": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        }
      }
    },
    "tfvcPolicyOverrideInfo": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "policyFailures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcPolicyFailureInfo"
          }
        }
      }
    },
    "tfvcShallowBranchRef": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "tfvcShelveset": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/tfvcShelvesetRef"
        }
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcChange"
          }
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/checkinNote"
          }
        },
        "policyOverride": {
          "$ref": "#/definitions/tfvcPolicyOverrideInfo"
        },
        "workItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/associatedWorkItem"
          }
        }
      }
    },
    "tfvcShelvesetRef": {
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/referenceLinks"
        },
        "comment": {
          "type": "string"
        },
        "commentTruncated": {
          "type": "boolean"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/identityRef"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "tfvcShelvesetRequestData": {
      "type": "object",
      "properties": {
        "includeDetails": {
          "description": "Whether to include policyOverride and notes Only applies when requesting a single deep shelveset",
          "type": "boolean"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.",
          "type": "boolean"
        },
        "includeWorkItems": {
          "description": "Whether to include workItems",
          "type": "boolean"
        },
        "maxChangeCount": {
          "description": "Max number of changes to include",
          "type": "integer",
          "format": "int32"
        },
        "maxCommentLength": {
          "description": "Max length of comment",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Shelveset's name",
          "type": "string"
        },
        "owner": {
          "description": "Owner's ID. Could be a name or a guid.",
          "type": "string"
        }
      }
    },
    "tfvcVersionDescriptor": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "versionOption": {
          "enum": [
            "none",
            "previous",
            "useRename"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionOption"
          }
        },
        "versionType": {
          "enum": [
            "none",
            "changeset",
            "shelveset",
            "change",
            "date",
            "latest",
            "tip",
            "mergeSource"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionType"
          }
        }
      }
    },
    "updateRefsRequest": {
      "type": "object",
      "properties": {
        "refUpdateRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gitRefUpdate"
          }
        },
        "updateMode": {
          "enum": [
            "bestEffort",
            "allOrNone"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateMode"
          }
        }
      }
    },
    "versionControlProjectInfo": {
      "type": "object",
      "properties": {
        "defaultSourceControlType": {
          "enum": [
            "tfvc",
            "git"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.Core.WebApi.SourceControlTypes"
          }
        },
        "project": {
          "$ref": "#/definitions/teamProjectReference"
        },
        "supportsGit": {
          "type": "boolean"
        },
        "supportsTFVC": {
          "type": "boolean"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '3.1-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
     },
     "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.code": "Grants the ability to read source code and metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to get notified about version control events via service hooks.",
        "vso.code_manage": "Grants the ability to read, update, and delete source code, access metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to create and manage code repositories, create and manage pull requests and code reviews, and to receive notifications about version control events via service hooks.",
        "vso.code_write": "Grants the ability to read, update, and delete source code, access metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to create and manage pull requests and code reviews and to receive notifications about version control events via service hooks.",
        "vso.code_status": "Grants the ability to read and write commit and pull request status."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  }
}